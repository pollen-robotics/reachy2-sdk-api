// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: parallel_gripper.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Component.ParallelGripper {
  public static partial class GripperService
  {
    static readonly string __ServiceName = "component.parallel_gripper.GripperService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    static readonly grpc::Marshaller<global::Component.ParallelGripper.ListOfParallelGripperInfo> __Marshaller_component_parallel_gripper_ListOfParallelGripperInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.ParallelGripper.ListOfParallelGripperInfo.Parser));
    static readonly grpc::Marshaller<global::Component.ParallelGripper.ParallelGripperStateRequest> __Marshaller_component_parallel_gripper_ParallelGripperStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.ParallelGripper.ParallelGripperStateRequest.Parser));
    static readonly grpc::Marshaller<global::Component.ParallelGripper.ParallelGripperState> __Marshaller_component_parallel_gripper_ParallelGripperState = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.ParallelGripper.ParallelGripperState.Parser));
    static readonly grpc::Marshaller<global::Component.ParallelGripper.ParallelGripperStreamStateRequest> __Marshaller_component_parallel_gripper_ParallelGripperStreamStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.ParallelGripper.ParallelGripperStreamStateRequest.Parser));
    static readonly grpc::Marshaller<global::Component.ParallelGripper.ParallelGripperCommand> __Marshaller_component_parallel_gripper_ParallelGripperCommand = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.ParallelGripper.ParallelGripperCommand.Parser));
    static readonly grpc::Marshaller<global::Component.ComponentId> __Marshaller_component_ComponentId = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.ComponentId.Parser));
    static readonly grpc::Marshaller<global::Component.ParallelGripper.ParallelGripperStatus> __Marshaller_component_parallel_gripper_ParallelGripperStatus = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.ParallelGripper.ParallelGripperStatus.Parser));

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Component.ParallelGripper.ListOfParallelGripperInfo> __Method_GetAllParallelGripper = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Component.ParallelGripper.ListOfParallelGripperInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllParallelGripper",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_component_parallel_gripper_ListOfParallelGripperInfo);

    static readonly grpc::Method<global::Component.ParallelGripper.ParallelGripperStateRequest, global::Component.ParallelGripper.ParallelGripperState> __Method_GetState = new grpc::Method<global::Component.ParallelGripper.ParallelGripperStateRequest, global::Component.ParallelGripper.ParallelGripperState>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetState",
        __Marshaller_component_parallel_gripper_ParallelGripperStateRequest,
        __Marshaller_component_parallel_gripper_ParallelGripperState);

    static readonly grpc::Method<global::Component.ParallelGripper.ParallelGripperStreamStateRequest, global::Component.ParallelGripper.ParallelGripperState> __Method_StreamState = new grpc::Method<global::Component.ParallelGripper.ParallelGripperStreamStateRequest, global::Component.ParallelGripper.ParallelGripperState>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamState",
        __Marshaller_component_parallel_gripper_ParallelGripperStreamStateRequest,
        __Marshaller_component_parallel_gripper_ParallelGripperState);

    static readonly grpc::Method<global::Component.ParallelGripper.ParallelGripperCommand, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SendCommand = new grpc::Method<global::Component.ParallelGripper.ParallelGripperCommand, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendCommand",
        __Marshaller_component_parallel_gripper_ParallelGripperCommand,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Component.ParallelGripper.ParallelGripperCommand, global::Google.Protobuf.WellKnownTypes.Empty> __Method_StreamCommand = new grpc::Method<global::Component.ParallelGripper.ParallelGripperCommand, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "StreamCommand",
        __Marshaller_component_parallel_gripper_ParallelGripperCommand,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Component.ComponentId, global::Component.ParallelGripper.ParallelGripperStatus> __Method_Audit = new grpc::Method<global::Component.ComponentId, global::Component.ParallelGripper.ParallelGripperStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Audit",
        __Marshaller_component_ComponentId,
        __Marshaller_component_parallel_gripper_ParallelGripperStatus);

    static readonly grpc::Method<global::Component.ComponentId, global::Google.Protobuf.WellKnownTypes.Empty> __Method_HeartBeat = new grpc::Method<global::Component.ComponentId, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HeartBeat",
        __Marshaller_component_ComponentId,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Component.ComponentId, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Restart = new grpc::Method<global::Component.ComponentId, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Restart",
        __Marshaller_component_ComponentId,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Component.ParallelGripper.ParallelGripperReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GripperService</summary>
    [grpc::BindServiceMethod(typeof(GripperService), "BindService")]
    public abstract partial class GripperServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Component.ParallelGripper.ListOfParallelGripperInfo> GetAllParallelGripper(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Component.ParallelGripper.ParallelGripperState> GetState(global::Component.ParallelGripper.ParallelGripperStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task StreamState(global::Component.ParallelGripper.ParallelGripperStreamStateRequest request, grpc::IServerStreamWriter<global::Component.ParallelGripper.ParallelGripperState> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> SendCommand(global::Component.ParallelGripper.ParallelGripperCommand request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> StreamCommand(grpc::IAsyncStreamReader<global::Component.ParallelGripper.ParallelGripperCommand> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Component.ParallelGripper.ParallelGripperStatus> Audit(global::Component.ComponentId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> HeartBeat(global::Component.ComponentId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Restart(global::Component.ComponentId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GripperService</summary>
    public partial class GripperServiceClient : grpc::ClientBase<GripperServiceClient>
    {
      /// <summary>Creates a new client for GripperService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GripperServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GripperService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GripperServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GripperServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GripperServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Component.ParallelGripper.ListOfParallelGripperInfo GetAllParallelGripper(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllParallelGripper(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Component.ParallelGripper.ListOfParallelGripperInfo GetAllParallelGripper(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllParallelGripper, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Component.ParallelGripper.ListOfParallelGripperInfo> GetAllParallelGripperAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllParallelGripperAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Component.ParallelGripper.ListOfParallelGripperInfo> GetAllParallelGripperAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllParallelGripper, null, options, request);
      }
      public virtual global::Component.ParallelGripper.ParallelGripperState GetState(global::Component.ParallelGripper.ParallelGripperStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Component.ParallelGripper.ParallelGripperState GetState(global::Component.ParallelGripper.ParallelGripperStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetState, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Component.ParallelGripper.ParallelGripperState> GetStateAsync(global::Component.ParallelGripper.ParallelGripperStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Component.ParallelGripper.ParallelGripperState> GetStateAsync(global::Component.ParallelGripper.ParallelGripperStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetState, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Component.ParallelGripper.ParallelGripperState> StreamState(global::Component.ParallelGripper.ParallelGripperStreamStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Component.ParallelGripper.ParallelGripperState> StreamState(global::Component.ParallelGripper.ParallelGripperStreamStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamState, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SendCommand(global::Component.ParallelGripper.ParallelGripperCommand request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SendCommand(global::Component.ParallelGripper.ParallelGripperCommand request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendCommand, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SendCommandAsync(global::Component.ParallelGripper.ParallelGripperCommand request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SendCommandAsync(global::Component.ParallelGripper.ParallelGripperCommand request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendCommand, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Component.ParallelGripper.ParallelGripperCommand, global::Google.Protobuf.WellKnownTypes.Empty> StreamCommand(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamCommand(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Component.ParallelGripper.ParallelGripperCommand, global::Google.Protobuf.WellKnownTypes.Empty> StreamCommand(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_StreamCommand, null, options);
      }
      public virtual global::Component.ParallelGripper.ParallelGripperStatus Audit(global::Component.ComponentId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Audit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Component.ParallelGripper.ParallelGripperStatus Audit(global::Component.ComponentId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Audit, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Component.ParallelGripper.ParallelGripperStatus> AuditAsync(global::Component.ComponentId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuditAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Component.ParallelGripper.ParallelGripperStatus> AuditAsync(global::Component.ComponentId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Audit, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty HeartBeat(global::Component.ComponentId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HeartBeat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty HeartBeat(global::Component.ComponentId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HeartBeat, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> HeartBeatAsync(global::Component.ComponentId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HeartBeatAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> HeartBeatAsync(global::Component.ComponentId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HeartBeat, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Restart(global::Component.ComponentId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Restart(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Restart(global::Component.ComponentId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Restart, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RestartAsync(global::Component.ComponentId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestartAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RestartAsync(global::Component.ComponentId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Restart, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GripperServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GripperServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GripperServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAllParallelGripper, serviceImpl.GetAllParallelGripper)
          .AddMethod(__Method_GetState, serviceImpl.GetState)
          .AddMethod(__Method_StreamState, serviceImpl.StreamState)
          .AddMethod(__Method_SendCommand, serviceImpl.SendCommand)
          .AddMethod(__Method_StreamCommand, serviceImpl.StreamCommand)
          .AddMethod(__Method_Audit, serviceImpl.Audit)
          .AddMethod(__Method_HeartBeat, serviceImpl.HeartBeat)
          .AddMethod(__Method_Restart, serviceImpl.Restart).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GripperServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAllParallelGripper, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Component.ParallelGripper.ListOfParallelGripperInfo>(serviceImpl.GetAllParallelGripper));
      serviceBinder.AddMethod(__Method_GetState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Component.ParallelGripper.ParallelGripperStateRequest, global::Component.ParallelGripper.ParallelGripperState>(serviceImpl.GetState));
      serviceBinder.AddMethod(__Method_StreamState, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Component.ParallelGripper.ParallelGripperStreamStateRequest, global::Component.ParallelGripper.ParallelGripperState>(serviceImpl.StreamState));
      serviceBinder.AddMethod(__Method_SendCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Component.ParallelGripper.ParallelGripperCommand, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.SendCommand));
      serviceBinder.AddMethod(__Method_StreamCommand, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Component.ParallelGripper.ParallelGripperCommand, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.StreamCommand));
      serviceBinder.AddMethod(__Method_Audit, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Component.ComponentId, global::Component.ParallelGripper.ParallelGripperStatus>(serviceImpl.Audit));
      serviceBinder.AddMethod(__Method_HeartBeat, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Component.ComponentId, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.HeartBeat));
      serviceBinder.AddMethod(__Method_Restart, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Component.ComponentId, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Restart));
    }

  }
}
#endregion
