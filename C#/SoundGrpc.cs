// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sound.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Component.Sound {
  public static partial class SoundService
  {
    static readonly string __ServiceName = "component.sound.SoundService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    static readonly grpc::Marshaller<global::Component.Sound.ListOfMicrophone> __Marshaller_component_sound_ListOfMicrophone = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.Sound.ListOfMicrophone.Parser));
    static readonly grpc::Marshaller<global::Component.Sound.ListOfSpeaker> __Marshaller_component_sound_ListOfSpeaker = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.Sound.ListOfSpeaker.Parser));
    static readonly grpc::Marshaller<global::Component.Sound.RecordingRequest> __Marshaller_component_sound_RecordingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.Sound.RecordingRequest.Parser));
    static readonly grpc::Marshaller<global::Component.Sound.RecordingAck> __Marshaller_component_sound_RecordingAck = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.Sound.RecordingAck.Parser));
    static readonly grpc::Marshaller<global::Component.ComponentId> __Marshaller_component_ComponentId = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.ComponentId.Parser));
    static readonly grpc::Marshaller<global::Component.Sound.VolumeRequest> __Marshaller_component_sound_VolumeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.Sound.VolumeRequest.Parser));
    static readonly grpc::Marshaller<global::Component.Sound.SoundRequest> __Marshaller_component_sound_SoundRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.Sound.SoundRequest.Parser));
    static readonly grpc::Marshaller<global::Component.Sound.ListOfSound> __Marshaller_component_sound_ListOfSound = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.Sound.ListOfSound.Parser));
    static readonly grpc::Marshaller<global::Component.Sound.TextRequest> __Marshaller_component_sound_TextRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Component.Sound.TextRequest.Parser));

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Component.Sound.ListOfMicrophone> __Method_GetAllMicrophone = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Component.Sound.ListOfMicrophone>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllMicrophone",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_component_sound_ListOfMicrophone);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Component.Sound.ListOfSpeaker> __Method_GetAllSpeaker = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Component.Sound.ListOfSpeaker>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllSpeaker",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_component_sound_ListOfSpeaker);

    static readonly grpc::Method<global::Component.Sound.RecordingRequest, global::Component.Sound.RecordingAck> __Method_StartRecording = new grpc::Method<global::Component.Sound.RecordingRequest, global::Component.Sound.RecordingAck>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartRecording",
        __Marshaller_component_sound_RecordingRequest,
        __Marshaller_component_sound_RecordingAck);

    static readonly grpc::Method<global::Component.ComponentId, global::Component.Sound.RecordingAck> __Method_StopRecording = new grpc::Method<global::Component.ComponentId, global::Component.Sound.RecordingAck>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopRecording",
        __Marshaller_component_ComponentId,
        __Marshaller_component_sound_RecordingAck);

    static readonly grpc::Method<global::Component.ComponentId, global::Google.Protobuf.WellKnownTypes.Empty> __Method_TestSpeaker = new grpc::Method<global::Component.ComponentId, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestSpeaker",
        __Marshaller_component_ComponentId,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Component.Sound.VolumeRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_ChangeVolume = new grpc::Method<global::Component.Sound.VolumeRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangeVolume",
        __Marshaller_component_sound_VolumeRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Component.Sound.SoundRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_PlaySound = new grpc::Method<global::Component.Sound.SoundRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PlaySound",
        __Marshaller_component_sound_SoundRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Component.ComponentId, global::Google.Protobuf.WellKnownTypes.Empty> __Method_StopSound = new grpc::Method<global::Component.ComponentId, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopSound",
        __Marshaller_component_ComponentId,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Component.Sound.ListOfSound> __Method_GetSoundsList = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Component.Sound.ListOfSound>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSoundsList",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_component_sound_ListOfSound);

    static readonly grpc::Method<global::Component.Sound.TextRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SayText = new grpc::Method<global::Component.Sound.TextRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SayText",
        __Marshaller_component_sound_TextRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Component.Sound.SoundReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SoundService</summary>
    [grpc::BindServiceMethod(typeof(SoundService), "BindService")]
    public abstract partial class SoundServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Component.Sound.ListOfMicrophone> GetAllMicrophone(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Component.Sound.ListOfSpeaker> GetAllSpeaker(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Component.Sound.RecordingAck> StartRecording(global::Component.Sound.RecordingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Component.Sound.RecordingAck> StopRecording(global::Component.ComponentId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> TestSpeaker(global::Component.ComponentId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> ChangeVolume(global::Component.Sound.VolumeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> PlaySound(global::Component.Sound.SoundRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> StopSound(global::Component.ComponentId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Component.Sound.ListOfSound> GetSoundsList(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> SayText(global::Component.Sound.TextRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SoundService</summary>
    public partial class SoundServiceClient : grpc::ClientBase<SoundServiceClient>
    {
      /// <summary>Creates a new client for SoundService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SoundServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SoundService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SoundServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SoundServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SoundServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Component.Sound.ListOfMicrophone GetAllMicrophone(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllMicrophone(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Component.Sound.ListOfMicrophone GetAllMicrophone(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllMicrophone, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Component.Sound.ListOfMicrophone> GetAllMicrophoneAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllMicrophoneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Component.Sound.ListOfMicrophone> GetAllMicrophoneAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllMicrophone, null, options, request);
      }
      public virtual global::Component.Sound.ListOfSpeaker GetAllSpeaker(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllSpeaker(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Component.Sound.ListOfSpeaker GetAllSpeaker(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllSpeaker, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Component.Sound.ListOfSpeaker> GetAllSpeakerAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllSpeakerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Component.Sound.ListOfSpeaker> GetAllSpeakerAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllSpeaker, null, options, request);
      }
      public virtual global::Component.Sound.RecordingAck StartRecording(global::Component.Sound.RecordingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartRecording(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Component.Sound.RecordingAck StartRecording(global::Component.Sound.RecordingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartRecording, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Component.Sound.RecordingAck> StartRecordingAsync(global::Component.Sound.RecordingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartRecordingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Component.Sound.RecordingAck> StartRecordingAsync(global::Component.Sound.RecordingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartRecording, null, options, request);
      }
      public virtual global::Component.Sound.RecordingAck StopRecording(global::Component.ComponentId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopRecording(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Component.Sound.RecordingAck StopRecording(global::Component.ComponentId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopRecording, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Component.Sound.RecordingAck> StopRecordingAsync(global::Component.ComponentId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopRecordingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Component.Sound.RecordingAck> StopRecordingAsync(global::Component.ComponentId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopRecording, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty TestSpeaker(global::Component.ComponentId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestSpeaker(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty TestSpeaker(global::Component.ComponentId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestSpeaker, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> TestSpeakerAsync(global::Component.ComponentId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestSpeakerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> TestSpeakerAsync(global::Component.ComponentId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestSpeaker, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ChangeVolume(global::Component.Sound.VolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ChangeVolume(global::Component.Sound.VolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChangeVolume, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ChangeVolumeAsync(global::Component.Sound.VolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChangeVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ChangeVolumeAsync(global::Component.Sound.VolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChangeVolume, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty PlaySound(global::Component.Sound.SoundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlaySound(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty PlaySound(global::Component.Sound.SoundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PlaySound, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> PlaySoundAsync(global::Component.Sound.SoundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlaySoundAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> PlaySoundAsync(global::Component.Sound.SoundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PlaySound, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty StopSound(global::Component.ComponentId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopSound(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty StopSound(global::Component.ComponentId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopSound, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> StopSoundAsync(global::Component.ComponentId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopSoundAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> StopSoundAsync(global::Component.ComponentId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopSound, null, options, request);
      }
      public virtual global::Component.Sound.ListOfSound GetSoundsList(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSoundsList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Component.Sound.ListOfSound GetSoundsList(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSoundsList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Component.Sound.ListOfSound> GetSoundsListAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSoundsListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Component.Sound.ListOfSound> GetSoundsListAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSoundsList, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SayText(global::Component.Sound.TextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayText(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SayText(global::Component.Sound.TextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SayText, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SayTextAsync(global::Component.Sound.TextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayTextAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SayTextAsync(global::Component.Sound.TextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SayText, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SoundServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SoundServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SoundServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAllMicrophone, serviceImpl.GetAllMicrophone)
          .AddMethod(__Method_GetAllSpeaker, serviceImpl.GetAllSpeaker)
          .AddMethod(__Method_StartRecording, serviceImpl.StartRecording)
          .AddMethod(__Method_StopRecording, serviceImpl.StopRecording)
          .AddMethod(__Method_TestSpeaker, serviceImpl.TestSpeaker)
          .AddMethod(__Method_ChangeVolume, serviceImpl.ChangeVolume)
          .AddMethod(__Method_PlaySound, serviceImpl.PlaySound)
          .AddMethod(__Method_StopSound, serviceImpl.StopSound)
          .AddMethod(__Method_GetSoundsList, serviceImpl.GetSoundsList)
          .AddMethod(__Method_SayText, serviceImpl.SayText).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SoundServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAllMicrophone, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Component.Sound.ListOfMicrophone>(serviceImpl.GetAllMicrophone));
      serviceBinder.AddMethod(__Method_GetAllSpeaker, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Component.Sound.ListOfSpeaker>(serviceImpl.GetAllSpeaker));
      serviceBinder.AddMethod(__Method_StartRecording, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Component.Sound.RecordingRequest, global::Component.Sound.RecordingAck>(serviceImpl.StartRecording));
      serviceBinder.AddMethod(__Method_StopRecording, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Component.ComponentId, global::Component.Sound.RecordingAck>(serviceImpl.StopRecording));
      serviceBinder.AddMethod(__Method_TestSpeaker, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Component.ComponentId, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.TestSpeaker));
      serviceBinder.AddMethod(__Method_ChangeVolume, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Component.Sound.VolumeRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.ChangeVolume));
      serviceBinder.AddMethod(__Method_PlaySound, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Component.Sound.SoundRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.PlaySound));
      serviceBinder.AddMethod(__Method_StopSound, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Component.ComponentId, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.StopSound));
      serviceBinder.AddMethod(__Method_GetSoundsList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Component.Sound.ListOfSound>(serviceImpl.GetSoundsList));
      serviceBinder.AddMethod(__Method_SayText, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Component.Sound.TextRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.SayText));
    }

  }
}
#endregion
