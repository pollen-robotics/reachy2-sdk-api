syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "part.proto";
import "kinematics.proto";
import "error.proto";
import "orbita3d.proto";
import "dynamixel_motor.proto";

package reachy.part.head;

enum HeadField {
    NONE = 0;

    NAME = 1;
    ID = 2;

    PRESENT_POSITION = 3;
    PRESENT_SPEED = 4;
    PRESENT_LOAD = 5;
    TEMPERATURE = 6;
    JOINT_LIMIT = 7;

    COMPLIANT = 8;
    GOAL_POSITION = 9;
    SPEED_LIMIT = 10;
    TORQUE_LIMIT = 11;
    PID = 12;

    ALL = 15;
}

message Head {
    PartId part_id = 1;
    HeadDescription description = 2;
    PartInfo info = 5;
}

message HeadDescription {
    component.orbita3d.Orbita3DInfo neck = 1;

    component.dynamixel_motor.DynamixelMotorInfo l_antenna = 2;
    component.dynamixel_motor.DynamixelMotorInfo r_antenna = 3;
}

message ListOfHead {
    repeated Head head = 1;
}

message HeadState {
    google.protobuf.Timestamp timestamp = 1;

    string name = 2;
    uint32 id = 3;

    bool activated = 4;

    component.orbita3d.Orbita3DState neck_state = 5;
    component.dynamixel_motor.DynamixelMotorState l_antenna_state = 6;
    component.dynamixel_motor.DynamixelMotorState r_antenna_state = 7;
}

message NeckPosition {
    float neck_roll = 1;
    float neck_pitch = 2;
    float neck_yaw = 3;
}

message HeadPosition {
    NeckPosition neck_position = 1;
    google.protobuf.FloatValue l_antenna_position = 2;
    google.protobuf.FloatValue r_antenna_position = 3;
}

message NeckGoal {
    reachy.part.PartId id = 1;
    kinematics.Rotation3D rotation = 2;
    google.protobuf.FloatValue duration = 3;
}

message NeckOrientation {
    reachy.kinematics.Quaternion q = 1;
}

message NeckFKRequest {
    reachy.part.PartId id = 1;
    HeadPosition position = 2;
}

message NeckFKSolution {
    bool success = 1;
    NeckOrientation orientation = 2;
}

message NeckIKRequest {
    reachy.part.PartId id = 1;
    NeckOrientation target = 2;
    NeckPosition q0 = 3;
}

message NeckIKSolution {
    bool success = 1;
    NeckPosition position = 2;

    error.Error error = 3;
}

message HeadStatus {

}

message HeadTargetPoint {
    reachy.part.PartId id = 1;
    reachy.kinematics.Point point = 2;
}

enum SpeedLimit {
    NO_LIMIT = 0;
    FAST = 1;
    NORMAL = 2;
    SLOW = 3;
}

message SpeedLimitRequest {
    reachy.part.PartId id = 1;
    SpeedLimit limit = 2;
}

message JointLimits {
    float min = 1;
    float max = 2;
}

message JointsLimits {
    JointLimits neck_roll = 1;
    JointLimits neck_pitch = 2;
    JointLimits neck_yaw = 3;
    JointLimits l_antenna = 4;
    JointLimits r_antenna = 5;
}

message Temperatures {
    float motor = 1;
    float driver = 2;
}

message HeadTemperatures {
    Temperatures neck_motor_1 = 1;
    Temperatures neck_motor_2 = 2;
    Temperatures neck_motor_3 = 3;
    Temperatures l_antenna = 4;
    Temperatures r_antenna = 5;
}

service HeadService {
    rpc GetAllHeads (google.protobuf.Empty) returns (ListOfHead);

    rpc ComputeNeckFK (NeckFKRequest) returns (NeckFKSolution);
    rpc ComputeNeckIK (NeckIKRequest) returns (NeckIKSolution);

    rpc GoToOrientation (NeckGoal) returns (google.protobuf.Empty);
    rpc GetOrientation (reachy.part.PartId) returns (reachy.kinematics.Quaternion);

    rpc LookAt (HeadTargetPoint) returns (google.protobuf.Empty);

    rpc Audit (reachy.part.PartId) returns (HeadStatus);
    rpc HeartBeat (reachy.part.PartId) returns (google.protobuf.Empty);

    rpc Restart (reachy.part.PartId) returns (google.protobuf.Empty);
    rpc ResetDefaultValues(reachy.part.PartId) returns (google.protobuf.Empty);

    rpc TurnOn (reachy.part.PartId) returns (google.protobuf.Empty);
    rpc TurnOff (reachy.part.PartId) returns (google.protobuf.Empty);

    rpc GetJointsLimits (reachy.part.PartId) returns (JointsLimits);
    rpc GetTemperatures (reachy.part.PartId) returns (HeadTemperatures);
    rpc GetJointGoalPosition (reachy.part.PartId) returns (NeckPosition);

    rpc SetSpeedLimit (SpeedLimitRequest) returns (google.protobuf.Empty);
}
