syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "part.proto";
import "kinematics.proto";
import "error.proto";
import "component.proto";
import "orbita3d.proto";
import "dynamixel_motor.proto";

package reachy.part.head;

enum HeadField {
    NONE = 0;

    NAME = 1;
    ID = 2;

    PRESENT_POSITION = 3;
    PRESENT_SPEED = 4;
    PRESENT_LOAD = 5;
    TEMPERATURE = 6;
    JOINT_LIMITS = 7;

    COMPLIANT = 8;
    GOAL_POSITION = 9;
    SPEED_LIMIT = 10;
    TORQUE_LIMIT = 11;
    PID = 12;

    ALL = 15;
}

message Head {
    PartId part_id = 1;
    HeadDescription description = 2;
    PartInfo info = 5;
}

message HeadDescription {
    component.orbita3d.Orbita3d neck = 1;

    component.dynamixel_motor.DynamixelMotor l_antenna = 2;
    component.dynamixel_motor.DynamixelMotor r_antenna = 3;
}

message ListOfHead {
    repeated Head head = 1;
}

message HeadState {
    google.protobuf.Timestamp timestamp = 1;

    reachy.part.PartId id = 2;

    bool activated = 3;

    component.orbita3d.Orbita3dState neck_state = 4;
    component.dynamixel_motor.DynamixelMotorState l_antenna_state = 5;
    component.dynamixel_motor.DynamixelMotorState r_antenna_state = 6;
}

message HeadPosition {
    kinematics.Rotation3d neck_position = 1;
    google.protobuf.FloatValue l_antenna_position = 2;
    google.protobuf.FloatValue r_antenna_position = 3;
}

message NeckCartesianGoal {
    reachy.part.PartId id = 1;
    reachy.kinematics.Point point = 2;
    google.protobuf.FloatValue duration = 3;
}

message NeckJointGoal {
    reachy.part.PartId id = 1;
    NeckOrientation joints_goal = 2;
    google.protobuf.FloatValue duration = 3;
}


message NeckOrientation {
    kinematics.Rotation3d rotation = 1;
}

message NeckFKRequest {
    reachy.part.PartId id = 1;
    HeadPosition position = 2;
}

message NeckFKSolution {
    bool success = 1;
    NeckOrientation orientation = 2;
}

message NeckIKRequest {
    reachy.part.PartId id = 1;
    NeckOrientation target = 2;
    kinematics.Rotation3d q0 = 3;
}

message NeckIKSolution {
    bool success = 1;
    kinematics.Rotation3d position = 2;

    error.Error error = 3;
}

message HeadStatus {
    repeated error.Error errors = 1;
}

message SpeedLimitRequest {
    reachy.part.PartId id = 1;
    uint32 limit = 2;
}

message TorqueLimitRequest {
    reachy.part.PartId id = 1;
    uint32 limit = 2;
}

message JointsLimits {
    component.orbita3d.Limits3d neck_limits = 1;
    component.JointLimits l_antenna_limits = 2;
    component.JointLimits r_antenna_limits = 3;
}

message HeadTemperatures {
    component.orbita3d.Float3d neck_temperature = 1;
    float l_antenna_temperature = 2;
    float r_antenna_temperature = 3;
}

service HeadService {
    rpc GetAllHeads (google.protobuf.Empty) returns (ListOfHead);

    rpc GetState (reachy.part.PartId) returns (HeadState);

    rpc ComputeNeckFK (NeckFKRequest) returns (NeckFKSolution);
    rpc ComputeNeckIK (NeckIKRequest) returns (NeckIKSolution);

    rpc GetOrientation (reachy.part.PartId) returns (kinematics.Rotation3d);

    rpc Audit (reachy.part.PartId) returns (HeadStatus);
    rpc HeartBeat (reachy.part.PartId) returns (google.protobuf.Empty);

    rpc Restart (reachy.part.PartId) returns (google.protobuf.Empty);
    rpc ResetDefaultValues(reachy.part.PartId) returns (google.protobuf.Empty);

    rpc TurnOn (reachy.part.PartId) returns (google.protobuf.Empty);
    rpc TurnOff (reachy.part.PartId) returns (google.protobuf.Empty);

    rpc GetJointsLimits (reachy.part.PartId) returns (JointsLimits);
    rpc GetTemperatures (reachy.part.PartId) returns (HeadTemperatures);
    rpc GetJointGoalPosition (reachy.part.PartId) returns (kinematics.Rotation3d);

    rpc SetSpeedLimit (SpeedLimitRequest) returns (google.protobuf.Empty);
    rpc SetTorqueLimit (TorqueLimitRequest) returns (google.protobuf.Empty);
    rpc SendNeckJointGoal (NeckJointGoal) returns (google.protobuf.Empty);
}
