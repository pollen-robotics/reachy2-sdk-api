syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

import "component.proto";
import "error.proto";

package component.sound;

message Microphone {
    component.ComponentId id = 1;

    float gain = 2;
}

message ListOfMicrophone {
    repeated Microphone microphone_info = 1;
}

message SoundAck {
    google.protobuf.BoolValue success = 1;

    error.Error error = 2;
}

message SoundRequest {
    component.ComponentId speaker = 1;
    SoundId sound = 2;
    float volume = 3;
}

message SoundId {
    string id = 1;
}

message RecordingAck {
    SoundAck ack = 1;
    SoundId recording_id = 2;
}

message RecordingRequest {
    component.ComponentId micro = 1;
    SoundId recording_id = 2;
}

message Speaker {
    component.ComponentId id = 1;

    float volume = 2;
}

message ListOfSpeaker {
    repeated Speaker speaker_info = 1;
}

message VolumeRequest {
    component.ComponentId id = 1;
    float volume = 2;
}

message ListOfSound {
    repeated SoundId sounds = 1;
}


service SoundService {
    rpc GetAllMicrophone (google.protobuf.Empty) returns (ListOfMicrophone);
    rpc GetAllSpeaker (google.protobuf.Empty) returns (ListOfSpeaker);

    rpc StartRecording (RecordingRequest) returns (RecordingAck);
    rpc StopRecording (component.ComponentId) returns (RecordingAck);

    rpc TestSpeaker (component.ComponentId) returns (google.protobuf.Empty);
    rpc ChangeVolume (VolumeRequest) returns (google.protobuf.Empty);

    rpc PlaySound (SoundRequest) returns (google.protobuf.Empty);
    rpc StopSound (component.ComponentId) returns (google.protobuf.Empty);

    rpc GetSoundsList(google.protobuf.Empty) returns (ListOfSound);
}
