/**
 * @fileoverview gRPC-Web generated client stub for component.sound
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: sound.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as component_pb from './component_pb';
import * as sound_pb from './sound_pb';
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';


export class SoundServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetAllMicrophone = new grpcWeb.MethodDescriptor(
    '/component.sound.SoundService/GetAllMicrophone',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    sound_pb.ListOfMicrophoneInfo,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    sound_pb.ListOfMicrophoneInfo.deserializeBinary
  );

  getAllMicrophone(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<sound_pb.ListOfMicrophoneInfo>;

  getAllMicrophone(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: sound_pb.ListOfMicrophoneInfo) => void): grpcWeb.ClientReadableStream<sound_pb.ListOfMicrophoneInfo>;

  getAllMicrophone(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: sound_pb.ListOfMicrophoneInfo) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.sound.SoundService/GetAllMicrophone',
        request,
        metadata || {},
        this.methodDescriptorGetAllMicrophone,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.sound.SoundService/GetAllMicrophone',
    request,
    metadata || {},
    this.methodDescriptorGetAllMicrophone);
  }

  methodDescriptorGetAllSpeaker = new grpcWeb.MethodDescriptor(
    '/component.sound.SoundService/GetAllSpeaker',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    sound_pb.ListOfSpeakerInfo,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    sound_pb.ListOfSpeakerInfo.deserializeBinary
  );

  getAllSpeaker(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<sound_pb.ListOfSpeakerInfo>;

  getAllSpeaker(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: sound_pb.ListOfSpeakerInfo) => void): grpcWeb.ClientReadableStream<sound_pb.ListOfSpeakerInfo>;

  getAllSpeaker(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: sound_pb.ListOfSpeakerInfo) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.sound.SoundService/GetAllSpeaker',
        request,
        metadata || {},
        this.methodDescriptorGetAllSpeaker,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.sound.SoundService/GetAllSpeaker',
    request,
    metadata || {},
    this.methodDescriptorGetAllSpeaker);
  }

  methodDescriptorStartRecording = new grpcWeb.MethodDescriptor(
    '/component.sound.SoundService/StartRecording',
    grpcWeb.MethodType.UNARY,
    component_pb.ComponentId,
    google_protobuf_empty_pb.Empty,
    (request: component_pb.ComponentId) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  startRecording(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  startRecording(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  startRecording(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.sound.SoundService/StartRecording',
        request,
        metadata || {},
        this.methodDescriptorStartRecording,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.sound.SoundService/StartRecording',
    request,
    metadata || {},
    this.methodDescriptorStartRecording);
  }

  methodDescriptorStopRecording = new grpcWeb.MethodDescriptor(
    '/component.sound.SoundService/StopRecording',
    grpcWeb.MethodType.UNARY,
    component_pb.ComponentId,
    sound_pb.RecordingAck,
    (request: component_pb.ComponentId) => {
      return request.serializeBinary();
    },
    sound_pb.RecordingAck.deserializeBinary
  );

  stopRecording(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null): Promise<sound_pb.RecordingAck>;

  stopRecording(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: sound_pb.RecordingAck) => void): grpcWeb.ClientReadableStream<sound_pb.RecordingAck>;

  stopRecording(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: sound_pb.RecordingAck) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.sound.SoundService/StopRecording',
        request,
        metadata || {},
        this.methodDescriptorStopRecording,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.sound.SoundService/StopRecording',
    request,
    metadata || {},
    this.methodDescriptorStopRecording);
  }

  methodDescriptorTestSpeaker = new grpcWeb.MethodDescriptor(
    '/component.sound.SoundService/TestSpeaker',
    grpcWeb.MethodType.UNARY,
    component_pb.ComponentId,
    google_protobuf_empty_pb.Empty,
    (request: component_pb.ComponentId) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  testSpeaker(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  testSpeaker(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  testSpeaker(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.sound.SoundService/TestSpeaker',
        request,
        metadata || {},
        this.methodDescriptorTestSpeaker,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.sound.SoundService/TestSpeaker',
    request,
    metadata || {},
    this.methodDescriptorTestSpeaker);
  }

  methodDescriptorChangeVolume = new grpcWeb.MethodDescriptor(
    '/component.sound.SoundService/ChangeVolume',
    grpcWeb.MethodType.UNARY,
    sound_pb.VolumeRequest,
    google_protobuf_empty_pb.Empty,
    (request: sound_pb.VolumeRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  changeVolume(
    request: sound_pb.VolumeRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  changeVolume(
    request: sound_pb.VolumeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  changeVolume(
    request: sound_pb.VolumeRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.sound.SoundService/ChangeVolume',
        request,
        metadata || {},
        this.methodDescriptorChangeVolume,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.sound.SoundService/ChangeVolume',
    request,
    metadata || {},
    this.methodDescriptorChangeVolume);
  }

  methodDescriptorPlaySound = new grpcWeb.MethodDescriptor(
    '/component.sound.SoundService/PlaySound',
    grpcWeb.MethodType.UNARY,
    sound_pb.SoundId,
    google_protobuf_empty_pb.Empty,
    (request: sound_pb.SoundId) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  playSound(
    request: sound_pb.SoundId,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  playSound(
    request: sound_pb.SoundId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  playSound(
    request: sound_pb.SoundId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.sound.SoundService/PlaySound',
        request,
        metadata || {},
        this.methodDescriptorPlaySound,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.sound.SoundService/PlaySound',
    request,
    metadata || {},
    this.methodDescriptorPlaySound);
  }

}

