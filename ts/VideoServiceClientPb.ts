/**
 * @fileoverview gRPC-Web generated client stub for component.video
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: video.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as component_pb from './component_pb';
import * as video_pb from './video_pb';
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';


export class VideoServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetAllStereoCamera = new grpcWeb.MethodDescriptor(
    '/component.video.VideoService/GetAllStereoCamera',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    video_pb.ListOfStereoCameraInfo,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    video_pb.ListOfStereoCameraInfo.deserializeBinary
  );

  getAllStereoCamera(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<video_pb.ListOfStereoCameraInfo>;

  getAllStereoCamera(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: video_pb.ListOfStereoCameraInfo) => void): grpcWeb.ClientReadableStream<video_pb.ListOfStereoCameraInfo>;

  getAllStereoCamera(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: video_pb.ListOfStereoCameraInfo) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.video.VideoService/GetAllStereoCamera',
        request,
        metadata || {},
        this.methodDescriptorGetAllStereoCamera,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.video.VideoService/GetAllStereoCamera',
    request,
    metadata || {},
    this.methodDescriptorGetAllStereoCamera);
  }

  methodDescriptorGetAllDepthCamera = new grpcWeb.MethodDescriptor(
    '/component.video.VideoService/GetAllDepthCamera',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    video_pb.ListOfDepthCameraInfo,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    video_pb.ListOfDepthCameraInfo.deserializeBinary
  );

  getAllDepthCamera(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<video_pb.ListOfDepthCameraInfo>;

  getAllDepthCamera(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: video_pb.ListOfDepthCameraInfo) => void): grpcWeb.ClientReadableStream<video_pb.ListOfDepthCameraInfo>;

  getAllDepthCamera(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: video_pb.ListOfDepthCameraInfo) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.video.VideoService/GetAllDepthCamera',
        request,
        metadata || {},
        this.methodDescriptorGetAllDepthCamera,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.video.VideoService/GetAllDepthCamera',
    request,
    metadata || {},
    this.methodDescriptorGetAllDepthCamera);
  }

  methodDescriptorGetFrame = new grpcWeb.MethodDescriptor(
    '/component.video.VideoService/GetFrame',
    grpcWeb.MethodType.UNARY,
    component_pb.ComponentId,
    video_pb.Frame,
    (request: component_pb.ComponentId) => {
      return request.serializeBinary();
    },
    video_pb.Frame.deserializeBinary
  );

  getFrame(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null): Promise<video_pb.Frame>;

  getFrame(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: video_pb.Frame) => void): grpcWeb.ClientReadableStream<video_pb.Frame>;

  getFrame(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: video_pb.Frame) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.video.VideoService/GetFrame',
        request,
        metadata || {},
        this.methodDescriptorGetFrame,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.video.VideoService/GetFrame',
    request,
    metadata || {},
    this.methodDescriptorGetFrame);
  }

}

