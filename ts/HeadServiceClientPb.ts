/**
 * @fileoverview gRPC-Web generated client stub for reachy.part.head
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: head.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';
import * as kinematics_pb from './kinematics_pb';
import * as part_pb from './part_pb';
import * as head_pb from './head_pb';


export class HeadServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetAllHeads = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/GetAllHeads',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    head_pb.ListOfHead,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    head_pb.ListOfHead.deserializeBinary
  );

  getAllHeads(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<head_pb.ListOfHead>;

  getAllHeads(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: head_pb.ListOfHead) => void): grpcWeb.ClientReadableStream<head_pb.ListOfHead>;

  getAllHeads(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: head_pb.ListOfHead) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/GetAllHeads',
        request,
        metadata || {},
        this.methodDescriptorGetAllHeads,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/GetAllHeads',
    request,
    metadata || {},
    this.methodDescriptorGetAllHeads);
  }

  methodDescriptorComputeNeckFK = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/ComputeNeckFK',
    grpcWeb.MethodType.UNARY,
    head_pb.NeckFKRequest,
    head_pb.NeckFKSolution,
    (request: head_pb.NeckFKRequest) => {
      return request.serializeBinary();
    },
    head_pb.NeckFKSolution.deserializeBinary
  );

  computeNeckFK(
    request: head_pb.NeckFKRequest,
    metadata: grpcWeb.Metadata | null): Promise<head_pb.NeckFKSolution>;

  computeNeckFK(
    request: head_pb.NeckFKRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: head_pb.NeckFKSolution) => void): grpcWeb.ClientReadableStream<head_pb.NeckFKSolution>;

  computeNeckFK(
    request: head_pb.NeckFKRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: head_pb.NeckFKSolution) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/ComputeNeckFK',
        request,
        metadata || {},
        this.methodDescriptorComputeNeckFK,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/ComputeNeckFK',
    request,
    metadata || {},
    this.methodDescriptorComputeNeckFK);
  }

  methodDescriptorComputeNeckIK = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/ComputeNeckIK',
    grpcWeb.MethodType.UNARY,
    head_pb.NeckIKRequest,
    head_pb.NeckIKSolution,
    (request: head_pb.NeckIKRequest) => {
      return request.serializeBinary();
    },
    head_pb.NeckIKSolution.deserializeBinary
  );

  computeNeckIK(
    request: head_pb.NeckIKRequest,
    metadata: grpcWeb.Metadata | null): Promise<head_pb.NeckIKSolution>;

  computeNeckIK(
    request: head_pb.NeckIKRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: head_pb.NeckIKSolution) => void): grpcWeb.ClientReadableStream<head_pb.NeckIKSolution>;

  computeNeckIK(
    request: head_pb.NeckIKRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: head_pb.NeckIKSolution) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/ComputeNeckIK',
        request,
        metadata || {},
        this.methodDescriptorComputeNeckIK,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/ComputeNeckIK',
    request,
    metadata || {},
    this.methodDescriptorComputeNeckIK);
  }

  methodDescriptorGoToOrientation = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/GoToOrientation',
    grpcWeb.MethodType.UNARY,
    head_pb.NeckGoal,
    google_protobuf_empty_pb.Empty,
    (request: head_pb.NeckGoal) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  goToOrientation(
    request: head_pb.NeckGoal,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  goToOrientation(
    request: head_pb.NeckGoal,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  goToOrientation(
    request: head_pb.NeckGoal,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/GoToOrientation',
        request,
        metadata || {},
        this.methodDescriptorGoToOrientation,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/GoToOrientation',
    request,
    metadata || {},
    this.methodDescriptorGoToOrientation);
  }

  methodDescriptorGetOrientation = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/GetOrientation',
    grpcWeb.MethodType.UNARY,
    part_pb.PartId,
    kinematics_pb.Quaternion,
    (request: part_pb.PartId) => {
      return request.serializeBinary();
    },
    kinematics_pb.Quaternion.deserializeBinary
  );

  getOrientation(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null): Promise<kinematics_pb.Quaternion>;

  getOrientation(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: kinematics_pb.Quaternion) => void): grpcWeb.ClientReadableStream<kinematics_pb.Quaternion>;

  getOrientation(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: kinematics_pb.Quaternion) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/GetOrientation',
        request,
        metadata || {},
        this.methodDescriptorGetOrientation,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/GetOrientation',
    request,
    metadata || {},
    this.methodDescriptorGetOrientation);
  }

  methodDescriptorLookAt = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/LookAt',
    grpcWeb.MethodType.UNARY,
    head_pb.HeadTargetPoint,
    google_protobuf_empty_pb.Empty,
    (request: head_pb.HeadTargetPoint) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  lookAt(
    request: head_pb.HeadTargetPoint,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  lookAt(
    request: head_pb.HeadTargetPoint,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  lookAt(
    request: head_pb.HeadTargetPoint,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/LookAt',
        request,
        metadata || {},
        this.methodDescriptorLookAt,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/LookAt',
    request,
    metadata || {},
    this.methodDescriptorLookAt);
  }

  methodDescriptorAudit = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/Audit',
    grpcWeb.MethodType.UNARY,
    part_pb.PartId,
    head_pb.HeadStatus,
    (request: part_pb.PartId) => {
      return request.serializeBinary();
    },
    head_pb.HeadStatus.deserializeBinary
  );

  audit(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null): Promise<head_pb.HeadStatus>;

  audit(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: head_pb.HeadStatus) => void): grpcWeb.ClientReadableStream<head_pb.HeadStatus>;

  audit(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: head_pb.HeadStatus) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/Audit',
        request,
        metadata || {},
        this.methodDescriptorAudit,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/Audit',
    request,
    metadata || {},
    this.methodDescriptorAudit);
  }

  methodDescriptorHeartBeat = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/HeartBeat',
    grpcWeb.MethodType.UNARY,
    part_pb.PartId,
    google_protobuf_empty_pb.Empty,
    (request: part_pb.PartId) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  heartBeat(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  heartBeat(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  heartBeat(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/HeartBeat',
        request,
        metadata || {},
        this.methodDescriptorHeartBeat,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/HeartBeat',
    request,
    metadata || {},
    this.methodDescriptorHeartBeat);
  }

  methodDescriptorRestart = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/Restart',
    grpcWeb.MethodType.UNARY,
    part_pb.PartId,
    google_protobuf_empty_pb.Empty,
    (request: part_pb.PartId) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  restart(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  restart(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  restart(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/Restart',
        request,
        metadata || {},
        this.methodDescriptorRestart,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/Restart',
    request,
    metadata || {},
    this.methodDescriptorRestart);
  }

  methodDescriptorResetDefaultValues = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/ResetDefaultValues',
    grpcWeb.MethodType.UNARY,
    part_pb.PartId,
    google_protobuf_empty_pb.Empty,
    (request: part_pb.PartId) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  resetDefaultValues(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  resetDefaultValues(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  resetDefaultValues(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/ResetDefaultValues',
        request,
        metadata || {},
        this.methodDescriptorResetDefaultValues,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/ResetDefaultValues',
    request,
    metadata || {},
    this.methodDescriptorResetDefaultValues);
  }

  methodDescriptorTurnOn = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/TurnOn',
    grpcWeb.MethodType.UNARY,
    part_pb.PartId,
    google_protobuf_empty_pb.Empty,
    (request: part_pb.PartId) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  turnOn(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  turnOn(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  turnOn(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/TurnOn',
        request,
        metadata || {},
        this.methodDescriptorTurnOn,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/TurnOn',
    request,
    metadata || {},
    this.methodDescriptorTurnOn);
  }

  methodDescriptorTurnOff = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/TurnOff',
    grpcWeb.MethodType.UNARY,
    part_pb.PartId,
    google_protobuf_empty_pb.Empty,
    (request: part_pb.PartId) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  turnOff(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  turnOff(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  turnOff(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/TurnOff',
        request,
        metadata || {},
        this.methodDescriptorTurnOff,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/TurnOff',
    request,
    metadata || {},
    this.methodDescriptorTurnOff);
  }

  methodDescriptorGetJointsLimits = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/GetJointsLimits',
    grpcWeb.MethodType.UNARY,
    part_pb.PartId,
    head_pb.JointsLimits,
    (request: part_pb.PartId) => {
      return request.serializeBinary();
    },
    head_pb.JointsLimits.deserializeBinary
  );

  getJointsLimits(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null): Promise<head_pb.JointsLimits>;

  getJointsLimits(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: head_pb.JointsLimits) => void): grpcWeb.ClientReadableStream<head_pb.JointsLimits>;

  getJointsLimits(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: head_pb.JointsLimits) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/GetJointsLimits',
        request,
        metadata || {},
        this.methodDescriptorGetJointsLimits,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/GetJointsLimits',
    request,
    metadata || {},
    this.methodDescriptorGetJointsLimits);
  }

  methodDescriptorGetTemperatures = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/GetTemperatures',
    grpcWeb.MethodType.UNARY,
    part_pb.PartId,
    head_pb.ArmTemperatures,
    (request: part_pb.PartId) => {
      return request.serializeBinary();
    },
    head_pb.ArmTemperatures.deserializeBinary
  );

  getTemperatures(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null): Promise<head_pb.ArmTemperatures>;

  getTemperatures(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: head_pb.ArmTemperatures) => void): grpcWeb.ClientReadableStream<head_pb.ArmTemperatures>;

  getTemperatures(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: head_pb.ArmTemperatures) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/GetTemperatures',
        request,
        metadata || {},
        this.methodDescriptorGetTemperatures,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/GetTemperatures',
    request,
    metadata || {},
    this.methodDescriptorGetTemperatures);
  }

  methodDescriptorGetJointGoalPosition = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/GetJointGoalPosition',
    grpcWeb.MethodType.UNARY,
    part_pb.PartId,
    head_pb.NeckPosition,
    (request: part_pb.PartId) => {
      return request.serializeBinary();
    },
    head_pb.NeckPosition.deserializeBinary
  );

  getJointGoalPosition(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null): Promise<head_pb.NeckPosition>;

  getJointGoalPosition(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: head_pb.NeckPosition) => void): grpcWeb.ClientReadableStream<head_pb.NeckPosition>;

  getJointGoalPosition(
    request: part_pb.PartId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: head_pb.NeckPosition) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/GetJointGoalPosition',
        request,
        metadata || {},
        this.methodDescriptorGetJointGoalPosition,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/GetJointGoalPosition',
    request,
    metadata || {},
    this.methodDescriptorGetJointGoalPosition);
  }

  methodDescriptorSetSpeedLimit = new grpcWeb.MethodDescriptor(
    '/reachy.part.head.HeadService/SetSpeedLimit',
    grpcWeb.MethodType.UNARY,
    head_pb.SpeedLimitRequest,
    google_protobuf_empty_pb.Empty,
    (request: head_pb.SpeedLimitRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  setSpeedLimit(
    request: head_pb.SpeedLimitRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  setSpeedLimit(
    request: head_pb.SpeedLimitRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  setSpeedLimit(
    request: head_pb.SpeedLimitRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/reachy.part.head.HeadService/SetSpeedLimit',
        request,
        metadata || {},
        this.methodDescriptorSetSpeedLimit,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/reachy.part.head.HeadService/SetSpeedLimit',
    request,
    metadata || {},
    this.methodDescriptorSetSpeedLimit);
  }

}

