/**
 * @fileoverview gRPC-Web generated client stub for component.parallel_gripper
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: parallel_gripper.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as component_pb from './component_pb';
import * as parallel_gripper_pb from './parallel_gripper_pb';
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';


export class GripperServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetAllParallelGripper = new grpcWeb.MethodDescriptor(
    '/component.parallel_gripper.GripperService/GetAllParallelGripper',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    parallel_gripper_pb.ListOfParallelGripperInfo,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    parallel_gripper_pb.ListOfParallelGripperInfo.deserializeBinary
  );

  getAllParallelGripper(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<parallel_gripper_pb.ListOfParallelGripperInfo>;

  getAllParallelGripper(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: parallel_gripper_pb.ListOfParallelGripperInfo) => void): grpcWeb.ClientReadableStream<parallel_gripper_pb.ListOfParallelGripperInfo>;

  getAllParallelGripper(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: parallel_gripper_pb.ListOfParallelGripperInfo) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.parallel_gripper.GripperService/GetAllParallelGripper',
        request,
        metadata || {},
        this.methodDescriptorGetAllParallelGripper,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.parallel_gripper.GripperService/GetAllParallelGripper',
    request,
    metadata || {},
    this.methodDescriptorGetAllParallelGripper);
  }

  methodDescriptorGetState = new grpcWeb.MethodDescriptor(
    '/component.parallel_gripper.GripperService/GetState',
    grpcWeb.MethodType.UNARY,
    parallel_gripper_pb.ParallelGripperStateRequest,
    parallel_gripper_pb.ParallelGripperState,
    (request: parallel_gripper_pb.ParallelGripperStateRequest) => {
      return request.serializeBinary();
    },
    parallel_gripper_pb.ParallelGripperState.deserializeBinary
  );

  getState(
    request: parallel_gripper_pb.ParallelGripperStateRequest,
    metadata: grpcWeb.Metadata | null): Promise<parallel_gripper_pb.ParallelGripperState>;

  getState(
    request: parallel_gripper_pb.ParallelGripperStateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: parallel_gripper_pb.ParallelGripperState) => void): grpcWeb.ClientReadableStream<parallel_gripper_pb.ParallelGripperState>;

  getState(
    request: parallel_gripper_pb.ParallelGripperStateRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: parallel_gripper_pb.ParallelGripperState) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.parallel_gripper.GripperService/GetState',
        request,
        metadata || {},
        this.methodDescriptorGetState,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.parallel_gripper.GripperService/GetState',
    request,
    metadata || {},
    this.methodDescriptorGetState);
  }

  methodDescriptorStreamState = new grpcWeb.MethodDescriptor(
    '/component.parallel_gripper.GripperService/StreamState',
    grpcWeb.MethodType.SERVER_STREAMING,
    parallel_gripper_pb.ParallelGripperStreamStateRequest,
    parallel_gripper_pb.ParallelGripperState,
    (request: parallel_gripper_pb.ParallelGripperStreamStateRequest) => {
      return request.serializeBinary();
    },
    parallel_gripper_pb.ParallelGripperState.deserializeBinary
  );

  streamState(
    request: parallel_gripper_pb.ParallelGripperStreamStateRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<parallel_gripper_pb.ParallelGripperState> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/component.parallel_gripper.GripperService/StreamState',
      request,
      metadata || {},
      this.methodDescriptorStreamState);
  }

  methodDescriptorSendCommand = new grpcWeb.MethodDescriptor(
    '/component.parallel_gripper.GripperService/SendCommand',
    grpcWeb.MethodType.UNARY,
    parallel_gripper_pb.ParallelGripperCommand,
    google_protobuf_empty_pb.Empty,
    (request: parallel_gripper_pb.ParallelGripperCommand) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  sendCommand(
    request: parallel_gripper_pb.ParallelGripperCommand,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  sendCommand(
    request: parallel_gripper_pb.ParallelGripperCommand,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  sendCommand(
    request: parallel_gripper_pb.ParallelGripperCommand,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.parallel_gripper.GripperService/SendCommand',
        request,
        metadata || {},
        this.methodDescriptorSendCommand,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.parallel_gripper.GripperService/SendCommand',
    request,
    metadata || {},
    this.methodDescriptorSendCommand);
  }

  methodDescriptorAudit = new grpcWeb.MethodDescriptor(
    '/component.parallel_gripper.GripperService/Audit',
    grpcWeb.MethodType.UNARY,
    component_pb.ComponentId,
    parallel_gripper_pb.ParallelGripperStatus,
    (request: component_pb.ComponentId) => {
      return request.serializeBinary();
    },
    parallel_gripper_pb.ParallelGripperStatus.deserializeBinary
  );

  audit(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null): Promise<parallel_gripper_pb.ParallelGripperStatus>;

  audit(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: parallel_gripper_pb.ParallelGripperStatus) => void): grpcWeb.ClientReadableStream<parallel_gripper_pb.ParallelGripperStatus>;

  audit(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: parallel_gripper_pb.ParallelGripperStatus) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.parallel_gripper.GripperService/Audit',
        request,
        metadata || {},
        this.methodDescriptorAudit,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.parallel_gripper.GripperService/Audit',
    request,
    metadata || {},
    this.methodDescriptorAudit);
  }

  methodDescriptorHeartBeat = new grpcWeb.MethodDescriptor(
    '/component.parallel_gripper.GripperService/HeartBeat',
    grpcWeb.MethodType.UNARY,
    component_pb.ComponentId,
    google_protobuf_empty_pb.Empty,
    (request: component_pb.ComponentId) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  heartBeat(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  heartBeat(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  heartBeat(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.parallel_gripper.GripperService/HeartBeat',
        request,
        metadata || {},
        this.methodDescriptorHeartBeat,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.parallel_gripper.GripperService/HeartBeat',
    request,
    metadata || {},
    this.methodDescriptorHeartBeat);
  }

  methodDescriptorRestart = new grpcWeb.MethodDescriptor(
    '/component.parallel_gripper.GripperService/Restart',
    grpcWeb.MethodType.UNARY,
    component_pb.ComponentId,
    google_protobuf_empty_pb.Empty,
    (request: component_pb.ComponentId) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  restart(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  restart(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  restart(
    request: component_pb.ComponentId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/component.parallel_gripper.GripperService/Restart',
        request,
        metadata || {},
        this.methodDescriptorRestart,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/component.parallel_gripper.GripperService/Restart',
    request,
    metadata || {},
    this.methodDescriptorRestart);
  }

}

