// source: parallel_gripper.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var component_pb = require('./component_pb.js');
goog.object.extend(proto, component_pb);
goog.exportSymbol('proto.component.parallel_gripper.ListOfParallelGripperInfo', null, global);
goog.exportSymbol('proto.component.parallel_gripper.ParallelGripperCommand', null, global);
goog.exportSymbol('proto.component.parallel_gripper.ParallelGripperField', null, global);
goog.exportSymbol('proto.component.parallel_gripper.ParallelGripperInfo', null, global);
goog.exportSymbol('proto.component.parallel_gripper.ParallelGripperState', null, global);
goog.exportSymbol('proto.component.parallel_gripper.ParallelGripperStateRequest', null, global);
goog.exportSymbol('proto.component.parallel_gripper.ParallelGripperStatus', null, global);
goog.exportSymbol('proto.component.parallel_gripper.ParallelGripperStreamStateRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.parallel_gripper.ParallelGripperState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.parallel_gripper.ParallelGripperState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.parallel_gripper.ParallelGripperState.displayName = 'proto.component.parallel_gripper.ParallelGripperState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.parallel_gripper.ParallelGripperStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.component.parallel_gripper.ParallelGripperStateRequest.repeatedFields_, null);
};
goog.inherits(proto.component.parallel_gripper.ParallelGripperStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.parallel_gripper.ParallelGripperStateRequest.displayName = 'proto.component.parallel_gripper.ParallelGripperStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.parallel_gripper.ParallelGripperStreamStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.parallel_gripper.ParallelGripperStreamStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.parallel_gripper.ParallelGripperStreamStateRequest.displayName = 'proto.component.parallel_gripper.ParallelGripperStreamStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.parallel_gripper.ParallelGripperCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.parallel_gripper.ParallelGripperCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.parallel_gripper.ParallelGripperCommand.displayName = 'proto.component.parallel_gripper.ParallelGripperCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.parallel_gripper.ParallelGripperInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.parallel_gripper.ParallelGripperInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.parallel_gripper.ParallelGripperInfo.displayName = 'proto.component.parallel_gripper.ParallelGripperInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.parallel_gripper.ListOfParallelGripperInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.component.parallel_gripper.ListOfParallelGripperInfo.repeatedFields_, null);
};
goog.inherits(proto.component.parallel_gripper.ListOfParallelGripperInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.parallel_gripper.ListOfParallelGripperInfo.displayName = 'proto.component.parallel_gripper.ListOfParallelGripperInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.parallel_gripper.ParallelGripperStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.parallel_gripper.ParallelGripperStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.parallel_gripper.ParallelGripperStatus.displayName = 'proto.component.parallel_gripper.ParallelGripperStatus';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.parallel_gripper.ParallelGripperState.prototype.toObject = function(opt_includeInstance) {
  return proto.component.parallel_gripper.ParallelGripperState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.parallel_gripper.ParallelGripperState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.parallel_gripper.ParallelGripperState.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.parallel_gripper.ParallelGripperState}
 */
proto.component.parallel_gripper.ParallelGripperState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.parallel_gripper.ParallelGripperState;
  return proto.component.parallel_gripper.ParallelGripperState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.parallel_gripper.ParallelGripperState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.parallel_gripper.ParallelGripperState}
 */
proto.component.parallel_gripper.ParallelGripperState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 15:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.parallel_gripper.ParallelGripperState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.parallel_gripper.ParallelGripperState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.parallel_gripper.ParallelGripperState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.parallel_gripper.ParallelGripperState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp timestamp = 15;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.component.parallel_gripper.ParallelGripperState.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 15));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.component.parallel_gripper.ParallelGripperState} returns this
*/
proto.component.parallel_gripper.ParallelGripperState.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.component.parallel_gripper.ParallelGripperState} returns this
 */
proto.component.parallel_gripper.ParallelGripperState.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.component.parallel_gripper.ParallelGripperState.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.component.parallel_gripper.ParallelGripperStateRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.parallel_gripper.ParallelGripperStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.component.parallel_gripper.ParallelGripperStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.parallel_gripper.ParallelGripperStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.parallel_gripper.ParallelGripperStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    id: (f = msg.getId()) && component_pb.ComponentId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.parallel_gripper.ParallelGripperStateRequest}
 */
proto.component.parallel_gripper.ParallelGripperStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.parallel_gripper.ParallelGripperStateRequest;
  return proto.component.parallel_gripper.ParallelGripperStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.parallel_gripper.ParallelGripperStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.parallel_gripper.ParallelGripperStateRequest}
 */
proto.component.parallel_gripper.ParallelGripperStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<!proto.component.parallel_gripper.ParallelGripperField>} */ (reader.readPackedEnum());
      msg.setFieldsList(value);
      break;
    case 2:
      var value = new component_pb.ComponentId;
      reader.readMessage(value,component_pb.ComponentId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.parallel_gripper.ParallelGripperStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.parallel_gripper.ParallelGripperStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.parallel_gripper.ParallelGripperStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.parallel_gripper.ParallelGripperStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      component_pb.ComponentId.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ParallelGripperField fields = 1;
 * @return {!Array<!proto.component.parallel_gripper.ParallelGripperField>}
 */
proto.component.parallel_gripper.ParallelGripperStateRequest.prototype.getFieldsList = function() {
  return /** @type {!Array<!proto.component.parallel_gripper.ParallelGripperField>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.component.parallel_gripper.ParallelGripperField>} value
 * @return {!proto.component.parallel_gripper.ParallelGripperStateRequest} returns this
 */
proto.component.parallel_gripper.ParallelGripperStateRequest.prototype.setFieldsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.component.parallel_gripper.ParallelGripperField} value
 * @param {number=} opt_index
 * @return {!proto.component.parallel_gripper.ParallelGripperStateRequest} returns this
 */
proto.component.parallel_gripper.ParallelGripperStateRequest.prototype.addFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.component.parallel_gripper.ParallelGripperStateRequest} returns this
 */
proto.component.parallel_gripper.ParallelGripperStateRequest.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};


/**
 * optional component.ComponentId id = 2;
 * @return {?proto.component.ComponentId}
 */
proto.component.parallel_gripper.ParallelGripperStateRequest.prototype.getId = function() {
  return /** @type{?proto.component.ComponentId} */ (
    jspb.Message.getWrapperField(this, component_pb.ComponentId, 2));
};


/**
 * @param {?proto.component.ComponentId|undefined} value
 * @return {!proto.component.parallel_gripper.ParallelGripperStateRequest} returns this
*/
proto.component.parallel_gripper.ParallelGripperStateRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.component.parallel_gripper.ParallelGripperStateRequest} returns this
 */
proto.component.parallel_gripper.ParallelGripperStateRequest.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.component.parallel_gripper.ParallelGripperStateRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.parallel_gripper.ParallelGripperStreamStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.component.parallel_gripper.ParallelGripperStreamStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.parallel_gripper.ParallelGripperStreamStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.parallel_gripper.ParallelGripperStreamStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    req: (f = msg.getReq()) && proto.component.parallel_gripper.ParallelGripperStateRequest.toObject(includeInstance, f),
    freq: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.parallel_gripper.ParallelGripperStreamStateRequest}
 */
proto.component.parallel_gripper.ParallelGripperStreamStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.parallel_gripper.ParallelGripperStreamStateRequest;
  return proto.component.parallel_gripper.ParallelGripperStreamStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.parallel_gripper.ParallelGripperStreamStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.parallel_gripper.ParallelGripperStreamStateRequest}
 */
proto.component.parallel_gripper.ParallelGripperStreamStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.component.parallel_gripper.ParallelGripperStateRequest;
      reader.readMessage(value,proto.component.parallel_gripper.ParallelGripperStateRequest.deserializeBinaryFromReader);
      msg.setReq(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFreq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.parallel_gripper.ParallelGripperStreamStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.parallel_gripper.ParallelGripperStreamStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.parallel_gripper.ParallelGripperStreamStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.parallel_gripper.ParallelGripperStreamStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReq();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.component.parallel_gripper.ParallelGripperStateRequest.serializeBinaryToWriter
    );
  }
  f = message.getFreq();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional ParallelGripperStateRequest req = 1;
 * @return {?proto.component.parallel_gripper.ParallelGripperStateRequest}
 */
proto.component.parallel_gripper.ParallelGripperStreamStateRequest.prototype.getReq = function() {
  return /** @type{?proto.component.parallel_gripper.ParallelGripperStateRequest} */ (
    jspb.Message.getWrapperField(this, proto.component.parallel_gripper.ParallelGripperStateRequest, 1));
};


/**
 * @param {?proto.component.parallel_gripper.ParallelGripperStateRequest|undefined} value
 * @return {!proto.component.parallel_gripper.ParallelGripperStreamStateRequest} returns this
*/
proto.component.parallel_gripper.ParallelGripperStreamStateRequest.prototype.setReq = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.component.parallel_gripper.ParallelGripperStreamStateRequest} returns this
 */
proto.component.parallel_gripper.ParallelGripperStreamStateRequest.prototype.clearReq = function() {
  return this.setReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.component.parallel_gripper.ParallelGripperStreamStateRequest.prototype.hasReq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float freq = 2;
 * @return {number}
 */
proto.component.parallel_gripper.ParallelGripperStreamStateRequest.prototype.getFreq = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.component.parallel_gripper.ParallelGripperStreamStateRequest} returns this
 */
proto.component.parallel_gripper.ParallelGripperStreamStateRequest.prototype.setFreq = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.parallel_gripper.ParallelGripperCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.component.parallel_gripper.ParallelGripperCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.parallel_gripper.ParallelGripperCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.parallel_gripper.ParallelGripperCommand.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.parallel_gripper.ParallelGripperCommand}
 */
proto.component.parallel_gripper.ParallelGripperCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.parallel_gripper.ParallelGripperCommand;
  return proto.component.parallel_gripper.ParallelGripperCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.parallel_gripper.ParallelGripperCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.parallel_gripper.ParallelGripperCommand}
 */
proto.component.parallel_gripper.ParallelGripperCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.parallel_gripper.ParallelGripperCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.parallel_gripper.ParallelGripperCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.parallel_gripper.ParallelGripperCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.parallel_gripper.ParallelGripperCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.parallel_gripper.ParallelGripperInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.component.parallel_gripper.ParallelGripperInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.parallel_gripper.ParallelGripperInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.parallel_gripper.ParallelGripperInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && component_pb.ComponentId.toObject(includeInstance, f),
    serialNumber: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.parallel_gripper.ParallelGripperInfo}
 */
proto.component.parallel_gripper.ParallelGripperInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.parallel_gripper.ParallelGripperInfo;
  return proto.component.parallel_gripper.ParallelGripperInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.parallel_gripper.ParallelGripperInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.parallel_gripper.ParallelGripperInfo}
 */
proto.component.parallel_gripper.ParallelGripperInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new component_pb.ComponentId;
      reader.readMessage(value,component_pb.ComponentId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerialNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.parallel_gripper.ParallelGripperInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.parallel_gripper.ParallelGripperInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.parallel_gripper.ParallelGripperInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.parallel_gripper.ParallelGripperInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      component_pb.ComponentId.serializeBinaryToWriter
    );
  }
  f = message.getSerialNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional component.ComponentId id = 1;
 * @return {?proto.component.ComponentId}
 */
proto.component.parallel_gripper.ParallelGripperInfo.prototype.getId = function() {
  return /** @type{?proto.component.ComponentId} */ (
    jspb.Message.getWrapperField(this, component_pb.ComponentId, 1));
};


/**
 * @param {?proto.component.ComponentId|undefined} value
 * @return {!proto.component.parallel_gripper.ParallelGripperInfo} returns this
*/
proto.component.parallel_gripper.ParallelGripperInfo.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.component.parallel_gripper.ParallelGripperInfo} returns this
 */
proto.component.parallel_gripper.ParallelGripperInfo.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.component.parallel_gripper.ParallelGripperInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string serial_number = 2;
 * @return {string}
 */
proto.component.parallel_gripper.ParallelGripperInfo.prototype.getSerialNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.component.parallel_gripper.ParallelGripperInfo} returns this
 */
proto.component.parallel_gripper.ParallelGripperInfo.prototype.setSerialNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.component.parallel_gripper.ListOfParallelGripperInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.parallel_gripper.ListOfParallelGripperInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.component.parallel_gripper.ListOfParallelGripperInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.parallel_gripper.ListOfParallelGripperInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.parallel_gripper.ListOfParallelGripperInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    parallelGripperInfoList: jspb.Message.toObjectList(msg.getParallelGripperInfoList(),
    proto.component.parallel_gripper.ParallelGripperInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.parallel_gripper.ListOfParallelGripperInfo}
 */
proto.component.parallel_gripper.ListOfParallelGripperInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.parallel_gripper.ListOfParallelGripperInfo;
  return proto.component.parallel_gripper.ListOfParallelGripperInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.parallel_gripper.ListOfParallelGripperInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.parallel_gripper.ListOfParallelGripperInfo}
 */
proto.component.parallel_gripper.ListOfParallelGripperInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.component.parallel_gripper.ParallelGripperInfo;
      reader.readMessage(value,proto.component.parallel_gripper.ParallelGripperInfo.deserializeBinaryFromReader);
      msg.addParallelGripperInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.parallel_gripper.ListOfParallelGripperInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.parallel_gripper.ListOfParallelGripperInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.parallel_gripper.ListOfParallelGripperInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.parallel_gripper.ListOfParallelGripperInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParallelGripperInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.component.parallel_gripper.ParallelGripperInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ParallelGripperInfo parallel_gripper_info = 1;
 * @return {!Array<!proto.component.parallel_gripper.ParallelGripperInfo>}
 */
proto.component.parallel_gripper.ListOfParallelGripperInfo.prototype.getParallelGripperInfoList = function() {
  return /** @type{!Array<!proto.component.parallel_gripper.ParallelGripperInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.component.parallel_gripper.ParallelGripperInfo, 1));
};


/**
 * @param {!Array<!proto.component.parallel_gripper.ParallelGripperInfo>} value
 * @return {!proto.component.parallel_gripper.ListOfParallelGripperInfo} returns this
*/
proto.component.parallel_gripper.ListOfParallelGripperInfo.prototype.setParallelGripperInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.component.parallel_gripper.ParallelGripperInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.component.parallel_gripper.ParallelGripperInfo}
 */
proto.component.parallel_gripper.ListOfParallelGripperInfo.prototype.addParallelGripperInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.component.parallel_gripper.ParallelGripperInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.component.parallel_gripper.ListOfParallelGripperInfo} returns this
 */
proto.component.parallel_gripper.ListOfParallelGripperInfo.prototype.clearParallelGripperInfoList = function() {
  return this.setParallelGripperInfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.parallel_gripper.ParallelGripperStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.component.parallel_gripper.ParallelGripperStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.parallel_gripper.ParallelGripperStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.parallel_gripper.ParallelGripperStatus.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.parallel_gripper.ParallelGripperStatus}
 */
proto.component.parallel_gripper.ParallelGripperStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.parallel_gripper.ParallelGripperStatus;
  return proto.component.parallel_gripper.ParallelGripperStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.parallel_gripper.ParallelGripperStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.parallel_gripper.ParallelGripperStatus}
 */
proto.component.parallel_gripper.ParallelGripperStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.parallel_gripper.ParallelGripperStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.parallel_gripper.ParallelGripperStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.parallel_gripper.ParallelGripperStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.parallel_gripper.ParallelGripperStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.component.parallel_gripper.ParallelGripperField = {
  NONE: 0,
  NAME: 1,
  ID: 2,
  PRESENT_POSITION: 3,
  PRESENT_SPEED: 4,
  PRESENT_LOAD: 5,
  TEMPERATURE: 6,
  FORCE_SENSOR: 7,
  COMPLIANT: 8,
  GOAL_POSITION: 9,
  SPEED_LIMIT: 10,
  TORQUE_LIMIT: 11,
  PID: 12,
  ALL: 15
};

goog.object.extend(exports, proto.component.parallel_gripper);
