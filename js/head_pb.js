// source: head.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var part_pb = require('./part_pb.js');
goog.object.extend(proto, part_pb);
var kinematics_pb = require('./kinematics_pb.js');
goog.object.extend(proto, kinematics_pb);
var error_pb = require('./error_pb.js');
goog.object.extend(proto, error_pb);
var component_pb = require('./component_pb.js');
goog.object.extend(proto, component_pb);
var orbita3d_pb = require('./orbita3d_pb.js');
goog.object.extend(proto, orbita3d_pb);
var dynamixel_motor_pb = require('./dynamixel_motor_pb.js');
goog.object.extend(proto, dynamixel_motor_pb);
goog.exportSymbol('proto.reachy.part.head.Head', null, global);
goog.exportSymbol('proto.reachy.part.head.HeadDescription', null, global);
goog.exportSymbol('proto.reachy.part.head.HeadField', null, global);
goog.exportSymbol('proto.reachy.part.head.HeadLookAtGoal', null, global);
goog.exportSymbol('proto.reachy.part.head.HeadPosition', null, global);
goog.exportSymbol('proto.reachy.part.head.HeadState', null, global);
goog.exportSymbol('proto.reachy.part.head.HeadStatus', null, global);
goog.exportSymbol('proto.reachy.part.head.HeadTemperatures', null, global);
goog.exportSymbol('proto.reachy.part.head.JointsLimits', null, global);
goog.exportSymbol('proto.reachy.part.head.ListOfHead', null, global);
goog.exportSymbol('proto.reachy.part.head.NeckFKRequest', null, global);
goog.exportSymbol('proto.reachy.part.head.NeckFKSolution', null, global);
goog.exportSymbol('proto.reachy.part.head.NeckGoal', null, global);
goog.exportSymbol('proto.reachy.part.head.NeckIKRequest', null, global);
goog.exportSymbol('proto.reachy.part.head.NeckIKSolution', null, global);
goog.exportSymbol('proto.reachy.part.head.NeckOrientation', null, global);
goog.exportSymbol('proto.reachy.part.head.SpeedLimit', null, global);
goog.exportSymbol('proto.reachy.part.head.SpeedLimitRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.Head = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.Head, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.Head.displayName = 'proto.reachy.part.head.Head';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.HeadDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.HeadDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.HeadDescription.displayName = 'proto.reachy.part.head.HeadDescription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.ListOfHead = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.reachy.part.head.ListOfHead.repeatedFields_, null);
};
goog.inherits(proto.reachy.part.head.ListOfHead, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.ListOfHead.displayName = 'proto.reachy.part.head.ListOfHead';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.HeadState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.HeadState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.HeadState.displayName = 'proto.reachy.part.head.HeadState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.HeadPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.HeadPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.HeadPosition.displayName = 'proto.reachy.part.head.HeadPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.NeckGoal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.NeckGoal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.NeckGoal.displayName = 'proto.reachy.part.head.NeckGoal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.NeckOrientation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.NeckOrientation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.NeckOrientation.displayName = 'proto.reachy.part.head.NeckOrientation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.NeckFKRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.NeckFKRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.NeckFKRequest.displayName = 'proto.reachy.part.head.NeckFKRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.NeckFKSolution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.NeckFKSolution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.NeckFKSolution.displayName = 'proto.reachy.part.head.NeckFKSolution';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.NeckIKRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.NeckIKRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.NeckIKRequest.displayName = 'proto.reachy.part.head.NeckIKRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.NeckIKSolution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.NeckIKSolution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.NeckIKSolution.displayName = 'proto.reachy.part.head.NeckIKSolution';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.HeadStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.HeadStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.HeadStatus.displayName = 'proto.reachy.part.head.HeadStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.HeadLookAtGoal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.HeadLookAtGoal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.HeadLookAtGoal.displayName = 'proto.reachy.part.head.HeadLookAtGoal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.SpeedLimitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.SpeedLimitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.SpeedLimitRequest.displayName = 'proto.reachy.part.head.SpeedLimitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.JointsLimits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.JointsLimits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.JointsLimits.displayName = 'proto.reachy.part.head.JointsLimits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.HeadTemperatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.HeadTemperatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.HeadTemperatures.displayName = 'proto.reachy.part.head.HeadTemperatures';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.Head.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.Head.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.Head} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.Head.toObject = function(includeInstance, msg) {
  var f, obj = {
    partId: (f = msg.getPartId()) && part_pb.PartId.toObject(includeInstance, f),
    description: (f = msg.getDescription()) && proto.reachy.part.head.HeadDescription.toObject(includeInstance, f),
    info: (f = msg.getInfo()) && part_pb.PartInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.Head}
 */
proto.reachy.part.head.Head.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.Head;
  return proto.reachy.part.head.Head.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.Head} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.Head}
 */
proto.reachy.part.head.Head.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new part_pb.PartId;
      reader.readMessage(value,part_pb.PartId.deserializeBinaryFromReader);
      msg.setPartId(value);
      break;
    case 2:
      var value = new proto.reachy.part.head.HeadDescription;
      reader.readMessage(value,proto.reachy.part.head.HeadDescription.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    case 5:
      var value = new part_pb.PartInfo;
      reader.readMessage(value,part_pb.PartInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.Head.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.Head.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.Head} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.Head.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      part_pb.PartId.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.reachy.part.head.HeadDescription.serializeBinaryToWriter
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      part_pb.PartInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional reachy.part.PartId part_id = 1;
 * @return {?proto.reachy.part.PartId}
 */
proto.reachy.part.head.Head.prototype.getPartId = function() {
  return /** @type{?proto.reachy.part.PartId} */ (
    jspb.Message.getWrapperField(this, part_pb.PartId, 1));
};


/**
 * @param {?proto.reachy.part.PartId|undefined} value
 * @return {!proto.reachy.part.head.Head} returns this
*/
proto.reachy.part.head.Head.prototype.setPartId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.Head} returns this
 */
proto.reachy.part.head.Head.prototype.clearPartId = function() {
  return this.setPartId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.Head.prototype.hasPartId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HeadDescription description = 2;
 * @return {?proto.reachy.part.head.HeadDescription}
 */
proto.reachy.part.head.Head.prototype.getDescription = function() {
  return /** @type{?proto.reachy.part.head.HeadDescription} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.HeadDescription, 2));
};


/**
 * @param {?proto.reachy.part.head.HeadDescription|undefined} value
 * @return {!proto.reachy.part.head.Head} returns this
*/
proto.reachy.part.head.Head.prototype.setDescription = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.Head} returns this
 */
proto.reachy.part.head.Head.prototype.clearDescription = function() {
  return this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.Head.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional reachy.part.PartInfo info = 5;
 * @return {?proto.reachy.part.PartInfo}
 */
proto.reachy.part.head.Head.prototype.getInfo = function() {
  return /** @type{?proto.reachy.part.PartInfo} */ (
    jspb.Message.getWrapperField(this, part_pb.PartInfo, 5));
};


/**
 * @param {?proto.reachy.part.PartInfo|undefined} value
 * @return {!proto.reachy.part.head.Head} returns this
*/
proto.reachy.part.head.Head.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.Head} returns this
 */
proto.reachy.part.head.Head.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.Head.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.HeadDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.HeadDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.HeadDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    neck: (f = msg.getNeck()) && orbita3d_pb.Orbita3D.toObject(includeInstance, f),
    lAntenna: (f = msg.getLAntenna()) && dynamixel_motor_pb.DynamixelMotor.toObject(includeInstance, f),
    rAntenna: (f = msg.getRAntenna()) && dynamixel_motor_pb.DynamixelMotor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.HeadDescription}
 */
proto.reachy.part.head.HeadDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.HeadDescription;
  return proto.reachy.part.head.HeadDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.HeadDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.HeadDescription}
 */
proto.reachy.part.head.HeadDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new orbita3d_pb.Orbita3D;
      reader.readMessage(value,orbita3d_pb.Orbita3D.deserializeBinaryFromReader);
      msg.setNeck(value);
      break;
    case 2:
      var value = new dynamixel_motor_pb.DynamixelMotor;
      reader.readMessage(value,dynamixel_motor_pb.DynamixelMotor.deserializeBinaryFromReader);
      msg.setLAntenna(value);
      break;
    case 3:
      var value = new dynamixel_motor_pb.DynamixelMotor;
      reader.readMessage(value,dynamixel_motor_pb.DynamixelMotor.deserializeBinaryFromReader);
      msg.setRAntenna(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.HeadDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.HeadDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.HeadDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNeck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      orbita3d_pb.Orbita3D.serializeBinaryToWriter
    );
  }
  f = message.getLAntenna();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      dynamixel_motor_pb.DynamixelMotor.serializeBinaryToWriter
    );
  }
  f = message.getRAntenna();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      dynamixel_motor_pb.DynamixelMotor.serializeBinaryToWriter
    );
  }
};


/**
 * optional component.orbita3d.Orbita3D neck = 1;
 * @return {?proto.component.orbita3d.Orbita3D}
 */
proto.reachy.part.head.HeadDescription.prototype.getNeck = function() {
  return /** @type{?proto.component.orbita3d.Orbita3D} */ (
    jspb.Message.getWrapperField(this, orbita3d_pb.Orbita3D, 1));
};


/**
 * @param {?proto.component.orbita3d.Orbita3D|undefined} value
 * @return {!proto.reachy.part.head.HeadDescription} returns this
*/
proto.reachy.part.head.HeadDescription.prototype.setNeck = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadDescription} returns this
 */
proto.reachy.part.head.HeadDescription.prototype.clearNeck = function() {
  return this.setNeck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadDescription.prototype.hasNeck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional component.dynamixel_motor.DynamixelMotor l_antenna = 2;
 * @return {?proto.component.dynamixel_motor.DynamixelMotor}
 */
proto.reachy.part.head.HeadDescription.prototype.getLAntenna = function() {
  return /** @type{?proto.component.dynamixel_motor.DynamixelMotor} */ (
    jspb.Message.getWrapperField(this, dynamixel_motor_pb.DynamixelMotor, 2));
};


/**
 * @param {?proto.component.dynamixel_motor.DynamixelMotor|undefined} value
 * @return {!proto.reachy.part.head.HeadDescription} returns this
*/
proto.reachy.part.head.HeadDescription.prototype.setLAntenna = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadDescription} returns this
 */
proto.reachy.part.head.HeadDescription.prototype.clearLAntenna = function() {
  return this.setLAntenna(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadDescription.prototype.hasLAntenna = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional component.dynamixel_motor.DynamixelMotor r_antenna = 3;
 * @return {?proto.component.dynamixel_motor.DynamixelMotor}
 */
proto.reachy.part.head.HeadDescription.prototype.getRAntenna = function() {
  return /** @type{?proto.component.dynamixel_motor.DynamixelMotor} */ (
    jspb.Message.getWrapperField(this, dynamixel_motor_pb.DynamixelMotor, 3));
};


/**
 * @param {?proto.component.dynamixel_motor.DynamixelMotor|undefined} value
 * @return {!proto.reachy.part.head.HeadDescription} returns this
*/
proto.reachy.part.head.HeadDescription.prototype.setRAntenna = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadDescription} returns this
 */
proto.reachy.part.head.HeadDescription.prototype.clearRAntenna = function() {
  return this.setRAntenna(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadDescription.prototype.hasRAntenna = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.reachy.part.head.ListOfHead.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.ListOfHead.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.ListOfHead.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.ListOfHead} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.ListOfHead.toObject = function(includeInstance, msg) {
  var f, obj = {
    headList: jspb.Message.toObjectList(msg.getHeadList(),
    proto.reachy.part.head.Head.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.ListOfHead}
 */
proto.reachy.part.head.ListOfHead.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.ListOfHead;
  return proto.reachy.part.head.ListOfHead.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.ListOfHead} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.ListOfHead}
 */
proto.reachy.part.head.ListOfHead.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reachy.part.head.Head;
      reader.readMessage(value,proto.reachy.part.head.Head.deserializeBinaryFromReader);
      msg.addHead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.ListOfHead.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.ListOfHead.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.ListOfHead} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.ListOfHead.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.reachy.part.head.Head.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Head head = 1;
 * @return {!Array<!proto.reachy.part.head.Head>}
 */
proto.reachy.part.head.ListOfHead.prototype.getHeadList = function() {
  return /** @type{!Array<!proto.reachy.part.head.Head>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.reachy.part.head.Head, 1));
};


/**
 * @param {!Array<!proto.reachy.part.head.Head>} value
 * @return {!proto.reachy.part.head.ListOfHead} returns this
*/
proto.reachy.part.head.ListOfHead.prototype.setHeadList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.reachy.part.head.Head=} opt_value
 * @param {number=} opt_index
 * @return {!proto.reachy.part.head.Head}
 */
proto.reachy.part.head.ListOfHead.prototype.addHead = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.reachy.part.head.Head, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.reachy.part.head.ListOfHead} returns this
 */
proto.reachy.part.head.ListOfHead.prototype.clearHeadList = function() {
  return this.setHeadList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.HeadState.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.HeadState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.HeadState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadState.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    id: (f = msg.getId()) && part_pb.PartId.toObject(includeInstance, f),
    activated: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    neckState: (f = msg.getNeckState()) && orbita3d_pb.Orbita3DState.toObject(includeInstance, f),
    lAntennaState: (f = msg.getLAntennaState()) && dynamixel_motor_pb.DynamixelMotorState.toObject(includeInstance, f),
    rAntennaState: (f = msg.getRAntennaState()) && dynamixel_motor_pb.DynamixelMotorState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.HeadState}
 */
proto.reachy.part.head.HeadState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.HeadState;
  return proto.reachy.part.head.HeadState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.HeadState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.HeadState}
 */
proto.reachy.part.head.HeadState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new part_pb.PartId;
      reader.readMessage(value,part_pb.PartId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActivated(value);
      break;
    case 4:
      var value = new orbita3d_pb.Orbita3DState;
      reader.readMessage(value,orbita3d_pb.Orbita3DState.deserializeBinaryFromReader);
      msg.setNeckState(value);
      break;
    case 5:
      var value = new dynamixel_motor_pb.DynamixelMotorState;
      reader.readMessage(value,dynamixel_motor_pb.DynamixelMotorState.deserializeBinaryFromReader);
      msg.setLAntennaState(value);
      break;
    case 6:
      var value = new dynamixel_motor_pb.DynamixelMotorState;
      reader.readMessage(value,dynamixel_motor_pb.DynamixelMotorState.deserializeBinaryFromReader);
      msg.setRAntennaState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.HeadState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.HeadState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.HeadState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      part_pb.PartId.serializeBinaryToWriter
    );
  }
  f = message.getActivated();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getNeckState();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      orbita3d_pb.Orbita3DState.serializeBinaryToWriter
    );
  }
  f = message.getLAntennaState();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      dynamixel_motor_pb.DynamixelMotorState.serializeBinaryToWriter
    );
  }
  f = message.getRAntennaState();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      dynamixel_motor_pb.DynamixelMotorState.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.reachy.part.head.HeadState.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.reachy.part.head.HeadState} returns this
*/
proto.reachy.part.head.HeadState.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadState} returns this
 */
proto.reachy.part.head.HeadState.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadState.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional reachy.part.PartId id = 2;
 * @return {?proto.reachy.part.PartId}
 */
proto.reachy.part.head.HeadState.prototype.getId = function() {
  return /** @type{?proto.reachy.part.PartId} */ (
    jspb.Message.getWrapperField(this, part_pb.PartId, 2));
};


/**
 * @param {?proto.reachy.part.PartId|undefined} value
 * @return {!proto.reachy.part.head.HeadState} returns this
*/
proto.reachy.part.head.HeadState.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadState} returns this
 */
proto.reachy.part.head.HeadState.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadState.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool activated = 3;
 * @return {boolean}
 */
proto.reachy.part.head.HeadState.prototype.getActivated = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.reachy.part.head.HeadState} returns this
 */
proto.reachy.part.head.HeadState.prototype.setActivated = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional component.orbita3d.Orbita3DState neck_state = 4;
 * @return {?proto.component.orbita3d.Orbita3DState}
 */
proto.reachy.part.head.HeadState.prototype.getNeckState = function() {
  return /** @type{?proto.component.orbita3d.Orbita3DState} */ (
    jspb.Message.getWrapperField(this, orbita3d_pb.Orbita3DState, 4));
};


/**
 * @param {?proto.component.orbita3d.Orbita3DState|undefined} value
 * @return {!proto.reachy.part.head.HeadState} returns this
*/
proto.reachy.part.head.HeadState.prototype.setNeckState = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadState} returns this
 */
proto.reachy.part.head.HeadState.prototype.clearNeckState = function() {
  return this.setNeckState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadState.prototype.hasNeckState = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional component.dynamixel_motor.DynamixelMotorState l_antenna_state = 5;
 * @return {?proto.component.dynamixel_motor.DynamixelMotorState}
 */
proto.reachy.part.head.HeadState.prototype.getLAntennaState = function() {
  return /** @type{?proto.component.dynamixel_motor.DynamixelMotorState} */ (
    jspb.Message.getWrapperField(this, dynamixel_motor_pb.DynamixelMotorState, 5));
};


/**
 * @param {?proto.component.dynamixel_motor.DynamixelMotorState|undefined} value
 * @return {!proto.reachy.part.head.HeadState} returns this
*/
proto.reachy.part.head.HeadState.prototype.setLAntennaState = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadState} returns this
 */
proto.reachy.part.head.HeadState.prototype.clearLAntennaState = function() {
  return this.setLAntennaState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadState.prototype.hasLAntennaState = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional component.dynamixel_motor.DynamixelMotorState r_antenna_state = 6;
 * @return {?proto.component.dynamixel_motor.DynamixelMotorState}
 */
proto.reachy.part.head.HeadState.prototype.getRAntennaState = function() {
  return /** @type{?proto.component.dynamixel_motor.DynamixelMotorState} */ (
    jspb.Message.getWrapperField(this, dynamixel_motor_pb.DynamixelMotorState, 6));
};


/**
 * @param {?proto.component.dynamixel_motor.DynamixelMotorState|undefined} value
 * @return {!proto.reachy.part.head.HeadState} returns this
*/
proto.reachy.part.head.HeadState.prototype.setRAntennaState = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadState} returns this
 */
proto.reachy.part.head.HeadState.prototype.clearRAntennaState = function() {
  return this.setRAntennaState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadState.prototype.hasRAntennaState = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.HeadPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.HeadPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.HeadPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    neckPosition: (f = msg.getNeckPosition()) && kinematics_pb.Rotation3D.toObject(includeInstance, f),
    lAntennaPosition: (f = msg.getLAntennaPosition()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    rAntennaPosition: (f = msg.getRAntennaPosition()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.HeadPosition}
 */
proto.reachy.part.head.HeadPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.HeadPosition;
  return proto.reachy.part.head.HeadPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.HeadPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.HeadPosition}
 */
proto.reachy.part.head.HeadPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new kinematics_pb.Rotation3D;
      reader.readMessage(value,kinematics_pb.Rotation3D.deserializeBinaryFromReader);
      msg.setNeckPosition(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setLAntennaPosition(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setRAntennaPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.HeadPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.HeadPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.HeadPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNeckPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      kinematics_pb.Rotation3D.serializeBinaryToWriter
    );
  }
  f = message.getLAntennaPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getRAntennaPosition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional reachy.kinematics.Rotation3D neck_position = 1;
 * @return {?proto.reachy.kinematics.Rotation3D}
 */
proto.reachy.part.head.HeadPosition.prototype.getNeckPosition = function() {
  return /** @type{?proto.reachy.kinematics.Rotation3D} */ (
    jspb.Message.getWrapperField(this, kinematics_pb.Rotation3D, 1));
};


/**
 * @param {?proto.reachy.kinematics.Rotation3D|undefined} value
 * @return {!proto.reachy.part.head.HeadPosition} returns this
*/
proto.reachy.part.head.HeadPosition.prototype.setNeckPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadPosition} returns this
 */
proto.reachy.part.head.HeadPosition.prototype.clearNeckPosition = function() {
  return this.setNeckPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadPosition.prototype.hasNeckPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.FloatValue l_antenna_position = 2;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.reachy.part.head.HeadPosition.prototype.getLAntennaPosition = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 2));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.reachy.part.head.HeadPosition} returns this
*/
proto.reachy.part.head.HeadPosition.prototype.setLAntennaPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadPosition} returns this
 */
proto.reachy.part.head.HeadPosition.prototype.clearLAntennaPosition = function() {
  return this.setLAntennaPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadPosition.prototype.hasLAntennaPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FloatValue r_antenna_position = 3;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.reachy.part.head.HeadPosition.prototype.getRAntennaPosition = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 3));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.reachy.part.head.HeadPosition} returns this
*/
proto.reachy.part.head.HeadPosition.prototype.setRAntennaPosition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadPosition} returns this
 */
proto.reachy.part.head.HeadPosition.prototype.clearRAntennaPosition = function() {
  return this.setRAntennaPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadPosition.prototype.hasRAntennaPosition = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.NeckGoal.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.NeckGoal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.NeckGoal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckGoal.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && part_pb.PartId.toObject(includeInstance, f),
    rotation: (f = msg.getRotation()) && kinematics_pb.Rotation3D.toObject(includeInstance, f),
    duration: (f = msg.getDuration()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.NeckGoal}
 */
proto.reachy.part.head.NeckGoal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.NeckGoal;
  return proto.reachy.part.head.NeckGoal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.NeckGoal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.NeckGoal}
 */
proto.reachy.part.head.NeckGoal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new part_pb.PartId;
      reader.readMessage(value,part_pb.PartId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new kinematics_pb.Rotation3D;
      reader.readMessage(value,kinematics_pb.Rotation3D.deserializeBinaryFromReader);
      msg.setRotation(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.NeckGoal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.NeckGoal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.NeckGoal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckGoal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      part_pb.PartId.serializeBinaryToWriter
    );
  }
  f = message.getRotation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      kinematics_pb.Rotation3D.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional reachy.part.PartId id = 1;
 * @return {?proto.reachy.part.PartId}
 */
proto.reachy.part.head.NeckGoal.prototype.getId = function() {
  return /** @type{?proto.reachy.part.PartId} */ (
    jspb.Message.getWrapperField(this, part_pb.PartId, 1));
};


/**
 * @param {?proto.reachy.part.PartId|undefined} value
 * @return {!proto.reachy.part.head.NeckGoal} returns this
*/
proto.reachy.part.head.NeckGoal.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckGoal} returns this
 */
proto.reachy.part.head.NeckGoal.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckGoal.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional reachy.kinematics.Rotation3D rotation = 2;
 * @return {?proto.reachy.kinematics.Rotation3D}
 */
proto.reachy.part.head.NeckGoal.prototype.getRotation = function() {
  return /** @type{?proto.reachy.kinematics.Rotation3D} */ (
    jspb.Message.getWrapperField(this, kinematics_pb.Rotation3D, 2));
};


/**
 * @param {?proto.reachy.kinematics.Rotation3D|undefined} value
 * @return {!proto.reachy.part.head.NeckGoal} returns this
*/
proto.reachy.part.head.NeckGoal.prototype.setRotation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckGoal} returns this
 */
proto.reachy.part.head.NeckGoal.prototype.clearRotation = function() {
  return this.setRotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckGoal.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FloatValue duration = 3;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.reachy.part.head.NeckGoal.prototype.getDuration = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 3));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.reachy.part.head.NeckGoal} returns this
*/
proto.reachy.part.head.NeckGoal.prototype.setDuration = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckGoal} returns this
 */
proto.reachy.part.head.NeckGoal.prototype.clearDuration = function() {
  return this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckGoal.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.NeckOrientation.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.NeckOrientation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.NeckOrientation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckOrientation.toObject = function(includeInstance, msg) {
  var f, obj = {
    rotation: (f = msg.getRotation()) && kinematics_pb.Rotation3D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.NeckOrientation}
 */
proto.reachy.part.head.NeckOrientation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.NeckOrientation;
  return proto.reachy.part.head.NeckOrientation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.NeckOrientation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.NeckOrientation}
 */
proto.reachy.part.head.NeckOrientation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new kinematics_pb.Rotation3D;
      reader.readMessage(value,kinematics_pb.Rotation3D.deserializeBinaryFromReader);
      msg.setRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.NeckOrientation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.NeckOrientation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.NeckOrientation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckOrientation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRotation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      kinematics_pb.Rotation3D.serializeBinaryToWriter
    );
  }
};


/**
 * optional reachy.kinematics.Rotation3D rotation = 1;
 * @return {?proto.reachy.kinematics.Rotation3D}
 */
proto.reachy.part.head.NeckOrientation.prototype.getRotation = function() {
  return /** @type{?proto.reachy.kinematics.Rotation3D} */ (
    jspb.Message.getWrapperField(this, kinematics_pb.Rotation3D, 1));
};


/**
 * @param {?proto.reachy.kinematics.Rotation3D|undefined} value
 * @return {!proto.reachy.part.head.NeckOrientation} returns this
*/
proto.reachy.part.head.NeckOrientation.prototype.setRotation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckOrientation} returns this
 */
proto.reachy.part.head.NeckOrientation.prototype.clearRotation = function() {
  return this.setRotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckOrientation.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.NeckFKRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.NeckFKRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.NeckFKRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckFKRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && part_pb.PartId.toObject(includeInstance, f),
    position: (f = msg.getPosition()) && proto.reachy.part.head.HeadPosition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.NeckFKRequest}
 */
proto.reachy.part.head.NeckFKRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.NeckFKRequest;
  return proto.reachy.part.head.NeckFKRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.NeckFKRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.NeckFKRequest}
 */
proto.reachy.part.head.NeckFKRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new part_pb.PartId;
      reader.readMessage(value,part_pb.PartId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.reachy.part.head.HeadPosition;
      reader.readMessage(value,proto.reachy.part.head.HeadPosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.NeckFKRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.NeckFKRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.NeckFKRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckFKRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      part_pb.PartId.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.reachy.part.head.HeadPosition.serializeBinaryToWriter
    );
  }
};


/**
 * optional reachy.part.PartId id = 1;
 * @return {?proto.reachy.part.PartId}
 */
proto.reachy.part.head.NeckFKRequest.prototype.getId = function() {
  return /** @type{?proto.reachy.part.PartId} */ (
    jspb.Message.getWrapperField(this, part_pb.PartId, 1));
};


/**
 * @param {?proto.reachy.part.PartId|undefined} value
 * @return {!proto.reachy.part.head.NeckFKRequest} returns this
*/
proto.reachy.part.head.NeckFKRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckFKRequest} returns this
 */
proto.reachy.part.head.NeckFKRequest.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckFKRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HeadPosition position = 2;
 * @return {?proto.reachy.part.head.HeadPosition}
 */
proto.reachy.part.head.NeckFKRequest.prototype.getPosition = function() {
  return /** @type{?proto.reachy.part.head.HeadPosition} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.HeadPosition, 2));
};


/**
 * @param {?proto.reachy.part.head.HeadPosition|undefined} value
 * @return {!proto.reachy.part.head.NeckFKRequest} returns this
*/
proto.reachy.part.head.NeckFKRequest.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckFKRequest} returns this
 */
proto.reachy.part.head.NeckFKRequest.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckFKRequest.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.NeckFKSolution.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.NeckFKSolution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.NeckFKSolution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckFKSolution.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    orientation: (f = msg.getOrientation()) && proto.reachy.part.head.NeckOrientation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.NeckFKSolution}
 */
proto.reachy.part.head.NeckFKSolution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.NeckFKSolution;
  return proto.reachy.part.head.NeckFKSolution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.NeckFKSolution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.NeckFKSolution}
 */
proto.reachy.part.head.NeckFKSolution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.reachy.part.head.NeckOrientation;
      reader.readMessage(value,proto.reachy.part.head.NeckOrientation.deserializeBinaryFromReader);
      msg.setOrientation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.NeckFKSolution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.NeckFKSolution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.NeckFKSolution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckFKSolution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getOrientation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.reachy.part.head.NeckOrientation.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.reachy.part.head.NeckFKSolution.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.reachy.part.head.NeckFKSolution} returns this
 */
proto.reachy.part.head.NeckFKSolution.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional NeckOrientation orientation = 2;
 * @return {?proto.reachy.part.head.NeckOrientation}
 */
proto.reachy.part.head.NeckFKSolution.prototype.getOrientation = function() {
  return /** @type{?proto.reachy.part.head.NeckOrientation} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.NeckOrientation, 2));
};


/**
 * @param {?proto.reachy.part.head.NeckOrientation|undefined} value
 * @return {!proto.reachy.part.head.NeckFKSolution} returns this
*/
proto.reachy.part.head.NeckFKSolution.prototype.setOrientation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckFKSolution} returns this
 */
proto.reachy.part.head.NeckFKSolution.prototype.clearOrientation = function() {
  return this.setOrientation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckFKSolution.prototype.hasOrientation = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.NeckIKRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.NeckIKRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.NeckIKRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckIKRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && part_pb.PartId.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.reachy.part.head.NeckOrientation.toObject(includeInstance, f),
    q0: (f = msg.getQ0()) && kinematics_pb.Rotation3D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.NeckIKRequest}
 */
proto.reachy.part.head.NeckIKRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.NeckIKRequest;
  return proto.reachy.part.head.NeckIKRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.NeckIKRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.NeckIKRequest}
 */
proto.reachy.part.head.NeckIKRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new part_pb.PartId;
      reader.readMessage(value,part_pb.PartId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.reachy.part.head.NeckOrientation;
      reader.readMessage(value,proto.reachy.part.head.NeckOrientation.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 3:
      var value = new kinematics_pb.Rotation3D;
      reader.readMessage(value,kinematics_pb.Rotation3D.deserializeBinaryFromReader);
      msg.setQ0(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.NeckIKRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.NeckIKRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.NeckIKRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckIKRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      part_pb.PartId.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.reachy.part.head.NeckOrientation.serializeBinaryToWriter
    );
  }
  f = message.getQ0();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      kinematics_pb.Rotation3D.serializeBinaryToWriter
    );
  }
};


/**
 * optional reachy.part.PartId id = 1;
 * @return {?proto.reachy.part.PartId}
 */
proto.reachy.part.head.NeckIKRequest.prototype.getId = function() {
  return /** @type{?proto.reachy.part.PartId} */ (
    jspb.Message.getWrapperField(this, part_pb.PartId, 1));
};


/**
 * @param {?proto.reachy.part.PartId|undefined} value
 * @return {!proto.reachy.part.head.NeckIKRequest} returns this
*/
proto.reachy.part.head.NeckIKRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckIKRequest} returns this
 */
proto.reachy.part.head.NeckIKRequest.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckIKRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NeckOrientation target = 2;
 * @return {?proto.reachy.part.head.NeckOrientation}
 */
proto.reachy.part.head.NeckIKRequest.prototype.getTarget = function() {
  return /** @type{?proto.reachy.part.head.NeckOrientation} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.NeckOrientation, 2));
};


/**
 * @param {?proto.reachy.part.head.NeckOrientation|undefined} value
 * @return {!proto.reachy.part.head.NeckIKRequest} returns this
*/
proto.reachy.part.head.NeckIKRequest.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckIKRequest} returns this
 */
proto.reachy.part.head.NeckIKRequest.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckIKRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional reachy.kinematics.Rotation3D q0 = 3;
 * @return {?proto.reachy.kinematics.Rotation3D}
 */
proto.reachy.part.head.NeckIKRequest.prototype.getQ0 = function() {
  return /** @type{?proto.reachy.kinematics.Rotation3D} */ (
    jspb.Message.getWrapperField(this, kinematics_pb.Rotation3D, 3));
};


/**
 * @param {?proto.reachy.kinematics.Rotation3D|undefined} value
 * @return {!proto.reachy.part.head.NeckIKRequest} returns this
*/
proto.reachy.part.head.NeckIKRequest.prototype.setQ0 = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckIKRequest} returns this
 */
proto.reachy.part.head.NeckIKRequest.prototype.clearQ0 = function() {
  return this.setQ0(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckIKRequest.prototype.hasQ0 = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.NeckIKSolution.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.NeckIKSolution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.NeckIKSolution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckIKSolution.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    position: (f = msg.getPosition()) && kinematics_pb.Rotation3D.toObject(includeInstance, f),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.NeckIKSolution}
 */
proto.reachy.part.head.NeckIKSolution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.NeckIKSolution;
  return proto.reachy.part.head.NeckIKSolution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.NeckIKSolution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.NeckIKSolution}
 */
proto.reachy.part.head.NeckIKSolution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new kinematics_pb.Rotation3D;
      reader.readMessage(value,kinematics_pb.Rotation3D.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.NeckIKSolution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.NeckIKSolution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.NeckIKSolution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckIKSolution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      kinematics_pb.Rotation3D.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.reachy.part.head.NeckIKSolution.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.reachy.part.head.NeckIKSolution} returns this
 */
proto.reachy.part.head.NeckIKSolution.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional reachy.kinematics.Rotation3D position = 2;
 * @return {?proto.reachy.kinematics.Rotation3D}
 */
proto.reachy.part.head.NeckIKSolution.prototype.getPosition = function() {
  return /** @type{?proto.reachy.kinematics.Rotation3D} */ (
    jspb.Message.getWrapperField(this, kinematics_pb.Rotation3D, 2));
};


/**
 * @param {?proto.reachy.kinematics.Rotation3D|undefined} value
 * @return {!proto.reachy.part.head.NeckIKSolution} returns this
*/
proto.reachy.part.head.NeckIKSolution.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckIKSolution} returns this
 */
proto.reachy.part.head.NeckIKSolution.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckIKSolution.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional error.Error error = 3;
 * @return {?proto.error.Error}
 */
proto.reachy.part.head.NeckIKSolution.prototype.getError = function() {
  return /** @type{?proto.error.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 3));
};


/**
 * @param {?proto.error.Error|undefined} value
 * @return {!proto.reachy.part.head.NeckIKSolution} returns this
*/
proto.reachy.part.head.NeckIKSolution.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckIKSolution} returns this
 */
proto.reachy.part.head.NeckIKSolution.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckIKSolution.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.HeadStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.HeadStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.HeadStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadStatus.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.HeadStatus}
 */
proto.reachy.part.head.HeadStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.HeadStatus;
  return proto.reachy.part.head.HeadStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.HeadStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.HeadStatus}
 */
proto.reachy.part.head.HeadStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.HeadStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.HeadStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.HeadStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.HeadLookAtGoal.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.HeadLookAtGoal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.HeadLookAtGoal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadLookAtGoal.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && part_pb.PartId.toObject(includeInstance, f),
    point: (f = msg.getPoint()) && kinematics_pb.Point.toObject(includeInstance, f),
    duration: (f = msg.getDuration()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.HeadLookAtGoal}
 */
proto.reachy.part.head.HeadLookAtGoal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.HeadLookAtGoal;
  return proto.reachy.part.head.HeadLookAtGoal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.HeadLookAtGoal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.HeadLookAtGoal}
 */
proto.reachy.part.head.HeadLookAtGoal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new part_pb.PartId;
      reader.readMessage(value,part_pb.PartId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new kinematics_pb.Point;
      reader.readMessage(value,kinematics_pb.Point.deserializeBinaryFromReader);
      msg.setPoint(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.HeadLookAtGoal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.HeadLookAtGoal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.HeadLookAtGoal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadLookAtGoal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      part_pb.PartId.serializeBinaryToWriter
    );
  }
  f = message.getPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      kinematics_pb.Point.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional reachy.part.PartId id = 1;
 * @return {?proto.reachy.part.PartId}
 */
proto.reachy.part.head.HeadLookAtGoal.prototype.getId = function() {
  return /** @type{?proto.reachy.part.PartId} */ (
    jspb.Message.getWrapperField(this, part_pb.PartId, 1));
};


/**
 * @param {?proto.reachy.part.PartId|undefined} value
 * @return {!proto.reachy.part.head.HeadLookAtGoal} returns this
*/
proto.reachy.part.head.HeadLookAtGoal.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadLookAtGoal} returns this
 */
proto.reachy.part.head.HeadLookAtGoal.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadLookAtGoal.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional reachy.kinematics.Point point = 2;
 * @return {?proto.reachy.kinematics.Point}
 */
proto.reachy.part.head.HeadLookAtGoal.prototype.getPoint = function() {
  return /** @type{?proto.reachy.kinematics.Point} */ (
    jspb.Message.getWrapperField(this, kinematics_pb.Point, 2));
};


/**
 * @param {?proto.reachy.kinematics.Point|undefined} value
 * @return {!proto.reachy.part.head.HeadLookAtGoal} returns this
*/
proto.reachy.part.head.HeadLookAtGoal.prototype.setPoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadLookAtGoal} returns this
 */
proto.reachy.part.head.HeadLookAtGoal.prototype.clearPoint = function() {
  return this.setPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadLookAtGoal.prototype.hasPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FloatValue duration = 3;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.reachy.part.head.HeadLookAtGoal.prototype.getDuration = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 3));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.reachy.part.head.HeadLookAtGoal} returns this
*/
proto.reachy.part.head.HeadLookAtGoal.prototype.setDuration = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadLookAtGoal} returns this
 */
proto.reachy.part.head.HeadLookAtGoal.prototype.clearDuration = function() {
  return this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadLookAtGoal.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.SpeedLimitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.SpeedLimitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.SpeedLimitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.SpeedLimitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && part_pb.PartId.toObject(includeInstance, f),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.SpeedLimitRequest}
 */
proto.reachy.part.head.SpeedLimitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.SpeedLimitRequest;
  return proto.reachy.part.head.SpeedLimitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.SpeedLimitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.SpeedLimitRequest}
 */
proto.reachy.part.head.SpeedLimitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new part_pb.PartId;
      reader.readMessage(value,part_pb.PartId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.reachy.part.head.SpeedLimit} */ (reader.readEnum());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.SpeedLimitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.SpeedLimitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.SpeedLimitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.SpeedLimitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      part_pb.PartId.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional reachy.part.PartId id = 1;
 * @return {?proto.reachy.part.PartId}
 */
proto.reachy.part.head.SpeedLimitRequest.prototype.getId = function() {
  return /** @type{?proto.reachy.part.PartId} */ (
    jspb.Message.getWrapperField(this, part_pb.PartId, 1));
};


/**
 * @param {?proto.reachy.part.PartId|undefined} value
 * @return {!proto.reachy.part.head.SpeedLimitRequest} returns this
*/
proto.reachy.part.head.SpeedLimitRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.SpeedLimitRequest} returns this
 */
proto.reachy.part.head.SpeedLimitRequest.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.SpeedLimitRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SpeedLimit limit = 2;
 * @return {!proto.reachy.part.head.SpeedLimit}
 */
proto.reachy.part.head.SpeedLimitRequest.prototype.getLimit = function() {
  return /** @type {!proto.reachy.part.head.SpeedLimit} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.reachy.part.head.SpeedLimit} value
 * @return {!proto.reachy.part.head.SpeedLimitRequest} returns this
 */
proto.reachy.part.head.SpeedLimitRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.JointsLimits.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.JointsLimits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.JointsLimits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.JointsLimits.toObject = function(includeInstance, msg) {
  var f, obj = {
    neckLimits: (f = msg.getNeckLimits()) && orbita3d_pb.Limits3D.toObject(includeInstance, f),
    lAntennaLimits: (f = msg.getLAntennaLimits()) && component_pb.JointLimits.toObject(includeInstance, f),
    rAntennaLimits: (f = msg.getRAntennaLimits()) && component_pb.JointLimits.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.JointsLimits}
 */
proto.reachy.part.head.JointsLimits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.JointsLimits;
  return proto.reachy.part.head.JointsLimits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.JointsLimits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.JointsLimits}
 */
proto.reachy.part.head.JointsLimits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new orbita3d_pb.Limits3D;
      reader.readMessage(value,orbita3d_pb.Limits3D.deserializeBinaryFromReader);
      msg.setNeckLimits(value);
      break;
    case 2:
      var value = new component_pb.JointLimits;
      reader.readMessage(value,component_pb.JointLimits.deserializeBinaryFromReader);
      msg.setLAntennaLimits(value);
      break;
    case 3:
      var value = new component_pb.JointLimits;
      reader.readMessage(value,component_pb.JointLimits.deserializeBinaryFromReader);
      msg.setRAntennaLimits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.JointsLimits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.JointsLimits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.JointsLimits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.JointsLimits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNeckLimits();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      orbita3d_pb.Limits3D.serializeBinaryToWriter
    );
  }
  f = message.getLAntennaLimits();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      component_pb.JointLimits.serializeBinaryToWriter
    );
  }
  f = message.getRAntennaLimits();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      component_pb.JointLimits.serializeBinaryToWriter
    );
  }
};


/**
 * optional component.orbita3d.Limits3D neck_limits = 1;
 * @return {?proto.component.orbita3d.Limits3D}
 */
proto.reachy.part.head.JointsLimits.prototype.getNeckLimits = function() {
  return /** @type{?proto.component.orbita3d.Limits3D} */ (
    jspb.Message.getWrapperField(this, orbita3d_pb.Limits3D, 1));
};


/**
 * @param {?proto.component.orbita3d.Limits3D|undefined} value
 * @return {!proto.reachy.part.head.JointsLimits} returns this
*/
proto.reachy.part.head.JointsLimits.prototype.setNeckLimits = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.JointsLimits} returns this
 */
proto.reachy.part.head.JointsLimits.prototype.clearNeckLimits = function() {
  return this.setNeckLimits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.JointsLimits.prototype.hasNeckLimits = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional component.JointLimits l_antenna_limits = 2;
 * @return {?proto.component.JointLimits}
 */
proto.reachy.part.head.JointsLimits.prototype.getLAntennaLimits = function() {
  return /** @type{?proto.component.JointLimits} */ (
    jspb.Message.getWrapperField(this, component_pb.JointLimits, 2));
};


/**
 * @param {?proto.component.JointLimits|undefined} value
 * @return {!proto.reachy.part.head.JointsLimits} returns this
*/
proto.reachy.part.head.JointsLimits.prototype.setLAntennaLimits = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.JointsLimits} returns this
 */
proto.reachy.part.head.JointsLimits.prototype.clearLAntennaLimits = function() {
  return this.setLAntennaLimits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.JointsLimits.prototype.hasLAntennaLimits = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional component.JointLimits r_antenna_limits = 3;
 * @return {?proto.component.JointLimits}
 */
proto.reachy.part.head.JointsLimits.prototype.getRAntennaLimits = function() {
  return /** @type{?proto.component.JointLimits} */ (
    jspb.Message.getWrapperField(this, component_pb.JointLimits, 3));
};


/**
 * @param {?proto.component.JointLimits|undefined} value
 * @return {!proto.reachy.part.head.JointsLimits} returns this
*/
proto.reachy.part.head.JointsLimits.prototype.setRAntennaLimits = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.JointsLimits} returns this
 */
proto.reachy.part.head.JointsLimits.prototype.clearRAntennaLimits = function() {
  return this.setRAntennaLimits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.JointsLimits.prototype.hasRAntennaLimits = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.HeadTemperatures.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.HeadTemperatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.HeadTemperatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadTemperatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    neckTemperature: (f = msg.getNeckTemperature()) && orbita3d_pb.Float3D.toObject(includeInstance, f),
    lAntennaTemperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    rAntennaTemperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.HeadTemperatures}
 */
proto.reachy.part.head.HeadTemperatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.HeadTemperatures;
  return proto.reachy.part.head.HeadTemperatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.HeadTemperatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.HeadTemperatures}
 */
proto.reachy.part.head.HeadTemperatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new orbita3d_pb.Float3D;
      reader.readMessage(value,orbita3d_pb.Float3D.deserializeBinaryFromReader);
      msg.setNeckTemperature(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLAntennaTemperature(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRAntennaTemperature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.HeadTemperatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.HeadTemperatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.HeadTemperatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadTemperatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNeckTemperature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      orbita3d_pb.Float3D.serializeBinaryToWriter
    );
  }
  f = message.getLAntennaTemperature();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getRAntennaTemperature();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional component.orbita3d.Float3D neck_temperature = 1;
 * @return {?proto.component.orbita3d.Float3D}
 */
proto.reachy.part.head.HeadTemperatures.prototype.getNeckTemperature = function() {
  return /** @type{?proto.component.orbita3d.Float3D} */ (
    jspb.Message.getWrapperField(this, orbita3d_pb.Float3D, 1));
};


/**
 * @param {?proto.component.orbita3d.Float3D|undefined} value
 * @return {!proto.reachy.part.head.HeadTemperatures} returns this
*/
proto.reachy.part.head.HeadTemperatures.prototype.setNeckTemperature = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadTemperatures} returns this
 */
proto.reachy.part.head.HeadTemperatures.prototype.clearNeckTemperature = function() {
  return this.setNeckTemperature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadTemperatures.prototype.hasNeckTemperature = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float l_antenna_temperature = 2;
 * @return {number}
 */
proto.reachy.part.head.HeadTemperatures.prototype.getLAntennaTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.part.head.HeadTemperatures} returns this
 */
proto.reachy.part.head.HeadTemperatures.prototype.setLAntennaTemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float r_antenna_temperature = 3;
 * @return {number}
 */
proto.reachy.part.head.HeadTemperatures.prototype.getRAntennaTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.part.head.HeadTemperatures} returns this
 */
proto.reachy.part.head.HeadTemperatures.prototype.setRAntennaTemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.reachy.part.head.HeadField = {
  NONE: 0,
  NAME: 1,
  ID: 2,
  PRESENT_POSITION: 3,
  PRESENT_SPEED: 4,
  PRESENT_LOAD: 5,
  TEMPERATURE: 6,
  JOINT_LIMIT: 7,
  COMPLIANT: 8,
  GOAL_POSITION: 9,
  SPEED_LIMIT: 10,
  TORQUE_LIMIT: 11,
  PID: 12,
  ALL: 15
};

/**
 * @enum {number}
 */
proto.reachy.part.head.SpeedLimit = {
  NO_LIMIT: 0,
  FAST: 1,
  NORMAL: 2,
  SLOW: 3
};

goog.object.extend(exports, proto.reachy.part.head);
