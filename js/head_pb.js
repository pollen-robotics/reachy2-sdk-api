// source: head.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var part_pb = require('./part_pb.js');
goog.object.extend(proto, part_pb);
var kinematics_pb = require('./kinematics_pb.js');
goog.object.extend(proto, kinematics_pb);
var error_pb = require('./error_pb.js');
goog.object.extend(proto, error_pb);
goog.exportSymbol('proto.reachy.part.head.ArmTemperatures', null, global);
goog.exportSymbol('proto.reachy.part.head.Head', null, global);
goog.exportSymbol('proto.reachy.part.head.HeadPosition', null, global);
goog.exportSymbol('proto.reachy.part.head.HeadState', null, global);
goog.exportSymbol('proto.reachy.part.head.HeadStatus', null, global);
goog.exportSymbol('proto.reachy.part.head.HeadTargetPoint', null, global);
goog.exportSymbol('proto.reachy.part.head.JointLimits', null, global);
goog.exportSymbol('proto.reachy.part.head.JointsLimits', null, global);
goog.exportSymbol('proto.reachy.part.head.ListOfHead', null, global);
goog.exportSymbol('proto.reachy.part.head.NeckFKRequest', null, global);
goog.exportSymbol('proto.reachy.part.head.NeckFKSolution', null, global);
goog.exportSymbol('proto.reachy.part.head.NeckGoal', null, global);
goog.exportSymbol('proto.reachy.part.head.NeckIKRequest', null, global);
goog.exportSymbol('proto.reachy.part.head.NeckIKSolution', null, global);
goog.exportSymbol('proto.reachy.part.head.NeckOrientation', null, global);
goog.exportSymbol('proto.reachy.part.head.NeckPosition', null, global);
goog.exportSymbol('proto.reachy.part.head.SpeedLimit', null, global);
goog.exportSymbol('proto.reachy.part.head.SpeedLimitRequest', null, global);
goog.exportSymbol('proto.reachy.part.head.Temperatures', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.Head = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.Head, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.Head.displayName = 'proto.reachy.part.head.Head';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.ListOfHead = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.reachy.part.head.ListOfHead.repeatedFields_, null);
};
goog.inherits(proto.reachy.part.head.ListOfHead, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.ListOfHead.displayName = 'proto.reachy.part.head.ListOfHead';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.HeadState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.HeadState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.HeadState.displayName = 'proto.reachy.part.head.HeadState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.NeckPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.NeckPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.NeckPosition.displayName = 'proto.reachy.part.head.NeckPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.HeadPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.HeadPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.HeadPosition.displayName = 'proto.reachy.part.head.HeadPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.NeckGoal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.NeckGoal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.NeckGoal.displayName = 'proto.reachy.part.head.NeckGoal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.NeckOrientation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.NeckOrientation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.NeckOrientation.displayName = 'proto.reachy.part.head.NeckOrientation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.NeckFKRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.NeckFKRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.NeckFKRequest.displayName = 'proto.reachy.part.head.NeckFKRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.NeckFKSolution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.NeckFKSolution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.NeckFKSolution.displayName = 'proto.reachy.part.head.NeckFKSolution';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.NeckIKRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.NeckIKRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.NeckIKRequest.displayName = 'proto.reachy.part.head.NeckIKRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.NeckIKSolution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.NeckIKSolution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.NeckIKSolution.displayName = 'proto.reachy.part.head.NeckIKSolution';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.HeadStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.HeadStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.HeadStatus.displayName = 'proto.reachy.part.head.HeadStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.HeadTargetPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.HeadTargetPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.HeadTargetPoint.displayName = 'proto.reachy.part.head.HeadTargetPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.SpeedLimitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.SpeedLimitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.SpeedLimitRequest.displayName = 'proto.reachy.part.head.SpeedLimitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.JointLimits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.JointLimits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.JointLimits.displayName = 'proto.reachy.part.head.JointLimits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.JointsLimits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.JointsLimits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.JointsLimits.displayName = 'proto.reachy.part.head.JointsLimits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.Temperatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.Temperatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.Temperatures.displayName = 'proto.reachy.part.head.Temperatures';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.head.ArmTemperatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.head.ArmTemperatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.head.ArmTemperatures.displayName = 'proto.reachy.part.head.ArmTemperatures';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.Head.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.Head.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.Head} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.Head.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.Head}
 */
proto.reachy.part.head.Head.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.Head;
  return proto.reachy.part.head.Head.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.Head} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.Head}
 */
proto.reachy.part.head.Head.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.Head.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.Head.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.Head} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.Head.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.reachy.part.head.ListOfHead.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.ListOfHead.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.ListOfHead.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.ListOfHead} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.ListOfHead.toObject = function(includeInstance, msg) {
  var f, obj = {
    headList: jspb.Message.toObjectList(msg.getHeadList(),
    proto.reachy.part.head.Head.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.ListOfHead}
 */
proto.reachy.part.head.ListOfHead.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.ListOfHead;
  return proto.reachy.part.head.ListOfHead.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.ListOfHead} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.ListOfHead}
 */
proto.reachy.part.head.ListOfHead.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reachy.part.head.Head;
      reader.readMessage(value,proto.reachy.part.head.Head.deserializeBinaryFromReader);
      msg.addHead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.ListOfHead.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.ListOfHead.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.ListOfHead} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.ListOfHead.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.reachy.part.head.Head.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Head head = 1;
 * @return {!Array<!proto.reachy.part.head.Head>}
 */
proto.reachy.part.head.ListOfHead.prototype.getHeadList = function() {
  return /** @type{!Array<!proto.reachy.part.head.Head>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.reachy.part.head.Head, 1));
};


/**
 * @param {!Array<!proto.reachy.part.head.Head>} value
 * @return {!proto.reachy.part.head.ListOfHead} returns this
*/
proto.reachy.part.head.ListOfHead.prototype.setHeadList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.reachy.part.head.Head=} opt_value
 * @param {number=} opt_index
 * @return {!proto.reachy.part.head.Head}
 */
proto.reachy.part.head.ListOfHead.prototype.addHead = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.reachy.part.head.Head, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.reachy.part.head.ListOfHead} returns this
 */
proto.reachy.part.head.ListOfHead.prototype.clearHeadList = function() {
  return this.setHeadList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.HeadState.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.HeadState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.HeadState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadState.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.HeadState}
 */
proto.reachy.part.head.HeadState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.HeadState;
  return proto.reachy.part.head.HeadState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.HeadState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.HeadState}
 */
proto.reachy.part.head.HeadState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.HeadState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.HeadState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.HeadState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.NeckPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.NeckPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.NeckPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    neckRoll: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    neckPitch: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    neckYaw: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.NeckPosition}
 */
proto.reachy.part.head.NeckPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.NeckPosition;
  return proto.reachy.part.head.NeckPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.NeckPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.NeckPosition}
 */
proto.reachy.part.head.NeckPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNeckRoll(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNeckPitch(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNeckYaw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.NeckPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.NeckPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.NeckPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNeckRoll();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getNeckPitch();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getNeckYaw();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float neck_roll = 1;
 * @return {number}
 */
proto.reachy.part.head.NeckPosition.prototype.getNeckRoll = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.part.head.NeckPosition} returns this
 */
proto.reachy.part.head.NeckPosition.prototype.setNeckRoll = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float neck_pitch = 2;
 * @return {number}
 */
proto.reachy.part.head.NeckPosition.prototype.getNeckPitch = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.part.head.NeckPosition} returns this
 */
proto.reachy.part.head.NeckPosition.prototype.setNeckPitch = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float neck_yaw = 3;
 * @return {number}
 */
proto.reachy.part.head.NeckPosition.prototype.getNeckYaw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.part.head.NeckPosition} returns this
 */
proto.reachy.part.head.NeckPosition.prototype.setNeckYaw = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.HeadPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.HeadPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.HeadPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.reachy.part.head.NeckPosition.toObject(includeInstance, f),
    lAntenna: (f = msg.getLAntenna()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    rAntenna: (f = msg.getRAntenna()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.HeadPosition}
 */
proto.reachy.part.head.HeadPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.HeadPosition;
  return proto.reachy.part.head.HeadPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.HeadPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.HeadPosition}
 */
proto.reachy.part.head.HeadPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reachy.part.head.NeckPosition;
      reader.readMessage(value,proto.reachy.part.head.NeckPosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setLAntenna(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setRAntenna(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.HeadPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.HeadPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.HeadPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.reachy.part.head.NeckPosition.serializeBinaryToWriter
    );
  }
  f = message.getLAntenna();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getRAntenna();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional NeckPosition position = 1;
 * @return {?proto.reachy.part.head.NeckPosition}
 */
proto.reachy.part.head.HeadPosition.prototype.getPosition = function() {
  return /** @type{?proto.reachy.part.head.NeckPosition} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.NeckPosition, 1));
};


/**
 * @param {?proto.reachy.part.head.NeckPosition|undefined} value
 * @return {!proto.reachy.part.head.HeadPosition} returns this
*/
proto.reachy.part.head.HeadPosition.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadPosition} returns this
 */
proto.reachy.part.head.HeadPosition.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadPosition.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.FloatValue l_antenna = 2;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.reachy.part.head.HeadPosition.prototype.getLAntenna = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 2));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.reachy.part.head.HeadPosition} returns this
*/
proto.reachy.part.head.HeadPosition.prototype.setLAntenna = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadPosition} returns this
 */
proto.reachy.part.head.HeadPosition.prototype.clearLAntenna = function() {
  return this.setLAntenna(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadPosition.prototype.hasLAntenna = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FloatValue r_antenna = 3;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.reachy.part.head.HeadPosition.prototype.getRAntenna = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 3));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.reachy.part.head.HeadPosition} returns this
*/
proto.reachy.part.head.HeadPosition.prototype.setRAntenna = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadPosition} returns this
 */
proto.reachy.part.head.HeadPosition.prototype.clearRAntenna = function() {
  return this.setRAntenna(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadPosition.prototype.hasRAntenna = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.NeckGoal.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.NeckGoal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.NeckGoal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckGoal.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && part_pb.PartId.toObject(includeInstance, f),
    rotation: (f = msg.getRotation()) && kinematics_pb.Rotation3D.toObject(includeInstance, f),
    duration: (f = msg.getDuration()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.NeckGoal}
 */
proto.reachy.part.head.NeckGoal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.NeckGoal;
  return proto.reachy.part.head.NeckGoal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.NeckGoal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.NeckGoal}
 */
proto.reachy.part.head.NeckGoal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new part_pb.PartId;
      reader.readMessage(value,part_pb.PartId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new kinematics_pb.Rotation3D;
      reader.readMessage(value,kinematics_pb.Rotation3D.deserializeBinaryFromReader);
      msg.setRotation(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.NeckGoal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.NeckGoal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.NeckGoal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckGoal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      part_pb.PartId.serializeBinaryToWriter
    );
  }
  f = message.getRotation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      kinematics_pb.Rotation3D.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional reachy.part.PartId id = 1;
 * @return {?proto.reachy.part.PartId}
 */
proto.reachy.part.head.NeckGoal.prototype.getId = function() {
  return /** @type{?proto.reachy.part.PartId} */ (
    jspb.Message.getWrapperField(this, part_pb.PartId, 1));
};


/**
 * @param {?proto.reachy.part.PartId|undefined} value
 * @return {!proto.reachy.part.head.NeckGoal} returns this
*/
proto.reachy.part.head.NeckGoal.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckGoal} returns this
 */
proto.reachy.part.head.NeckGoal.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckGoal.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional reachy.kinematics.Rotation3D rotation = 2;
 * @return {?proto.reachy.kinematics.Rotation3D}
 */
proto.reachy.part.head.NeckGoal.prototype.getRotation = function() {
  return /** @type{?proto.reachy.kinematics.Rotation3D} */ (
    jspb.Message.getWrapperField(this, kinematics_pb.Rotation3D, 2));
};


/**
 * @param {?proto.reachy.kinematics.Rotation3D|undefined} value
 * @return {!proto.reachy.part.head.NeckGoal} returns this
*/
proto.reachy.part.head.NeckGoal.prototype.setRotation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckGoal} returns this
 */
proto.reachy.part.head.NeckGoal.prototype.clearRotation = function() {
  return this.setRotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckGoal.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FloatValue duration = 3;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.reachy.part.head.NeckGoal.prototype.getDuration = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 3));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.reachy.part.head.NeckGoal} returns this
*/
proto.reachy.part.head.NeckGoal.prototype.setDuration = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckGoal} returns this
 */
proto.reachy.part.head.NeckGoal.prototype.clearDuration = function() {
  return this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckGoal.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.NeckOrientation.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.NeckOrientation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.NeckOrientation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckOrientation.toObject = function(includeInstance, msg) {
  var f, obj = {
    q: (f = msg.getQ()) && kinematics_pb.Quaternion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.NeckOrientation}
 */
proto.reachy.part.head.NeckOrientation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.NeckOrientation;
  return proto.reachy.part.head.NeckOrientation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.NeckOrientation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.NeckOrientation}
 */
proto.reachy.part.head.NeckOrientation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new kinematics_pb.Quaternion;
      reader.readMessage(value,kinematics_pb.Quaternion.deserializeBinaryFromReader);
      msg.setQ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.NeckOrientation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.NeckOrientation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.NeckOrientation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckOrientation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQ();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      kinematics_pb.Quaternion.serializeBinaryToWriter
    );
  }
};


/**
 * optional reachy.kinematics.Quaternion q = 1;
 * @return {?proto.reachy.kinematics.Quaternion}
 */
proto.reachy.part.head.NeckOrientation.prototype.getQ = function() {
  return /** @type{?proto.reachy.kinematics.Quaternion} */ (
    jspb.Message.getWrapperField(this, kinematics_pb.Quaternion, 1));
};


/**
 * @param {?proto.reachy.kinematics.Quaternion|undefined} value
 * @return {!proto.reachy.part.head.NeckOrientation} returns this
*/
proto.reachy.part.head.NeckOrientation.prototype.setQ = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckOrientation} returns this
 */
proto.reachy.part.head.NeckOrientation.prototype.clearQ = function() {
  return this.setQ(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckOrientation.prototype.hasQ = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.NeckFKRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.NeckFKRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.NeckFKRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckFKRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.reachy.part.head.HeadPosition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.NeckFKRequest}
 */
proto.reachy.part.head.NeckFKRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.NeckFKRequest;
  return proto.reachy.part.head.NeckFKRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.NeckFKRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.NeckFKRequest}
 */
proto.reachy.part.head.NeckFKRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.reachy.part.head.HeadPosition;
      reader.readMessage(value,proto.reachy.part.head.HeadPosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.NeckFKRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.NeckFKRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.NeckFKRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckFKRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.reachy.part.head.HeadPosition.serializeBinaryToWriter
    );
  }
};


/**
 * optional HeadPosition position = 2;
 * @return {?proto.reachy.part.head.HeadPosition}
 */
proto.reachy.part.head.NeckFKRequest.prototype.getPosition = function() {
  return /** @type{?proto.reachy.part.head.HeadPosition} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.HeadPosition, 2));
};


/**
 * @param {?proto.reachy.part.head.HeadPosition|undefined} value
 * @return {!proto.reachy.part.head.NeckFKRequest} returns this
*/
proto.reachy.part.head.NeckFKRequest.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckFKRequest} returns this
 */
proto.reachy.part.head.NeckFKRequest.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckFKRequest.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.NeckFKSolution.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.NeckFKSolution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.NeckFKSolution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckFKSolution.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    orientation: (f = msg.getOrientation()) && proto.reachy.part.head.NeckOrientation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.NeckFKSolution}
 */
proto.reachy.part.head.NeckFKSolution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.NeckFKSolution;
  return proto.reachy.part.head.NeckFKSolution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.NeckFKSolution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.NeckFKSolution}
 */
proto.reachy.part.head.NeckFKSolution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.reachy.part.head.NeckOrientation;
      reader.readMessage(value,proto.reachy.part.head.NeckOrientation.deserializeBinaryFromReader);
      msg.setOrientation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.NeckFKSolution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.NeckFKSolution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.NeckFKSolution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckFKSolution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getOrientation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.reachy.part.head.NeckOrientation.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.reachy.part.head.NeckFKSolution.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.reachy.part.head.NeckFKSolution} returns this
 */
proto.reachy.part.head.NeckFKSolution.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional NeckOrientation orientation = 2;
 * @return {?proto.reachy.part.head.NeckOrientation}
 */
proto.reachy.part.head.NeckFKSolution.prototype.getOrientation = function() {
  return /** @type{?proto.reachy.part.head.NeckOrientation} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.NeckOrientation, 2));
};


/**
 * @param {?proto.reachy.part.head.NeckOrientation|undefined} value
 * @return {!proto.reachy.part.head.NeckFKSolution} returns this
*/
proto.reachy.part.head.NeckFKSolution.prototype.setOrientation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckFKSolution} returns this
 */
proto.reachy.part.head.NeckFKSolution.prototype.clearOrientation = function() {
  return this.setOrientation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckFKSolution.prototype.hasOrientation = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.NeckIKRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.NeckIKRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.NeckIKRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckIKRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.reachy.part.head.NeckOrientation.toObject(includeInstance, f),
    q0: (f = msg.getQ0()) && proto.reachy.part.head.NeckPosition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.NeckIKRequest}
 */
proto.reachy.part.head.NeckIKRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.NeckIKRequest;
  return proto.reachy.part.head.NeckIKRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.NeckIKRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.NeckIKRequest}
 */
proto.reachy.part.head.NeckIKRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reachy.part.head.NeckOrientation;
      reader.readMessage(value,proto.reachy.part.head.NeckOrientation.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = new proto.reachy.part.head.NeckPosition;
      reader.readMessage(value,proto.reachy.part.head.NeckPosition.deserializeBinaryFromReader);
      msg.setQ0(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.NeckIKRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.NeckIKRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.NeckIKRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckIKRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.reachy.part.head.NeckOrientation.serializeBinaryToWriter
    );
  }
  f = message.getQ0();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.reachy.part.head.NeckPosition.serializeBinaryToWriter
    );
  }
};


/**
 * optional NeckOrientation target = 1;
 * @return {?proto.reachy.part.head.NeckOrientation}
 */
proto.reachy.part.head.NeckIKRequest.prototype.getTarget = function() {
  return /** @type{?proto.reachy.part.head.NeckOrientation} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.NeckOrientation, 1));
};


/**
 * @param {?proto.reachy.part.head.NeckOrientation|undefined} value
 * @return {!proto.reachy.part.head.NeckIKRequest} returns this
*/
proto.reachy.part.head.NeckIKRequest.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckIKRequest} returns this
 */
proto.reachy.part.head.NeckIKRequest.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckIKRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NeckPosition q0 = 2;
 * @return {?proto.reachy.part.head.NeckPosition}
 */
proto.reachy.part.head.NeckIKRequest.prototype.getQ0 = function() {
  return /** @type{?proto.reachy.part.head.NeckPosition} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.NeckPosition, 2));
};


/**
 * @param {?proto.reachy.part.head.NeckPosition|undefined} value
 * @return {!proto.reachy.part.head.NeckIKRequest} returns this
*/
proto.reachy.part.head.NeckIKRequest.prototype.setQ0 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckIKRequest} returns this
 */
proto.reachy.part.head.NeckIKRequest.prototype.clearQ0 = function() {
  return this.setQ0(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckIKRequest.prototype.hasQ0 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.NeckIKSolution.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.NeckIKSolution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.NeckIKSolution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckIKSolution.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    position: (f = msg.getPosition()) && proto.reachy.part.head.NeckPosition.toObject(includeInstance, f),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.NeckIKSolution}
 */
proto.reachy.part.head.NeckIKSolution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.NeckIKSolution;
  return proto.reachy.part.head.NeckIKSolution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.NeckIKSolution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.NeckIKSolution}
 */
proto.reachy.part.head.NeckIKSolution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.reachy.part.head.NeckPosition;
      reader.readMessage(value,proto.reachy.part.head.NeckPosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.NeckIKSolution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.NeckIKSolution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.NeckIKSolution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.NeckIKSolution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.reachy.part.head.NeckPosition.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.reachy.part.head.NeckIKSolution.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.reachy.part.head.NeckIKSolution} returns this
 */
proto.reachy.part.head.NeckIKSolution.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional NeckPosition position = 2;
 * @return {?proto.reachy.part.head.NeckPosition}
 */
proto.reachy.part.head.NeckIKSolution.prototype.getPosition = function() {
  return /** @type{?proto.reachy.part.head.NeckPosition} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.NeckPosition, 2));
};


/**
 * @param {?proto.reachy.part.head.NeckPosition|undefined} value
 * @return {!proto.reachy.part.head.NeckIKSolution} returns this
*/
proto.reachy.part.head.NeckIKSolution.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckIKSolution} returns this
 */
proto.reachy.part.head.NeckIKSolution.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckIKSolution.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional error.Error error = 3;
 * @return {?proto.error.Error}
 */
proto.reachy.part.head.NeckIKSolution.prototype.getError = function() {
  return /** @type{?proto.error.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 3));
};


/**
 * @param {?proto.error.Error|undefined} value
 * @return {!proto.reachy.part.head.NeckIKSolution} returns this
*/
proto.reachy.part.head.NeckIKSolution.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.NeckIKSolution} returns this
 */
proto.reachy.part.head.NeckIKSolution.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.NeckIKSolution.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.HeadStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.HeadStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.HeadStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadStatus.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.HeadStatus}
 */
proto.reachy.part.head.HeadStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.HeadStatus;
  return proto.reachy.part.head.HeadStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.HeadStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.HeadStatus}
 */
proto.reachy.part.head.HeadStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.HeadStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.HeadStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.HeadStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.HeadTargetPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.HeadTargetPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.HeadTargetPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadTargetPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && part_pb.PartId.toObject(includeInstance, f),
    point: (f = msg.getPoint()) && kinematics_pb.Point.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.HeadTargetPoint}
 */
proto.reachy.part.head.HeadTargetPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.HeadTargetPoint;
  return proto.reachy.part.head.HeadTargetPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.HeadTargetPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.HeadTargetPoint}
 */
proto.reachy.part.head.HeadTargetPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new part_pb.PartId;
      reader.readMessage(value,part_pb.PartId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new kinematics_pb.Point;
      reader.readMessage(value,kinematics_pb.Point.deserializeBinaryFromReader);
      msg.setPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.HeadTargetPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.HeadTargetPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.HeadTargetPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.HeadTargetPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      part_pb.PartId.serializeBinaryToWriter
    );
  }
  f = message.getPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      kinematics_pb.Point.serializeBinaryToWriter
    );
  }
};


/**
 * optional reachy.part.PartId id = 1;
 * @return {?proto.reachy.part.PartId}
 */
proto.reachy.part.head.HeadTargetPoint.prototype.getId = function() {
  return /** @type{?proto.reachy.part.PartId} */ (
    jspb.Message.getWrapperField(this, part_pb.PartId, 1));
};


/**
 * @param {?proto.reachy.part.PartId|undefined} value
 * @return {!proto.reachy.part.head.HeadTargetPoint} returns this
*/
proto.reachy.part.head.HeadTargetPoint.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadTargetPoint} returns this
 */
proto.reachy.part.head.HeadTargetPoint.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadTargetPoint.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional reachy.kinematics.Point point = 2;
 * @return {?proto.reachy.kinematics.Point}
 */
proto.reachy.part.head.HeadTargetPoint.prototype.getPoint = function() {
  return /** @type{?proto.reachy.kinematics.Point} */ (
    jspb.Message.getWrapperField(this, kinematics_pb.Point, 2));
};


/**
 * @param {?proto.reachy.kinematics.Point|undefined} value
 * @return {!proto.reachy.part.head.HeadTargetPoint} returns this
*/
proto.reachy.part.head.HeadTargetPoint.prototype.setPoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.HeadTargetPoint} returns this
 */
proto.reachy.part.head.HeadTargetPoint.prototype.clearPoint = function() {
  return this.setPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.HeadTargetPoint.prototype.hasPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.SpeedLimitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.SpeedLimitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.SpeedLimitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.SpeedLimitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && part_pb.PartId.toObject(includeInstance, f),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.SpeedLimitRequest}
 */
proto.reachy.part.head.SpeedLimitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.SpeedLimitRequest;
  return proto.reachy.part.head.SpeedLimitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.SpeedLimitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.SpeedLimitRequest}
 */
proto.reachy.part.head.SpeedLimitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new part_pb.PartId;
      reader.readMessage(value,part_pb.PartId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.reachy.part.head.SpeedLimit} */ (reader.readEnum());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.SpeedLimitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.SpeedLimitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.SpeedLimitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.SpeedLimitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      part_pb.PartId.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional reachy.part.PartId id = 1;
 * @return {?proto.reachy.part.PartId}
 */
proto.reachy.part.head.SpeedLimitRequest.prototype.getId = function() {
  return /** @type{?proto.reachy.part.PartId} */ (
    jspb.Message.getWrapperField(this, part_pb.PartId, 1));
};


/**
 * @param {?proto.reachy.part.PartId|undefined} value
 * @return {!proto.reachy.part.head.SpeedLimitRequest} returns this
*/
proto.reachy.part.head.SpeedLimitRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.SpeedLimitRequest} returns this
 */
proto.reachy.part.head.SpeedLimitRequest.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.SpeedLimitRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SpeedLimit limit = 2;
 * @return {!proto.reachy.part.head.SpeedLimit}
 */
proto.reachy.part.head.SpeedLimitRequest.prototype.getLimit = function() {
  return /** @type {!proto.reachy.part.head.SpeedLimit} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.reachy.part.head.SpeedLimit} value
 * @return {!proto.reachy.part.head.SpeedLimitRequest} returns this
 */
proto.reachy.part.head.SpeedLimitRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.JointLimits.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.JointLimits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.JointLimits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.JointLimits.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    max: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.JointLimits}
 */
proto.reachy.part.head.JointLimits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.JointLimits;
  return proto.reachy.part.head.JointLimits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.JointLimits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.JointLimits}
 */
proto.reachy.part.head.JointLimits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.JointLimits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.JointLimits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.JointLimits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.JointLimits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMin();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getMax();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float min = 1;
 * @return {number}
 */
proto.reachy.part.head.JointLimits.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.part.head.JointLimits} returns this
 */
proto.reachy.part.head.JointLimits.prototype.setMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float max = 2;
 * @return {number}
 */
proto.reachy.part.head.JointLimits.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.part.head.JointLimits} returns this
 */
proto.reachy.part.head.JointLimits.prototype.setMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.JointsLimits.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.JointsLimits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.JointsLimits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.JointsLimits.toObject = function(includeInstance, msg) {
  var f, obj = {
    neckRoll: (f = msg.getNeckRoll()) && proto.reachy.part.head.JointLimits.toObject(includeInstance, f),
    neckPitch: (f = msg.getNeckPitch()) && proto.reachy.part.head.JointLimits.toObject(includeInstance, f),
    neckYaw: (f = msg.getNeckYaw()) && proto.reachy.part.head.JointLimits.toObject(includeInstance, f),
    lAntenna: (f = msg.getLAntenna()) && proto.reachy.part.head.JointLimits.toObject(includeInstance, f),
    rAntenna: (f = msg.getRAntenna()) && proto.reachy.part.head.JointLimits.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.JointsLimits}
 */
proto.reachy.part.head.JointsLimits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.JointsLimits;
  return proto.reachy.part.head.JointsLimits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.JointsLimits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.JointsLimits}
 */
proto.reachy.part.head.JointsLimits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reachy.part.head.JointLimits;
      reader.readMessage(value,proto.reachy.part.head.JointLimits.deserializeBinaryFromReader);
      msg.setNeckRoll(value);
      break;
    case 2:
      var value = new proto.reachy.part.head.JointLimits;
      reader.readMessage(value,proto.reachy.part.head.JointLimits.deserializeBinaryFromReader);
      msg.setNeckPitch(value);
      break;
    case 3:
      var value = new proto.reachy.part.head.JointLimits;
      reader.readMessage(value,proto.reachy.part.head.JointLimits.deserializeBinaryFromReader);
      msg.setNeckYaw(value);
      break;
    case 4:
      var value = new proto.reachy.part.head.JointLimits;
      reader.readMessage(value,proto.reachy.part.head.JointLimits.deserializeBinaryFromReader);
      msg.setLAntenna(value);
      break;
    case 5:
      var value = new proto.reachy.part.head.JointLimits;
      reader.readMessage(value,proto.reachy.part.head.JointLimits.deserializeBinaryFromReader);
      msg.setRAntenna(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.JointsLimits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.JointsLimits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.JointsLimits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.JointsLimits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNeckRoll();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.reachy.part.head.JointLimits.serializeBinaryToWriter
    );
  }
  f = message.getNeckPitch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.reachy.part.head.JointLimits.serializeBinaryToWriter
    );
  }
  f = message.getNeckYaw();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.reachy.part.head.JointLimits.serializeBinaryToWriter
    );
  }
  f = message.getLAntenna();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.reachy.part.head.JointLimits.serializeBinaryToWriter
    );
  }
  f = message.getRAntenna();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.reachy.part.head.JointLimits.serializeBinaryToWriter
    );
  }
};


/**
 * optional JointLimits neck_roll = 1;
 * @return {?proto.reachy.part.head.JointLimits}
 */
proto.reachy.part.head.JointsLimits.prototype.getNeckRoll = function() {
  return /** @type{?proto.reachy.part.head.JointLimits} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.JointLimits, 1));
};


/**
 * @param {?proto.reachy.part.head.JointLimits|undefined} value
 * @return {!proto.reachy.part.head.JointsLimits} returns this
*/
proto.reachy.part.head.JointsLimits.prototype.setNeckRoll = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.JointsLimits} returns this
 */
proto.reachy.part.head.JointsLimits.prototype.clearNeckRoll = function() {
  return this.setNeckRoll(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.JointsLimits.prototype.hasNeckRoll = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional JointLimits neck_pitch = 2;
 * @return {?proto.reachy.part.head.JointLimits}
 */
proto.reachy.part.head.JointsLimits.prototype.getNeckPitch = function() {
  return /** @type{?proto.reachy.part.head.JointLimits} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.JointLimits, 2));
};


/**
 * @param {?proto.reachy.part.head.JointLimits|undefined} value
 * @return {!proto.reachy.part.head.JointsLimits} returns this
*/
proto.reachy.part.head.JointsLimits.prototype.setNeckPitch = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.JointsLimits} returns this
 */
proto.reachy.part.head.JointsLimits.prototype.clearNeckPitch = function() {
  return this.setNeckPitch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.JointsLimits.prototype.hasNeckPitch = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional JointLimits neck_yaw = 3;
 * @return {?proto.reachy.part.head.JointLimits}
 */
proto.reachy.part.head.JointsLimits.prototype.getNeckYaw = function() {
  return /** @type{?proto.reachy.part.head.JointLimits} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.JointLimits, 3));
};


/**
 * @param {?proto.reachy.part.head.JointLimits|undefined} value
 * @return {!proto.reachy.part.head.JointsLimits} returns this
*/
proto.reachy.part.head.JointsLimits.prototype.setNeckYaw = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.JointsLimits} returns this
 */
proto.reachy.part.head.JointsLimits.prototype.clearNeckYaw = function() {
  return this.setNeckYaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.JointsLimits.prototype.hasNeckYaw = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional JointLimits l_antenna = 4;
 * @return {?proto.reachy.part.head.JointLimits}
 */
proto.reachy.part.head.JointsLimits.prototype.getLAntenna = function() {
  return /** @type{?proto.reachy.part.head.JointLimits} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.JointLimits, 4));
};


/**
 * @param {?proto.reachy.part.head.JointLimits|undefined} value
 * @return {!proto.reachy.part.head.JointsLimits} returns this
*/
proto.reachy.part.head.JointsLimits.prototype.setLAntenna = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.JointsLimits} returns this
 */
proto.reachy.part.head.JointsLimits.prototype.clearLAntenna = function() {
  return this.setLAntenna(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.JointsLimits.prototype.hasLAntenna = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional JointLimits r_antenna = 5;
 * @return {?proto.reachy.part.head.JointLimits}
 */
proto.reachy.part.head.JointsLimits.prototype.getRAntenna = function() {
  return /** @type{?proto.reachy.part.head.JointLimits} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.JointLimits, 5));
};


/**
 * @param {?proto.reachy.part.head.JointLimits|undefined} value
 * @return {!proto.reachy.part.head.JointsLimits} returns this
*/
proto.reachy.part.head.JointsLimits.prototype.setRAntenna = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.JointsLimits} returns this
 */
proto.reachy.part.head.JointsLimits.prototype.clearRAntenna = function() {
  return this.setRAntenna(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.JointsLimits.prototype.hasRAntenna = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.Temperatures.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.Temperatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.Temperatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.Temperatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    motor: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    driver: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.Temperatures}
 */
proto.reachy.part.head.Temperatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.Temperatures;
  return proto.reachy.part.head.Temperatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.Temperatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.Temperatures}
 */
proto.reachy.part.head.Temperatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMotor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDriver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.Temperatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.Temperatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.Temperatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.Temperatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMotor();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getDriver();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float motor = 1;
 * @return {number}
 */
proto.reachy.part.head.Temperatures.prototype.getMotor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.part.head.Temperatures} returns this
 */
proto.reachy.part.head.Temperatures.prototype.setMotor = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float driver = 2;
 * @return {number}
 */
proto.reachy.part.head.Temperatures.prototype.getDriver = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.part.head.Temperatures} returns this
 */
proto.reachy.part.head.Temperatures.prototype.setDriver = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.head.ArmTemperatures.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.head.ArmTemperatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.head.ArmTemperatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.ArmTemperatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    neckMotor1: (f = msg.getNeckMotor1()) && proto.reachy.part.head.Temperatures.toObject(includeInstance, f),
    neckMotor2: (f = msg.getNeckMotor2()) && proto.reachy.part.head.Temperatures.toObject(includeInstance, f),
    neckMotor3: (f = msg.getNeckMotor3()) && proto.reachy.part.head.Temperatures.toObject(includeInstance, f),
    lAntenna: (f = msg.getLAntenna()) && proto.reachy.part.head.Temperatures.toObject(includeInstance, f),
    rAntenna: (f = msg.getRAntenna()) && proto.reachy.part.head.Temperatures.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.head.ArmTemperatures}
 */
proto.reachy.part.head.ArmTemperatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.head.ArmTemperatures;
  return proto.reachy.part.head.ArmTemperatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.head.ArmTemperatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.head.ArmTemperatures}
 */
proto.reachy.part.head.ArmTemperatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reachy.part.head.Temperatures;
      reader.readMessage(value,proto.reachy.part.head.Temperatures.deserializeBinaryFromReader);
      msg.setNeckMotor1(value);
      break;
    case 2:
      var value = new proto.reachy.part.head.Temperatures;
      reader.readMessage(value,proto.reachy.part.head.Temperatures.deserializeBinaryFromReader);
      msg.setNeckMotor2(value);
      break;
    case 3:
      var value = new proto.reachy.part.head.Temperatures;
      reader.readMessage(value,proto.reachy.part.head.Temperatures.deserializeBinaryFromReader);
      msg.setNeckMotor3(value);
      break;
    case 4:
      var value = new proto.reachy.part.head.Temperatures;
      reader.readMessage(value,proto.reachy.part.head.Temperatures.deserializeBinaryFromReader);
      msg.setLAntenna(value);
      break;
    case 5:
      var value = new proto.reachy.part.head.Temperatures;
      reader.readMessage(value,proto.reachy.part.head.Temperatures.deserializeBinaryFromReader);
      msg.setRAntenna(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.head.ArmTemperatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.head.ArmTemperatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.head.ArmTemperatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.head.ArmTemperatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNeckMotor1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.reachy.part.head.Temperatures.serializeBinaryToWriter
    );
  }
  f = message.getNeckMotor2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.reachy.part.head.Temperatures.serializeBinaryToWriter
    );
  }
  f = message.getNeckMotor3();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.reachy.part.head.Temperatures.serializeBinaryToWriter
    );
  }
  f = message.getLAntenna();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.reachy.part.head.Temperatures.serializeBinaryToWriter
    );
  }
  f = message.getRAntenna();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.reachy.part.head.Temperatures.serializeBinaryToWriter
    );
  }
};


/**
 * optional Temperatures neck_motor_1 = 1;
 * @return {?proto.reachy.part.head.Temperatures}
 */
proto.reachy.part.head.ArmTemperatures.prototype.getNeckMotor1 = function() {
  return /** @type{?proto.reachy.part.head.Temperatures} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.Temperatures, 1));
};


/**
 * @param {?proto.reachy.part.head.Temperatures|undefined} value
 * @return {!proto.reachy.part.head.ArmTemperatures} returns this
*/
proto.reachy.part.head.ArmTemperatures.prototype.setNeckMotor1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.ArmTemperatures} returns this
 */
proto.reachy.part.head.ArmTemperatures.prototype.clearNeckMotor1 = function() {
  return this.setNeckMotor1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.ArmTemperatures.prototype.hasNeckMotor1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Temperatures neck_motor_2 = 2;
 * @return {?proto.reachy.part.head.Temperatures}
 */
proto.reachy.part.head.ArmTemperatures.prototype.getNeckMotor2 = function() {
  return /** @type{?proto.reachy.part.head.Temperatures} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.Temperatures, 2));
};


/**
 * @param {?proto.reachy.part.head.Temperatures|undefined} value
 * @return {!proto.reachy.part.head.ArmTemperatures} returns this
*/
proto.reachy.part.head.ArmTemperatures.prototype.setNeckMotor2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.ArmTemperatures} returns this
 */
proto.reachy.part.head.ArmTemperatures.prototype.clearNeckMotor2 = function() {
  return this.setNeckMotor2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.ArmTemperatures.prototype.hasNeckMotor2 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Temperatures neck_motor_3 = 3;
 * @return {?proto.reachy.part.head.Temperatures}
 */
proto.reachy.part.head.ArmTemperatures.prototype.getNeckMotor3 = function() {
  return /** @type{?proto.reachy.part.head.Temperatures} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.Temperatures, 3));
};


/**
 * @param {?proto.reachy.part.head.Temperatures|undefined} value
 * @return {!proto.reachy.part.head.ArmTemperatures} returns this
*/
proto.reachy.part.head.ArmTemperatures.prototype.setNeckMotor3 = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.ArmTemperatures} returns this
 */
proto.reachy.part.head.ArmTemperatures.prototype.clearNeckMotor3 = function() {
  return this.setNeckMotor3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.ArmTemperatures.prototype.hasNeckMotor3 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Temperatures l_antenna = 4;
 * @return {?proto.reachy.part.head.Temperatures}
 */
proto.reachy.part.head.ArmTemperatures.prototype.getLAntenna = function() {
  return /** @type{?proto.reachy.part.head.Temperatures} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.Temperatures, 4));
};


/**
 * @param {?proto.reachy.part.head.Temperatures|undefined} value
 * @return {!proto.reachy.part.head.ArmTemperatures} returns this
*/
proto.reachy.part.head.ArmTemperatures.prototype.setLAntenna = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.ArmTemperatures} returns this
 */
proto.reachy.part.head.ArmTemperatures.prototype.clearLAntenna = function() {
  return this.setLAntenna(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.ArmTemperatures.prototype.hasLAntenna = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Temperatures r_antenna = 5;
 * @return {?proto.reachy.part.head.Temperatures}
 */
proto.reachy.part.head.ArmTemperatures.prototype.getRAntenna = function() {
  return /** @type{?proto.reachy.part.head.Temperatures} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.head.Temperatures, 5));
};


/**
 * @param {?proto.reachy.part.head.Temperatures|undefined} value
 * @return {!proto.reachy.part.head.ArmTemperatures} returns this
*/
proto.reachy.part.head.ArmTemperatures.prototype.setRAntenna = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.head.ArmTemperatures} returns this
 */
proto.reachy.part.head.ArmTemperatures.prototype.clearRAntenna = function() {
  return this.setRAntenna(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.head.ArmTemperatures.prototype.hasRAntenna = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.reachy.part.head.SpeedLimit = {
  NO_LIMIT: 0,
  FAST: 1,
  NORMAL: 2,
  SLOW: 3
};

goog.object.extend(exports, proto.reachy.part.head);
