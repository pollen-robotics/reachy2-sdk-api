// source: video.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var component_pb = require('./component_pb.js');
goog.object.extend(proto, component_pb);
goog.exportSymbol('proto.component.video.DepthCamera', null, global);
goog.exportSymbol('proto.component.video.DepthCameraInfo', null, global);
goog.exportSymbol('proto.component.video.Frame', null, global);
goog.exportSymbol('proto.component.video.ListOfDepthCameraInfo', null, global);
goog.exportSymbol('proto.component.video.ListOfStereoCameraInfo', null, global);
goog.exportSymbol('proto.component.video.StereoCamera', null, global);
goog.exportSymbol('proto.component.video.StereoCameraInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.video.StereoCamera = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.video.StereoCamera, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.video.StereoCamera.displayName = 'proto.component.video.StereoCamera';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.video.DepthCamera = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.video.DepthCamera, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.video.DepthCamera.displayName = 'proto.component.video.DepthCamera';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.video.StereoCameraInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.component.video.StereoCameraInfo.repeatedFields_, null);
};
goog.inherits(proto.component.video.StereoCameraInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.video.StereoCameraInfo.displayName = 'proto.component.video.StereoCameraInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.video.ListOfStereoCameraInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.component.video.ListOfStereoCameraInfo.repeatedFields_, null);
};
goog.inherits(proto.component.video.ListOfStereoCameraInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.video.ListOfStereoCameraInfo.displayName = 'proto.component.video.ListOfStereoCameraInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.video.DepthCameraInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.component.video.DepthCameraInfo.repeatedFields_, null);
};
goog.inherits(proto.component.video.DepthCameraInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.video.DepthCameraInfo.displayName = 'proto.component.video.DepthCameraInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.video.ListOfDepthCameraInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.component.video.ListOfDepthCameraInfo.repeatedFields_, null);
};
goog.inherits(proto.component.video.ListOfDepthCameraInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.video.ListOfDepthCameraInfo.displayName = 'proto.component.video.ListOfDepthCameraInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.video.Frame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.video.Frame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.video.Frame.displayName = 'proto.component.video.Frame';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.video.StereoCamera.prototype.toObject = function(opt_includeInstance) {
  return proto.component.video.StereoCamera.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.video.StereoCamera} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.video.StereoCamera.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.video.StereoCamera}
 */
proto.component.video.StereoCamera.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.video.StereoCamera;
  return proto.component.video.StereoCamera.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.video.StereoCamera} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.video.StereoCamera}
 */
proto.component.video.StereoCamera.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.video.StereoCamera.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.video.StereoCamera.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.video.StereoCamera} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.video.StereoCamera.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.video.DepthCamera.prototype.toObject = function(opt_includeInstance) {
  return proto.component.video.DepthCamera.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.video.DepthCamera} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.video.DepthCamera.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.video.DepthCamera}
 */
proto.component.video.DepthCamera.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.video.DepthCamera;
  return proto.component.video.DepthCamera.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.video.DepthCamera} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.video.DepthCamera}
 */
proto.component.video.DepthCamera.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.video.DepthCamera.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.video.DepthCamera.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.video.DepthCamera} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.video.DepthCamera.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.component.video.StereoCameraInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.video.StereoCameraInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.component.video.StereoCameraInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.video.StereoCameraInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.video.StereoCameraInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && component_pb.ComponentId.toObject(includeInstance, f),
    intrinsicParametersList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.video.StereoCameraInfo}
 */
proto.component.video.StereoCameraInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.video.StereoCameraInfo;
  return proto.component.video.StereoCameraInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.video.StereoCameraInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.video.StereoCameraInfo}
 */
proto.component.video.StereoCameraInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new component_pb.ComponentId;
      reader.readMessage(value,component_pb.ComponentId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setIntrinsicParametersList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.video.StereoCameraInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.video.StereoCameraInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.video.StereoCameraInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.video.StereoCameraInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      component_pb.ComponentId.serializeBinaryToWriter
    );
  }
  f = message.getIntrinsicParametersList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
};


/**
 * optional component.ComponentId id = 1;
 * @return {?proto.component.ComponentId}
 */
proto.component.video.StereoCameraInfo.prototype.getId = function() {
  return /** @type{?proto.component.ComponentId} */ (
    jspb.Message.getWrapperField(this, component_pb.ComponentId, 1));
};


/**
 * @param {?proto.component.ComponentId|undefined} value
 * @return {!proto.component.video.StereoCameraInfo} returns this
*/
proto.component.video.StereoCameraInfo.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.component.video.StereoCameraInfo} returns this
 */
proto.component.video.StereoCameraInfo.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.component.video.StereoCameraInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated float intrinsic_parameters = 2;
 * @return {!Array<number>}
 */
proto.component.video.StereoCameraInfo.prototype.getIntrinsicParametersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.component.video.StereoCameraInfo} returns this
 */
proto.component.video.StereoCameraInfo.prototype.setIntrinsicParametersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.component.video.StereoCameraInfo} returns this
 */
proto.component.video.StereoCameraInfo.prototype.addIntrinsicParameters = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.component.video.StereoCameraInfo} returns this
 */
proto.component.video.StereoCameraInfo.prototype.clearIntrinsicParametersList = function() {
  return this.setIntrinsicParametersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.component.video.ListOfStereoCameraInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.video.ListOfStereoCameraInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.component.video.ListOfStereoCameraInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.video.ListOfStereoCameraInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.video.ListOfStereoCameraInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    stereoCameraInfoList: jspb.Message.toObjectList(msg.getStereoCameraInfoList(),
    proto.component.video.StereoCameraInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.video.ListOfStereoCameraInfo}
 */
proto.component.video.ListOfStereoCameraInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.video.ListOfStereoCameraInfo;
  return proto.component.video.ListOfStereoCameraInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.video.ListOfStereoCameraInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.video.ListOfStereoCameraInfo}
 */
proto.component.video.ListOfStereoCameraInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.component.video.StereoCameraInfo;
      reader.readMessage(value,proto.component.video.StereoCameraInfo.deserializeBinaryFromReader);
      msg.addStereoCameraInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.video.ListOfStereoCameraInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.video.ListOfStereoCameraInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.video.ListOfStereoCameraInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.video.ListOfStereoCameraInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStereoCameraInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.component.video.StereoCameraInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StereoCameraInfo stereo_camera_info = 1;
 * @return {!Array<!proto.component.video.StereoCameraInfo>}
 */
proto.component.video.ListOfStereoCameraInfo.prototype.getStereoCameraInfoList = function() {
  return /** @type{!Array<!proto.component.video.StereoCameraInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.component.video.StereoCameraInfo, 1));
};


/**
 * @param {!Array<!proto.component.video.StereoCameraInfo>} value
 * @return {!proto.component.video.ListOfStereoCameraInfo} returns this
*/
proto.component.video.ListOfStereoCameraInfo.prototype.setStereoCameraInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.component.video.StereoCameraInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.component.video.StereoCameraInfo}
 */
proto.component.video.ListOfStereoCameraInfo.prototype.addStereoCameraInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.component.video.StereoCameraInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.component.video.ListOfStereoCameraInfo} returns this
 */
proto.component.video.ListOfStereoCameraInfo.prototype.clearStereoCameraInfoList = function() {
  return this.setStereoCameraInfoList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.component.video.DepthCameraInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.video.DepthCameraInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.component.video.DepthCameraInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.video.DepthCameraInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.video.DepthCameraInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && component_pb.ComponentId.toObject(includeInstance, f),
    intrinsicParametersList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.video.DepthCameraInfo}
 */
proto.component.video.DepthCameraInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.video.DepthCameraInfo;
  return proto.component.video.DepthCameraInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.video.DepthCameraInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.video.DepthCameraInfo}
 */
proto.component.video.DepthCameraInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new component_pb.ComponentId;
      reader.readMessage(value,component_pb.ComponentId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setIntrinsicParametersList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.video.DepthCameraInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.video.DepthCameraInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.video.DepthCameraInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.video.DepthCameraInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      component_pb.ComponentId.serializeBinaryToWriter
    );
  }
  f = message.getIntrinsicParametersList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
};


/**
 * optional component.ComponentId id = 1;
 * @return {?proto.component.ComponentId}
 */
proto.component.video.DepthCameraInfo.prototype.getId = function() {
  return /** @type{?proto.component.ComponentId} */ (
    jspb.Message.getWrapperField(this, component_pb.ComponentId, 1));
};


/**
 * @param {?proto.component.ComponentId|undefined} value
 * @return {!proto.component.video.DepthCameraInfo} returns this
*/
proto.component.video.DepthCameraInfo.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.component.video.DepthCameraInfo} returns this
 */
proto.component.video.DepthCameraInfo.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.component.video.DepthCameraInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated float intrinsic_parameters = 2;
 * @return {!Array<number>}
 */
proto.component.video.DepthCameraInfo.prototype.getIntrinsicParametersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.component.video.DepthCameraInfo} returns this
 */
proto.component.video.DepthCameraInfo.prototype.setIntrinsicParametersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.component.video.DepthCameraInfo} returns this
 */
proto.component.video.DepthCameraInfo.prototype.addIntrinsicParameters = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.component.video.DepthCameraInfo} returns this
 */
proto.component.video.DepthCameraInfo.prototype.clearIntrinsicParametersList = function() {
  return this.setIntrinsicParametersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.component.video.ListOfDepthCameraInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.video.ListOfDepthCameraInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.component.video.ListOfDepthCameraInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.video.ListOfDepthCameraInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.video.ListOfDepthCameraInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    stereoCameraInfoList: jspb.Message.toObjectList(msg.getStereoCameraInfoList(),
    proto.component.video.DepthCameraInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.video.ListOfDepthCameraInfo}
 */
proto.component.video.ListOfDepthCameraInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.video.ListOfDepthCameraInfo;
  return proto.component.video.ListOfDepthCameraInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.video.ListOfDepthCameraInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.video.ListOfDepthCameraInfo}
 */
proto.component.video.ListOfDepthCameraInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.component.video.DepthCameraInfo;
      reader.readMessage(value,proto.component.video.DepthCameraInfo.deserializeBinaryFromReader);
      msg.addStereoCameraInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.video.ListOfDepthCameraInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.video.ListOfDepthCameraInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.video.ListOfDepthCameraInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.video.ListOfDepthCameraInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStereoCameraInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.component.video.DepthCameraInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DepthCameraInfo stereo_camera_info = 1;
 * @return {!Array<!proto.component.video.DepthCameraInfo>}
 */
proto.component.video.ListOfDepthCameraInfo.prototype.getStereoCameraInfoList = function() {
  return /** @type{!Array<!proto.component.video.DepthCameraInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.component.video.DepthCameraInfo, 1));
};


/**
 * @param {!Array<!proto.component.video.DepthCameraInfo>} value
 * @return {!proto.component.video.ListOfDepthCameraInfo} returns this
*/
proto.component.video.ListOfDepthCameraInfo.prototype.setStereoCameraInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.component.video.DepthCameraInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.component.video.DepthCameraInfo}
 */
proto.component.video.ListOfDepthCameraInfo.prototype.addStereoCameraInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.component.video.DepthCameraInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.component.video.ListOfDepthCameraInfo} returns this
 */
proto.component.video.ListOfDepthCameraInfo.prototype.clearStereoCameraInfoList = function() {
  return this.setStereoCameraInfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.video.Frame.prototype.toObject = function(opt_includeInstance) {
  return proto.component.video.Frame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.video.Frame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.video.Frame.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.video.Frame}
 */
proto.component.video.Frame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.video.Frame;
  return proto.component.video.Frame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.video.Frame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.video.Frame}
 */
proto.component.video.Frame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.video.Frame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.video.Frame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.video.Frame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.video.Frame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.component.video);
