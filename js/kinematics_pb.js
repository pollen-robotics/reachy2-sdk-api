// source: kinematics.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.reachy.kinematics.ExtEulerAngles', null, global);
goog.exportSymbol('proto.reachy.kinematics.ExtEulerAnglesTolerances', null, global);
goog.exportSymbol('proto.reachy.kinematics.Matrix3x3', null, global);
goog.exportSymbol('proto.reachy.kinematics.Matrix4x4', null, global);
goog.exportSymbol('proto.reachy.kinematics.Point', null, global);
goog.exportSymbol('proto.reachy.kinematics.PointDistanceTolerances', null, global);
goog.exportSymbol('proto.reachy.kinematics.Quaternion', null, global);
goog.exportSymbol('proto.reachy.kinematics.Rotation3D', null, global);
goog.exportSymbol('proto.reachy.kinematics.Rotation3D.RotationCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.kinematics.Matrix4x4 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.reachy.kinematics.Matrix4x4.repeatedFields_, null);
};
goog.inherits(proto.reachy.kinematics.Matrix4x4, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.kinematics.Matrix4x4.displayName = 'proto.reachy.kinematics.Matrix4x4';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.kinematics.Matrix3x3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.reachy.kinematics.Matrix3x3.repeatedFields_, null);
};
goog.inherits(proto.reachy.kinematics.Matrix3x3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.kinematics.Matrix3x3.displayName = 'proto.reachy.kinematics.Matrix3x3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.kinematics.Quaternion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.kinematics.Quaternion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.kinematics.Quaternion.displayName = 'proto.reachy.kinematics.Quaternion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.kinematics.Rotation3D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.reachy.kinematics.Rotation3D.oneofGroups_);
};
goog.inherits(proto.reachy.kinematics.Rotation3D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.kinematics.Rotation3D.displayName = 'proto.reachy.kinematics.Rotation3D';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.kinematics.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.kinematics.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.kinematics.Point.displayName = 'proto.reachy.kinematics.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.kinematics.ExtEulerAngles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.kinematics.ExtEulerAngles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.kinematics.ExtEulerAngles.displayName = 'proto.reachy.kinematics.ExtEulerAngles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.kinematics.PointDistanceTolerances = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.kinematics.PointDistanceTolerances, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.kinematics.PointDistanceTolerances.displayName = 'proto.reachy.kinematics.PointDistanceTolerances';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.kinematics.ExtEulerAnglesTolerances = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.kinematics.ExtEulerAnglesTolerances, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.kinematics.ExtEulerAnglesTolerances.displayName = 'proto.reachy.kinematics.ExtEulerAnglesTolerances';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.reachy.kinematics.Matrix4x4.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.kinematics.Matrix4x4.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.kinematics.Matrix4x4.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.kinematics.Matrix4x4} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.Matrix4x4.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.kinematics.Matrix4x4}
 */
proto.reachy.kinematics.Matrix4x4.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.kinematics.Matrix4x4;
  return proto.reachy.kinematics.Matrix4x4.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.kinematics.Matrix4x4} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.kinematics.Matrix4x4}
 */
proto.reachy.kinematics.Matrix4x4.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setDataList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.kinematics.Matrix4x4.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.kinematics.Matrix4x4.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.kinematics.Matrix4x4} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.Matrix4x4.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double data = 1;
 * @return {!Array<number>}
 */
proto.reachy.kinematics.Matrix4x4.prototype.getDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.reachy.kinematics.Matrix4x4} returns this
 */
proto.reachy.kinematics.Matrix4x4.prototype.setDataList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.reachy.kinematics.Matrix4x4} returns this
 */
proto.reachy.kinematics.Matrix4x4.prototype.addData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.reachy.kinematics.Matrix4x4} returns this
 */
proto.reachy.kinematics.Matrix4x4.prototype.clearDataList = function() {
  return this.setDataList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.reachy.kinematics.Matrix3x3.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.kinematics.Matrix3x3.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.kinematics.Matrix3x3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.kinematics.Matrix3x3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.Matrix3x3.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.kinematics.Matrix3x3}
 */
proto.reachy.kinematics.Matrix3x3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.kinematics.Matrix3x3;
  return proto.reachy.kinematics.Matrix3x3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.kinematics.Matrix3x3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.kinematics.Matrix3x3}
 */
proto.reachy.kinematics.Matrix3x3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setDataList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.kinematics.Matrix3x3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.kinematics.Matrix3x3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.kinematics.Matrix3x3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.Matrix3x3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double data = 1;
 * @return {!Array<number>}
 */
proto.reachy.kinematics.Matrix3x3.prototype.getDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.reachy.kinematics.Matrix3x3} returns this
 */
proto.reachy.kinematics.Matrix3x3.prototype.setDataList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.reachy.kinematics.Matrix3x3} returns this
 */
proto.reachy.kinematics.Matrix3x3.prototype.addData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.reachy.kinematics.Matrix3x3} returns this
 */
proto.reachy.kinematics.Matrix3x3.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.kinematics.Quaternion.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.kinematics.Quaternion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.kinematics.Quaternion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.Quaternion.toObject = function(includeInstance, msg) {
  var f, obj = {
    w: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.kinematics.Quaternion}
 */
proto.reachy.kinematics.Quaternion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.kinematics.Quaternion;
  return proto.reachy.kinematics.Quaternion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.kinematics.Quaternion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.kinematics.Quaternion}
 */
proto.reachy.kinematics.Quaternion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setW(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.kinematics.Quaternion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.kinematics.Quaternion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.kinematics.Quaternion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.Quaternion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getW();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double w = 1;
 * @return {number}
 */
proto.reachy.kinematics.Quaternion.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.Quaternion} returns this
 */
proto.reachy.kinematics.Quaternion.prototype.setW = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double x = 2;
 * @return {number}
 */
proto.reachy.kinematics.Quaternion.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.Quaternion} returns this
 */
proto.reachy.kinematics.Quaternion.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double y = 3;
 * @return {number}
 */
proto.reachy.kinematics.Quaternion.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.Quaternion} returns this
 */
proto.reachy.kinematics.Quaternion.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double z = 4;
 * @return {number}
 */
proto.reachy.kinematics.Quaternion.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.Quaternion} returns this
 */
proto.reachy.kinematics.Quaternion.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.reachy.kinematics.Rotation3D.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.reachy.kinematics.Rotation3D.RotationCase = {
  ROTATION_NOT_SET: 0,
  Q: 1,
  RPY: 2,
  MATRIX: 3
};

/**
 * @return {proto.reachy.kinematics.Rotation3D.RotationCase}
 */
proto.reachy.kinematics.Rotation3D.prototype.getRotationCase = function() {
  return /** @type {proto.reachy.kinematics.Rotation3D.RotationCase} */(jspb.Message.computeOneofCase(this, proto.reachy.kinematics.Rotation3D.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.kinematics.Rotation3D.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.kinematics.Rotation3D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.kinematics.Rotation3D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.Rotation3D.toObject = function(includeInstance, msg) {
  var f, obj = {
    q: (f = msg.getQ()) && proto.reachy.kinematics.Quaternion.toObject(includeInstance, f),
    rpy: (f = msg.getRpy()) && proto.reachy.kinematics.ExtEulerAngles.toObject(includeInstance, f),
    matrix: (f = msg.getMatrix()) && proto.reachy.kinematics.Matrix3x3.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.kinematics.Rotation3D}
 */
proto.reachy.kinematics.Rotation3D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.kinematics.Rotation3D;
  return proto.reachy.kinematics.Rotation3D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.kinematics.Rotation3D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.kinematics.Rotation3D}
 */
proto.reachy.kinematics.Rotation3D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reachy.kinematics.Quaternion;
      reader.readMessage(value,proto.reachy.kinematics.Quaternion.deserializeBinaryFromReader);
      msg.setQ(value);
      break;
    case 2:
      var value = new proto.reachy.kinematics.ExtEulerAngles;
      reader.readMessage(value,proto.reachy.kinematics.ExtEulerAngles.deserializeBinaryFromReader);
      msg.setRpy(value);
      break;
    case 3:
      var value = new proto.reachy.kinematics.Matrix3x3;
      reader.readMessage(value,proto.reachy.kinematics.Matrix3x3.deserializeBinaryFromReader);
      msg.setMatrix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.kinematics.Rotation3D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.kinematics.Rotation3D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.kinematics.Rotation3D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.Rotation3D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQ();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.reachy.kinematics.Quaternion.serializeBinaryToWriter
    );
  }
  f = message.getRpy();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.reachy.kinematics.ExtEulerAngles.serializeBinaryToWriter
    );
  }
  f = message.getMatrix();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.reachy.kinematics.Matrix3x3.serializeBinaryToWriter
    );
  }
};


/**
 * optional Quaternion q = 1;
 * @return {?proto.reachy.kinematics.Quaternion}
 */
proto.reachy.kinematics.Rotation3D.prototype.getQ = function() {
  return /** @type{?proto.reachy.kinematics.Quaternion} */ (
    jspb.Message.getWrapperField(this, proto.reachy.kinematics.Quaternion, 1));
};


/**
 * @param {?proto.reachy.kinematics.Quaternion|undefined} value
 * @return {!proto.reachy.kinematics.Rotation3D} returns this
*/
proto.reachy.kinematics.Rotation3D.prototype.setQ = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.reachy.kinematics.Rotation3D.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.kinematics.Rotation3D} returns this
 */
proto.reachy.kinematics.Rotation3D.prototype.clearQ = function() {
  return this.setQ(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.kinematics.Rotation3D.prototype.hasQ = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ExtEulerAngles rpy = 2;
 * @return {?proto.reachy.kinematics.ExtEulerAngles}
 */
proto.reachy.kinematics.Rotation3D.prototype.getRpy = function() {
  return /** @type{?proto.reachy.kinematics.ExtEulerAngles} */ (
    jspb.Message.getWrapperField(this, proto.reachy.kinematics.ExtEulerAngles, 2));
};


/**
 * @param {?proto.reachy.kinematics.ExtEulerAngles|undefined} value
 * @return {!proto.reachy.kinematics.Rotation3D} returns this
*/
proto.reachy.kinematics.Rotation3D.prototype.setRpy = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.reachy.kinematics.Rotation3D.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.kinematics.Rotation3D} returns this
 */
proto.reachy.kinematics.Rotation3D.prototype.clearRpy = function() {
  return this.setRpy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.kinematics.Rotation3D.prototype.hasRpy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Matrix3x3 matrix = 3;
 * @return {?proto.reachy.kinematics.Matrix3x3}
 */
proto.reachy.kinematics.Rotation3D.prototype.getMatrix = function() {
  return /** @type{?proto.reachy.kinematics.Matrix3x3} */ (
    jspb.Message.getWrapperField(this, proto.reachy.kinematics.Matrix3x3, 3));
};


/**
 * @param {?proto.reachy.kinematics.Matrix3x3|undefined} value
 * @return {!proto.reachy.kinematics.Rotation3D} returns this
*/
proto.reachy.kinematics.Rotation3D.prototype.setMatrix = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.reachy.kinematics.Rotation3D.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.kinematics.Rotation3D} returns this
 */
proto.reachy.kinematics.Rotation3D.prototype.clearMatrix = function() {
  return this.setMatrix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.kinematics.Rotation3D.prototype.hasMatrix = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.kinematics.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.kinematics.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.kinematics.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.kinematics.Point}
 */
proto.reachy.kinematics.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.kinematics.Point;
  return proto.reachy.kinematics.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.kinematics.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.kinematics.Point}
 */
proto.reachy.kinematics.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.kinematics.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.kinematics.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.kinematics.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.reachy.kinematics.Point.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.Point} returns this
 */
proto.reachy.kinematics.Point.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.reachy.kinematics.Point.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.Point} returns this
 */
proto.reachy.kinematics.Point.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.reachy.kinematics.Point.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.Point} returns this
 */
proto.reachy.kinematics.Point.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.kinematics.ExtEulerAngles.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.kinematics.ExtEulerAngles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.kinematics.ExtEulerAngles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.ExtEulerAngles.toObject = function(includeInstance, msg) {
  var f, obj = {
    roll: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    pitch: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    yaw: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.kinematics.ExtEulerAngles}
 */
proto.reachy.kinematics.ExtEulerAngles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.kinematics.ExtEulerAngles;
  return proto.reachy.kinematics.ExtEulerAngles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.kinematics.ExtEulerAngles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.kinematics.ExtEulerAngles}
 */
proto.reachy.kinematics.ExtEulerAngles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRoll(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPitch(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setYaw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.kinematics.ExtEulerAngles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.kinematics.ExtEulerAngles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.kinematics.ExtEulerAngles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.ExtEulerAngles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoll();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getPitch();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getYaw();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double roll = 1;
 * @return {number}
 */
proto.reachy.kinematics.ExtEulerAngles.prototype.getRoll = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.ExtEulerAngles} returns this
 */
proto.reachy.kinematics.ExtEulerAngles.prototype.setRoll = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double pitch = 2;
 * @return {number}
 */
proto.reachy.kinematics.ExtEulerAngles.prototype.getPitch = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.ExtEulerAngles} returns this
 */
proto.reachy.kinematics.ExtEulerAngles.prototype.setPitch = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double yaw = 3;
 * @return {number}
 */
proto.reachy.kinematics.ExtEulerAngles.prototype.getYaw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.ExtEulerAngles} returns this
 */
proto.reachy.kinematics.ExtEulerAngles.prototype.setYaw = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.kinematics.PointDistanceTolerances.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.kinematics.PointDistanceTolerances.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.kinematics.PointDistanceTolerances} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.PointDistanceTolerances.toObject = function(includeInstance, msg) {
  var f, obj = {
    xTol: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    yTol: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    zTol: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.kinematics.PointDistanceTolerances}
 */
proto.reachy.kinematics.PointDistanceTolerances.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.kinematics.PointDistanceTolerances;
  return proto.reachy.kinematics.PointDistanceTolerances.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.kinematics.PointDistanceTolerances} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.kinematics.PointDistanceTolerances}
 */
proto.reachy.kinematics.PointDistanceTolerances.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setXTol(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setYTol(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZTol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.kinematics.PointDistanceTolerances.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.kinematics.PointDistanceTolerances.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.kinematics.PointDistanceTolerances} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.PointDistanceTolerances.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXTol();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getYTol();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZTol();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double x_tol = 1;
 * @return {number}
 */
proto.reachy.kinematics.PointDistanceTolerances.prototype.getXTol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.PointDistanceTolerances} returns this
 */
proto.reachy.kinematics.PointDistanceTolerances.prototype.setXTol = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y_tol = 2;
 * @return {number}
 */
proto.reachy.kinematics.PointDistanceTolerances.prototype.getYTol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.PointDistanceTolerances} returns this
 */
proto.reachy.kinematics.PointDistanceTolerances.prototype.setYTol = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double z_tol = 3;
 * @return {number}
 */
proto.reachy.kinematics.PointDistanceTolerances.prototype.getZTol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.PointDistanceTolerances} returns this
 */
proto.reachy.kinematics.PointDistanceTolerances.prototype.setZTol = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.kinematics.ExtEulerAnglesTolerances.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.kinematics.ExtEulerAnglesTolerances.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.kinematics.ExtEulerAnglesTolerances} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.ExtEulerAnglesTolerances.toObject = function(includeInstance, msg) {
  var f, obj = {
    rollTol: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    pitchTol: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    yawTol: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.kinematics.ExtEulerAnglesTolerances}
 */
proto.reachy.kinematics.ExtEulerAnglesTolerances.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.kinematics.ExtEulerAnglesTolerances;
  return proto.reachy.kinematics.ExtEulerAnglesTolerances.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.kinematics.ExtEulerAnglesTolerances} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.kinematics.ExtEulerAnglesTolerances}
 */
proto.reachy.kinematics.ExtEulerAnglesTolerances.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRollTol(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPitchTol(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setYawTol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.kinematics.ExtEulerAnglesTolerances.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.kinematics.ExtEulerAnglesTolerances.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.kinematics.ExtEulerAnglesTolerances} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.kinematics.ExtEulerAnglesTolerances.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRollTol();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getPitchTol();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getYawTol();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double roll_tol = 1;
 * @return {number}
 */
proto.reachy.kinematics.ExtEulerAnglesTolerances.prototype.getRollTol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.ExtEulerAnglesTolerances} returns this
 */
proto.reachy.kinematics.ExtEulerAnglesTolerances.prototype.setRollTol = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double pitch_tol = 2;
 * @return {number}
 */
proto.reachy.kinematics.ExtEulerAnglesTolerances.prototype.getPitchTol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.ExtEulerAnglesTolerances} returns this
 */
proto.reachy.kinematics.ExtEulerAnglesTolerances.prototype.setPitchTol = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double yaw_tol = 3;
 * @return {number}
 */
proto.reachy.kinematics.ExtEulerAnglesTolerances.prototype.getYawTol = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.kinematics.ExtEulerAnglesTolerances} returns this
 */
proto.reachy.kinematics.ExtEulerAnglesTolerances.prototype.setYawTol = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


goog.object.extend(exports, proto.reachy.kinematics);
