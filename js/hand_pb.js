// source: hand.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var part_pb = require('./part_pb.js');
goog.object.extend(proto, part_pb);
goog.exportSymbol('proto.reachy.part.hand.Force', null, global);
goog.exportSymbol('proto.reachy.part.hand.Hand', null, global);
goog.exportSymbol('proto.reachy.part.hand.HandPosition', null, global);
goog.exportSymbol('proto.reachy.part.hand.HandPosition.PositionCase', null, global);
goog.exportSymbol('proto.reachy.part.hand.HandState', null, global);
goog.exportSymbol('proto.reachy.part.hand.HandStatus', null, global);
goog.exportSymbol('proto.reachy.part.hand.HandTemperatures', null, global);
goog.exportSymbol('proto.reachy.part.hand.HandTemperatures.TemperaturesCase', null, global);
goog.exportSymbol('proto.reachy.part.hand.JointLimits', null, global);
goog.exportSymbol('proto.reachy.part.hand.JointsLimits', null, global);
goog.exportSymbol('proto.reachy.part.hand.JointsLimits.LimitsCase', null, global);
goog.exportSymbol('proto.reachy.part.hand.ListOfHand', null, global);
goog.exportSymbol('proto.reachy.part.hand.ParallelGripperLimits', null, global);
goog.exportSymbol('proto.reachy.part.hand.ParallelGripperPosition', null, global);
goog.exportSymbol('proto.reachy.part.hand.ParallelGripperTemperature', null, global);
goog.exportSymbol('proto.reachy.part.hand.SpeedLimit', null, global);
goog.exportSymbol('proto.reachy.part.hand.SpeedLimitRequest', null, global);
goog.exportSymbol('proto.reachy.part.hand.Temperatures', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.hand.Hand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.hand.Hand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.hand.Hand.displayName = 'proto.reachy.part.hand.Hand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.hand.ListOfHand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.reachy.part.hand.ListOfHand.repeatedFields_, null);
};
goog.inherits(proto.reachy.part.hand.ListOfHand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.hand.ListOfHand.displayName = 'proto.reachy.part.hand.ListOfHand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.hand.HandState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.hand.HandState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.hand.HandState.displayName = 'proto.reachy.part.hand.HandState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.hand.HandStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.hand.HandStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.hand.HandStatus.displayName = 'proto.reachy.part.hand.HandStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.hand.Force = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.hand.Force, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.hand.Force.displayName = 'proto.reachy.part.hand.Force';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.hand.JointLimits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.hand.JointLimits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.hand.JointLimits.displayName = 'proto.reachy.part.hand.JointLimits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.hand.ParallelGripperLimits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.hand.ParallelGripperLimits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.hand.ParallelGripperLimits.displayName = 'proto.reachy.part.hand.ParallelGripperLimits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.hand.JointsLimits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.reachy.part.hand.JointsLimits.oneofGroups_);
};
goog.inherits(proto.reachy.part.hand.JointsLimits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.hand.JointsLimits.displayName = 'proto.reachy.part.hand.JointsLimits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.hand.ParallelGripperPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.hand.ParallelGripperPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.hand.ParallelGripperPosition.displayName = 'proto.reachy.part.hand.ParallelGripperPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.hand.HandPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.reachy.part.hand.HandPosition.oneofGroups_);
};
goog.inherits(proto.reachy.part.hand.HandPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.hand.HandPosition.displayName = 'proto.reachy.part.hand.HandPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.hand.Temperatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.hand.Temperatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.hand.Temperatures.displayName = 'proto.reachy.part.hand.Temperatures';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.hand.ParallelGripperTemperature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.hand.ParallelGripperTemperature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.hand.ParallelGripperTemperature.displayName = 'proto.reachy.part.hand.ParallelGripperTemperature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.hand.HandTemperatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.reachy.part.hand.HandTemperatures.oneofGroups_);
};
goog.inherits(proto.reachy.part.hand.HandTemperatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.hand.HandTemperatures.displayName = 'proto.reachy.part.hand.HandTemperatures';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.reachy.part.hand.SpeedLimitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.reachy.part.hand.SpeedLimitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.reachy.part.hand.SpeedLimitRequest.displayName = 'proto.reachy.part.hand.SpeedLimitRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.hand.Hand.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.hand.Hand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.hand.Hand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.Hand.toObject = function(includeInstance, msg) {
  var f, obj = {
    partId: (f = msg.getPartId()) && part_pb.PartId.toObject(includeInstance, f),
    info: (f = msg.getInfo()) && part_pb.PartInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.hand.Hand}
 */
proto.reachy.part.hand.Hand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.hand.Hand;
  return proto.reachy.part.hand.Hand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.hand.Hand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.hand.Hand}
 */
proto.reachy.part.hand.Hand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new part_pb.PartId;
      reader.readMessage(value,part_pb.PartId.deserializeBinaryFromReader);
      msg.setPartId(value);
      break;
    case 5:
      var value = new part_pb.PartInfo;
      reader.readMessage(value,part_pb.PartInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.hand.Hand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.hand.Hand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.hand.Hand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.Hand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      part_pb.PartId.serializeBinaryToWriter
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      part_pb.PartInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional reachy.part.PartId part_id = 1;
 * @return {?proto.reachy.part.PartId}
 */
proto.reachy.part.hand.Hand.prototype.getPartId = function() {
  return /** @type{?proto.reachy.part.PartId} */ (
    jspb.Message.getWrapperField(this, part_pb.PartId, 1));
};


/**
 * @param {?proto.reachy.part.PartId|undefined} value
 * @return {!proto.reachy.part.hand.Hand} returns this
*/
proto.reachy.part.hand.Hand.prototype.setPartId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.hand.Hand} returns this
 */
proto.reachy.part.hand.Hand.prototype.clearPartId = function() {
  return this.setPartId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.hand.Hand.prototype.hasPartId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional reachy.part.PartInfo info = 5;
 * @return {?proto.reachy.part.PartInfo}
 */
proto.reachy.part.hand.Hand.prototype.getInfo = function() {
  return /** @type{?proto.reachy.part.PartInfo} */ (
    jspb.Message.getWrapperField(this, part_pb.PartInfo, 5));
};


/**
 * @param {?proto.reachy.part.PartInfo|undefined} value
 * @return {!proto.reachy.part.hand.Hand} returns this
*/
proto.reachy.part.hand.Hand.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.hand.Hand} returns this
 */
proto.reachy.part.hand.Hand.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.hand.Hand.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.reachy.part.hand.ListOfHand.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.hand.ListOfHand.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.hand.ListOfHand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.hand.ListOfHand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.ListOfHand.toObject = function(includeInstance, msg) {
  var f, obj = {
    handList: jspb.Message.toObjectList(msg.getHandList(),
    proto.reachy.part.hand.Hand.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.hand.ListOfHand}
 */
proto.reachy.part.hand.ListOfHand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.hand.ListOfHand;
  return proto.reachy.part.hand.ListOfHand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.hand.ListOfHand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.hand.ListOfHand}
 */
proto.reachy.part.hand.ListOfHand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reachy.part.hand.Hand;
      reader.readMessage(value,proto.reachy.part.hand.Hand.deserializeBinaryFromReader);
      msg.addHand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.hand.ListOfHand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.hand.ListOfHand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.hand.ListOfHand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.ListOfHand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHandList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.reachy.part.hand.Hand.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Hand hand = 1;
 * @return {!Array<!proto.reachy.part.hand.Hand>}
 */
proto.reachy.part.hand.ListOfHand.prototype.getHandList = function() {
  return /** @type{!Array<!proto.reachy.part.hand.Hand>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.reachy.part.hand.Hand, 1));
};


/**
 * @param {!Array<!proto.reachy.part.hand.Hand>} value
 * @return {!proto.reachy.part.hand.ListOfHand} returns this
*/
proto.reachy.part.hand.ListOfHand.prototype.setHandList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.reachy.part.hand.Hand=} opt_value
 * @param {number=} opt_index
 * @return {!proto.reachy.part.hand.Hand}
 */
proto.reachy.part.hand.ListOfHand.prototype.addHand = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.reachy.part.hand.Hand, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.reachy.part.hand.ListOfHand} returns this
 */
proto.reachy.part.hand.ListOfHand.prototype.clearHandList = function() {
  return this.setHandList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.hand.HandState.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.hand.HandState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.hand.HandState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.HandState.toObject = function(includeInstance, msg) {
  var f, obj = {
    opening: (f = msg.getOpening()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    force: (f = msg.getForce()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    holdingObject: (f = msg.getHoldingObject()) && google_protobuf_wrappers_pb.BoolValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.hand.HandState}
 */
proto.reachy.part.hand.HandState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.hand.HandState;
  return proto.reachy.part.hand.HandState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.hand.HandState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.hand.HandState}
 */
proto.reachy.part.hand.HandState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setOpening(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setForce(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.BoolValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.BoolValue.deserializeBinaryFromReader);
      msg.setHoldingObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.hand.HandState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.hand.HandState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.hand.HandState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.HandState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpening();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getForce();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getHoldingObject();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.BoolValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.FloatValue opening = 1;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.reachy.part.hand.HandState.prototype.getOpening = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 1));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.reachy.part.hand.HandState} returns this
*/
proto.reachy.part.hand.HandState.prototype.setOpening = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.hand.HandState} returns this
 */
proto.reachy.part.hand.HandState.prototype.clearOpening = function() {
  return this.setOpening(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.hand.HandState.prototype.hasOpening = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.FloatValue force = 2;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.reachy.part.hand.HandState.prototype.getForce = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 2));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.reachy.part.hand.HandState} returns this
*/
proto.reachy.part.hand.HandState.prototype.setForce = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.hand.HandState} returns this
 */
proto.reachy.part.hand.HandState.prototype.clearForce = function() {
  return this.setForce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.hand.HandState.prototype.hasForce = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.BoolValue holding_object = 3;
 * @return {?proto.google.protobuf.BoolValue}
 */
proto.reachy.part.hand.HandState.prototype.getHoldingObject = function() {
  return /** @type{?proto.google.protobuf.BoolValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BoolValue, 3));
};


/**
 * @param {?proto.google.protobuf.BoolValue|undefined} value
 * @return {!proto.reachy.part.hand.HandState} returns this
*/
proto.reachy.part.hand.HandState.prototype.setHoldingObject = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.hand.HandState} returns this
 */
proto.reachy.part.hand.HandState.prototype.clearHoldingObject = function() {
  return this.setHoldingObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.hand.HandState.prototype.hasHoldingObject = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.hand.HandStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.hand.HandStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.hand.HandStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.HandStatus.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.hand.HandStatus}
 */
proto.reachy.part.hand.HandStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.hand.HandStatus;
  return proto.reachy.part.hand.HandStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.hand.HandStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.hand.HandStatus}
 */
proto.reachy.part.hand.HandStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.hand.HandStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.hand.HandStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.hand.HandStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.HandStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.hand.Force.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.hand.Force.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.hand.Force} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.Force.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.hand.Force}
 */
proto.reachy.part.hand.Force.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.hand.Force;
  return proto.reachy.part.hand.Force.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.hand.Force} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.hand.Force}
 */
proto.reachy.part.hand.Force.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.hand.Force.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.hand.Force.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.hand.Force} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.Force.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.hand.JointLimits.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.hand.JointLimits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.hand.JointLimits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.JointLimits.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    max: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.hand.JointLimits}
 */
proto.reachy.part.hand.JointLimits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.hand.JointLimits;
  return proto.reachy.part.hand.JointLimits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.hand.JointLimits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.hand.JointLimits}
 */
proto.reachy.part.hand.JointLimits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.hand.JointLimits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.hand.JointLimits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.hand.JointLimits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.JointLimits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMin();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getMax();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float min = 1;
 * @return {number}
 */
proto.reachy.part.hand.JointLimits.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.part.hand.JointLimits} returns this
 */
proto.reachy.part.hand.JointLimits.prototype.setMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float max = 2;
 * @return {number}
 */
proto.reachy.part.hand.JointLimits.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.part.hand.JointLimits} returns this
 */
proto.reachy.part.hand.JointLimits.prototype.setMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.hand.ParallelGripperLimits.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.hand.ParallelGripperLimits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.hand.ParallelGripperLimits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.ParallelGripperLimits.toObject = function(includeInstance, msg) {
  var f, obj = {
    limits: (f = msg.getLimits()) && proto.reachy.part.hand.JointLimits.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.hand.ParallelGripperLimits}
 */
proto.reachy.part.hand.ParallelGripperLimits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.hand.ParallelGripperLimits;
  return proto.reachy.part.hand.ParallelGripperLimits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.hand.ParallelGripperLimits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.hand.ParallelGripperLimits}
 */
proto.reachy.part.hand.ParallelGripperLimits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reachy.part.hand.JointLimits;
      reader.readMessage(value,proto.reachy.part.hand.JointLimits.deserializeBinaryFromReader);
      msg.setLimits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.hand.ParallelGripperLimits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.hand.ParallelGripperLimits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.hand.ParallelGripperLimits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.ParallelGripperLimits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimits();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.reachy.part.hand.JointLimits.serializeBinaryToWriter
    );
  }
};


/**
 * optional JointLimits limits = 1;
 * @return {?proto.reachy.part.hand.JointLimits}
 */
proto.reachy.part.hand.ParallelGripperLimits.prototype.getLimits = function() {
  return /** @type{?proto.reachy.part.hand.JointLimits} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.hand.JointLimits, 1));
};


/**
 * @param {?proto.reachy.part.hand.JointLimits|undefined} value
 * @return {!proto.reachy.part.hand.ParallelGripperLimits} returns this
*/
proto.reachy.part.hand.ParallelGripperLimits.prototype.setLimits = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.hand.ParallelGripperLimits} returns this
 */
proto.reachy.part.hand.ParallelGripperLimits.prototype.clearLimits = function() {
  return this.setLimits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.hand.ParallelGripperLimits.prototype.hasLimits = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.reachy.part.hand.JointsLimits.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.reachy.part.hand.JointsLimits.LimitsCase = {
  LIMITS_NOT_SET: 0,
  PARALLEL_GRIPPER: 1
};

/**
 * @return {proto.reachy.part.hand.JointsLimits.LimitsCase}
 */
proto.reachy.part.hand.JointsLimits.prototype.getLimitsCase = function() {
  return /** @type {proto.reachy.part.hand.JointsLimits.LimitsCase} */(jspb.Message.computeOneofCase(this, proto.reachy.part.hand.JointsLimits.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.hand.JointsLimits.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.hand.JointsLimits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.hand.JointsLimits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.JointsLimits.toObject = function(includeInstance, msg) {
  var f, obj = {
    parallelGripper: (f = msg.getParallelGripper()) && proto.reachy.part.hand.ParallelGripperLimits.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.hand.JointsLimits}
 */
proto.reachy.part.hand.JointsLimits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.hand.JointsLimits;
  return proto.reachy.part.hand.JointsLimits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.hand.JointsLimits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.hand.JointsLimits}
 */
proto.reachy.part.hand.JointsLimits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reachy.part.hand.ParallelGripperLimits;
      reader.readMessage(value,proto.reachy.part.hand.ParallelGripperLimits.deserializeBinaryFromReader);
      msg.setParallelGripper(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.hand.JointsLimits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.hand.JointsLimits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.hand.JointsLimits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.JointsLimits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParallelGripper();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.reachy.part.hand.ParallelGripperLimits.serializeBinaryToWriter
    );
  }
};


/**
 * optional ParallelGripperLimits parallel_gripper = 1;
 * @return {?proto.reachy.part.hand.ParallelGripperLimits}
 */
proto.reachy.part.hand.JointsLimits.prototype.getParallelGripper = function() {
  return /** @type{?proto.reachy.part.hand.ParallelGripperLimits} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.hand.ParallelGripperLimits, 1));
};


/**
 * @param {?proto.reachy.part.hand.ParallelGripperLimits|undefined} value
 * @return {!proto.reachy.part.hand.JointsLimits} returns this
*/
proto.reachy.part.hand.JointsLimits.prototype.setParallelGripper = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.reachy.part.hand.JointsLimits.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.hand.JointsLimits} returns this
 */
proto.reachy.part.hand.JointsLimits.prototype.clearParallelGripper = function() {
  return this.setParallelGripper(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.hand.JointsLimits.prototype.hasParallelGripper = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.hand.ParallelGripperPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.hand.ParallelGripperPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.hand.ParallelGripperPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.ParallelGripperPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.hand.ParallelGripperPosition}
 */
proto.reachy.part.hand.ParallelGripperPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.hand.ParallelGripperPosition;
  return proto.reachy.part.hand.ParallelGripperPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.hand.ParallelGripperPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.hand.ParallelGripperPosition}
 */
proto.reachy.part.hand.ParallelGripperPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.hand.ParallelGripperPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.hand.ParallelGripperPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.hand.ParallelGripperPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.ParallelGripperPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float position = 1;
 * @return {number}
 */
proto.reachy.part.hand.ParallelGripperPosition.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.part.hand.ParallelGripperPosition} returns this
 */
proto.reachy.part.hand.ParallelGripperPosition.prototype.setPosition = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.reachy.part.hand.HandPosition.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.reachy.part.hand.HandPosition.PositionCase = {
  POSITION_NOT_SET: 0,
  PARALLEL_GRIPPER: 1
};

/**
 * @return {proto.reachy.part.hand.HandPosition.PositionCase}
 */
proto.reachy.part.hand.HandPosition.prototype.getPositionCase = function() {
  return /** @type {proto.reachy.part.hand.HandPosition.PositionCase} */(jspb.Message.computeOneofCase(this, proto.reachy.part.hand.HandPosition.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.hand.HandPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.hand.HandPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.hand.HandPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.HandPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    parallelGripper: (f = msg.getParallelGripper()) && proto.reachy.part.hand.ParallelGripperPosition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.hand.HandPosition}
 */
proto.reachy.part.hand.HandPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.hand.HandPosition;
  return proto.reachy.part.hand.HandPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.hand.HandPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.hand.HandPosition}
 */
proto.reachy.part.hand.HandPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reachy.part.hand.ParallelGripperPosition;
      reader.readMessage(value,proto.reachy.part.hand.ParallelGripperPosition.deserializeBinaryFromReader);
      msg.setParallelGripper(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.hand.HandPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.hand.HandPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.hand.HandPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.HandPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParallelGripper();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.reachy.part.hand.ParallelGripperPosition.serializeBinaryToWriter
    );
  }
};


/**
 * optional ParallelGripperPosition parallel_gripper = 1;
 * @return {?proto.reachy.part.hand.ParallelGripperPosition}
 */
proto.reachy.part.hand.HandPosition.prototype.getParallelGripper = function() {
  return /** @type{?proto.reachy.part.hand.ParallelGripperPosition} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.hand.ParallelGripperPosition, 1));
};


/**
 * @param {?proto.reachy.part.hand.ParallelGripperPosition|undefined} value
 * @return {!proto.reachy.part.hand.HandPosition} returns this
*/
proto.reachy.part.hand.HandPosition.prototype.setParallelGripper = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.reachy.part.hand.HandPosition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.hand.HandPosition} returns this
 */
proto.reachy.part.hand.HandPosition.prototype.clearParallelGripper = function() {
  return this.setParallelGripper(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.hand.HandPosition.prototype.hasParallelGripper = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.hand.Temperatures.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.hand.Temperatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.hand.Temperatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.Temperatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    motor: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    driver: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.hand.Temperatures}
 */
proto.reachy.part.hand.Temperatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.hand.Temperatures;
  return proto.reachy.part.hand.Temperatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.hand.Temperatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.hand.Temperatures}
 */
proto.reachy.part.hand.Temperatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMotor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDriver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.hand.Temperatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.hand.Temperatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.hand.Temperatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.Temperatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMotor();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getDriver();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float motor = 1;
 * @return {number}
 */
proto.reachy.part.hand.Temperatures.prototype.getMotor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.part.hand.Temperatures} returns this
 */
proto.reachy.part.hand.Temperatures.prototype.setMotor = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float driver = 2;
 * @return {number}
 */
proto.reachy.part.hand.Temperatures.prototype.getDriver = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.reachy.part.hand.Temperatures} returns this
 */
proto.reachy.part.hand.Temperatures.prototype.setDriver = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.hand.ParallelGripperTemperature.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.hand.ParallelGripperTemperature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.hand.ParallelGripperTemperature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.ParallelGripperTemperature.toObject = function(includeInstance, msg) {
  var f, obj = {
    temperature: (f = msg.getTemperature()) && proto.reachy.part.hand.Temperatures.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.hand.ParallelGripperTemperature}
 */
proto.reachy.part.hand.ParallelGripperTemperature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.hand.ParallelGripperTemperature;
  return proto.reachy.part.hand.ParallelGripperTemperature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.hand.ParallelGripperTemperature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.hand.ParallelGripperTemperature}
 */
proto.reachy.part.hand.ParallelGripperTemperature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reachy.part.hand.Temperatures;
      reader.readMessage(value,proto.reachy.part.hand.Temperatures.deserializeBinaryFromReader);
      msg.setTemperature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.hand.ParallelGripperTemperature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.hand.ParallelGripperTemperature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.hand.ParallelGripperTemperature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.ParallelGripperTemperature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemperature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.reachy.part.hand.Temperatures.serializeBinaryToWriter
    );
  }
};


/**
 * optional Temperatures temperature = 1;
 * @return {?proto.reachy.part.hand.Temperatures}
 */
proto.reachy.part.hand.ParallelGripperTemperature.prototype.getTemperature = function() {
  return /** @type{?proto.reachy.part.hand.Temperatures} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.hand.Temperatures, 1));
};


/**
 * @param {?proto.reachy.part.hand.Temperatures|undefined} value
 * @return {!proto.reachy.part.hand.ParallelGripperTemperature} returns this
*/
proto.reachy.part.hand.ParallelGripperTemperature.prototype.setTemperature = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.hand.ParallelGripperTemperature} returns this
 */
proto.reachy.part.hand.ParallelGripperTemperature.prototype.clearTemperature = function() {
  return this.setTemperature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.hand.ParallelGripperTemperature.prototype.hasTemperature = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.reachy.part.hand.HandTemperatures.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.reachy.part.hand.HandTemperatures.TemperaturesCase = {
  TEMPERATURES_NOT_SET: 0,
  PARALLEL_GRIPPER: 1
};

/**
 * @return {proto.reachy.part.hand.HandTemperatures.TemperaturesCase}
 */
proto.reachy.part.hand.HandTemperatures.prototype.getTemperaturesCase = function() {
  return /** @type {proto.reachy.part.hand.HandTemperatures.TemperaturesCase} */(jspb.Message.computeOneofCase(this, proto.reachy.part.hand.HandTemperatures.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.hand.HandTemperatures.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.hand.HandTemperatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.hand.HandTemperatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.HandTemperatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    parallelGripper: (f = msg.getParallelGripper()) && proto.reachy.part.hand.Temperatures.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.hand.HandTemperatures}
 */
proto.reachy.part.hand.HandTemperatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.hand.HandTemperatures;
  return proto.reachy.part.hand.HandTemperatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.hand.HandTemperatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.hand.HandTemperatures}
 */
proto.reachy.part.hand.HandTemperatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.reachy.part.hand.Temperatures;
      reader.readMessage(value,proto.reachy.part.hand.Temperatures.deserializeBinaryFromReader);
      msg.setParallelGripper(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.hand.HandTemperatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.hand.HandTemperatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.hand.HandTemperatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.HandTemperatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParallelGripper();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.reachy.part.hand.Temperatures.serializeBinaryToWriter
    );
  }
};


/**
 * optional Temperatures parallel_gripper = 1;
 * @return {?proto.reachy.part.hand.Temperatures}
 */
proto.reachy.part.hand.HandTemperatures.prototype.getParallelGripper = function() {
  return /** @type{?proto.reachy.part.hand.Temperatures} */ (
    jspb.Message.getWrapperField(this, proto.reachy.part.hand.Temperatures, 1));
};


/**
 * @param {?proto.reachy.part.hand.Temperatures|undefined} value
 * @return {!proto.reachy.part.hand.HandTemperatures} returns this
*/
proto.reachy.part.hand.HandTemperatures.prototype.setParallelGripper = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.reachy.part.hand.HandTemperatures.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.hand.HandTemperatures} returns this
 */
proto.reachy.part.hand.HandTemperatures.prototype.clearParallelGripper = function() {
  return this.setParallelGripper(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.hand.HandTemperatures.prototype.hasParallelGripper = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.reachy.part.hand.SpeedLimitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.reachy.part.hand.SpeedLimitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.reachy.part.hand.SpeedLimitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.SpeedLimitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && part_pb.PartId.toObject(includeInstance, f),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.reachy.part.hand.SpeedLimitRequest}
 */
proto.reachy.part.hand.SpeedLimitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.reachy.part.hand.SpeedLimitRequest;
  return proto.reachy.part.hand.SpeedLimitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.reachy.part.hand.SpeedLimitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.reachy.part.hand.SpeedLimitRequest}
 */
proto.reachy.part.hand.SpeedLimitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new part_pb.PartId;
      reader.readMessage(value,part_pb.PartId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.reachy.part.hand.SpeedLimit} */ (reader.readEnum());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.reachy.part.hand.SpeedLimitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.reachy.part.hand.SpeedLimitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.reachy.part.hand.SpeedLimitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.reachy.part.hand.SpeedLimitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      part_pb.PartId.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional reachy.part.PartId id = 1;
 * @return {?proto.reachy.part.PartId}
 */
proto.reachy.part.hand.SpeedLimitRequest.prototype.getId = function() {
  return /** @type{?proto.reachy.part.PartId} */ (
    jspb.Message.getWrapperField(this, part_pb.PartId, 1));
};


/**
 * @param {?proto.reachy.part.PartId|undefined} value
 * @return {!proto.reachy.part.hand.SpeedLimitRequest} returns this
*/
proto.reachy.part.hand.SpeedLimitRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.reachy.part.hand.SpeedLimitRequest} returns this
 */
proto.reachy.part.hand.SpeedLimitRequest.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.reachy.part.hand.SpeedLimitRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SpeedLimit limit = 2;
 * @return {!proto.reachy.part.hand.SpeedLimit}
 */
proto.reachy.part.hand.SpeedLimitRequest.prototype.getLimit = function() {
  return /** @type {!proto.reachy.part.hand.SpeedLimit} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.reachy.part.hand.SpeedLimit} value
 * @return {!proto.reachy.part.hand.SpeedLimitRequest} returns this
 */
proto.reachy.part.hand.SpeedLimitRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.reachy.part.hand.SpeedLimit = {
  NO_LIMIT: 0,
  FAST: 1,
  NORMAL: 2,
  SLOW: 3
};

goog.object.extend(exports, proto.reachy.part.hand);
