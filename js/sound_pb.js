// source: sound.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var component_pb = require('./component_pb.js');
goog.object.extend(proto, component_pb);
var error_pb = require('./error_pb.js');
goog.object.extend(proto, error_pb);
goog.exportSymbol('proto.component.sound.ListOfMicrophoneInfo', null, global);
goog.exportSymbol('proto.component.sound.ListOfSpeakerInfo', null, global);
goog.exportSymbol('proto.component.sound.Microphone', null, global);
goog.exportSymbol('proto.component.sound.MicrophoneInfo', null, global);
goog.exportSymbol('proto.component.sound.RecordingAck', null, global);
goog.exportSymbol('proto.component.sound.SoundAck', null, global);
goog.exportSymbol('proto.component.sound.SoundId', null, global);
goog.exportSymbol('proto.component.sound.Speaker', null, global);
goog.exportSymbol('proto.component.sound.SpeakerInfo', null, global);
goog.exportSymbol('proto.component.sound.VolumeRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.sound.Microphone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.sound.Microphone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.sound.Microphone.displayName = 'proto.component.sound.Microphone';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.sound.Speaker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.sound.Speaker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.sound.Speaker.displayName = 'proto.component.sound.Speaker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.sound.MicrophoneInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.sound.MicrophoneInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.sound.MicrophoneInfo.displayName = 'proto.component.sound.MicrophoneInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.sound.ListOfMicrophoneInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.component.sound.ListOfMicrophoneInfo.repeatedFields_, null);
};
goog.inherits(proto.component.sound.ListOfMicrophoneInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.sound.ListOfMicrophoneInfo.displayName = 'proto.component.sound.ListOfMicrophoneInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.sound.SoundAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.sound.SoundAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.sound.SoundAck.displayName = 'proto.component.sound.SoundAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.sound.SoundId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.sound.SoundId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.sound.SoundId.displayName = 'proto.component.sound.SoundId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.sound.RecordingAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.sound.RecordingAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.sound.RecordingAck.displayName = 'proto.component.sound.RecordingAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.sound.SpeakerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.sound.SpeakerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.sound.SpeakerInfo.displayName = 'proto.component.sound.SpeakerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.sound.ListOfSpeakerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.component.sound.ListOfSpeakerInfo.repeatedFields_, null);
};
goog.inherits(proto.component.sound.ListOfSpeakerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.sound.ListOfSpeakerInfo.displayName = 'proto.component.sound.ListOfSpeakerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.component.sound.VolumeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.component.sound.VolumeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.component.sound.VolumeRequest.displayName = 'proto.component.sound.VolumeRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.sound.Microphone.prototype.toObject = function(opt_includeInstance) {
  return proto.component.sound.Microphone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.sound.Microphone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.Microphone.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.component.sound.MicrophoneInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.sound.Microphone}
 */
proto.component.sound.Microphone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.sound.Microphone;
  return proto.component.sound.Microphone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.sound.Microphone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.sound.Microphone}
 */
proto.component.sound.Microphone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.component.sound.MicrophoneInfo;
      reader.readMessage(value,proto.component.sound.MicrophoneInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.sound.Microphone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.sound.Microphone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.sound.Microphone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.Microphone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.component.sound.MicrophoneInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional MicrophoneInfo info = 1;
 * @return {?proto.component.sound.MicrophoneInfo}
 */
proto.component.sound.Microphone.prototype.getInfo = function() {
  return /** @type{?proto.component.sound.MicrophoneInfo} */ (
    jspb.Message.getWrapperField(this, proto.component.sound.MicrophoneInfo, 1));
};


/**
 * @param {?proto.component.sound.MicrophoneInfo|undefined} value
 * @return {!proto.component.sound.Microphone} returns this
*/
proto.component.sound.Microphone.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.component.sound.Microphone} returns this
 */
proto.component.sound.Microphone.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.component.sound.Microphone.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.sound.Speaker.prototype.toObject = function(opt_includeInstance) {
  return proto.component.sound.Speaker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.sound.Speaker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.Speaker.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.component.sound.SpeakerInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.sound.Speaker}
 */
proto.component.sound.Speaker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.sound.Speaker;
  return proto.component.sound.Speaker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.sound.Speaker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.sound.Speaker}
 */
proto.component.sound.Speaker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.component.sound.SpeakerInfo;
      reader.readMessage(value,proto.component.sound.SpeakerInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.sound.Speaker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.sound.Speaker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.sound.Speaker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.Speaker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.component.sound.SpeakerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional SpeakerInfo info = 1;
 * @return {?proto.component.sound.SpeakerInfo}
 */
proto.component.sound.Speaker.prototype.getInfo = function() {
  return /** @type{?proto.component.sound.SpeakerInfo} */ (
    jspb.Message.getWrapperField(this, proto.component.sound.SpeakerInfo, 1));
};


/**
 * @param {?proto.component.sound.SpeakerInfo|undefined} value
 * @return {!proto.component.sound.Speaker} returns this
*/
proto.component.sound.Speaker.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.component.sound.Speaker} returns this
 */
proto.component.sound.Speaker.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.component.sound.Speaker.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.sound.MicrophoneInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.component.sound.MicrophoneInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.sound.MicrophoneInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.MicrophoneInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && component_pb.ComponentId.toObject(includeInstance, f),
    gain: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.sound.MicrophoneInfo}
 */
proto.component.sound.MicrophoneInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.sound.MicrophoneInfo;
  return proto.component.sound.MicrophoneInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.sound.MicrophoneInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.sound.MicrophoneInfo}
 */
proto.component.sound.MicrophoneInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new component_pb.ComponentId;
      reader.readMessage(value,component_pb.ComponentId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.sound.MicrophoneInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.sound.MicrophoneInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.sound.MicrophoneInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.MicrophoneInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      component_pb.ComponentId.serializeBinaryToWriter
    );
  }
  f = message.getGain();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional component.ComponentId id = 1;
 * @return {?proto.component.ComponentId}
 */
proto.component.sound.MicrophoneInfo.prototype.getId = function() {
  return /** @type{?proto.component.ComponentId} */ (
    jspb.Message.getWrapperField(this, component_pb.ComponentId, 1));
};


/**
 * @param {?proto.component.ComponentId|undefined} value
 * @return {!proto.component.sound.MicrophoneInfo} returns this
*/
proto.component.sound.MicrophoneInfo.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.component.sound.MicrophoneInfo} returns this
 */
proto.component.sound.MicrophoneInfo.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.component.sound.MicrophoneInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float gain = 2;
 * @return {number}
 */
proto.component.sound.MicrophoneInfo.prototype.getGain = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.component.sound.MicrophoneInfo} returns this
 */
proto.component.sound.MicrophoneInfo.prototype.setGain = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.component.sound.ListOfMicrophoneInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.sound.ListOfMicrophoneInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.component.sound.ListOfMicrophoneInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.sound.ListOfMicrophoneInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.ListOfMicrophoneInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    stereoCameraInfoList: jspb.Message.toObjectList(msg.getStereoCameraInfoList(),
    proto.component.sound.MicrophoneInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.sound.ListOfMicrophoneInfo}
 */
proto.component.sound.ListOfMicrophoneInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.sound.ListOfMicrophoneInfo;
  return proto.component.sound.ListOfMicrophoneInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.sound.ListOfMicrophoneInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.sound.ListOfMicrophoneInfo}
 */
proto.component.sound.ListOfMicrophoneInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.component.sound.MicrophoneInfo;
      reader.readMessage(value,proto.component.sound.MicrophoneInfo.deserializeBinaryFromReader);
      msg.addStereoCameraInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.sound.ListOfMicrophoneInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.sound.ListOfMicrophoneInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.sound.ListOfMicrophoneInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.ListOfMicrophoneInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStereoCameraInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.component.sound.MicrophoneInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MicrophoneInfo stereo_camera_info = 1;
 * @return {!Array<!proto.component.sound.MicrophoneInfo>}
 */
proto.component.sound.ListOfMicrophoneInfo.prototype.getStereoCameraInfoList = function() {
  return /** @type{!Array<!proto.component.sound.MicrophoneInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.component.sound.MicrophoneInfo, 1));
};


/**
 * @param {!Array<!proto.component.sound.MicrophoneInfo>} value
 * @return {!proto.component.sound.ListOfMicrophoneInfo} returns this
*/
proto.component.sound.ListOfMicrophoneInfo.prototype.setStereoCameraInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.component.sound.MicrophoneInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.component.sound.MicrophoneInfo}
 */
proto.component.sound.ListOfMicrophoneInfo.prototype.addStereoCameraInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.component.sound.MicrophoneInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.component.sound.ListOfMicrophoneInfo} returns this
 */
proto.component.sound.ListOfMicrophoneInfo.prototype.clearStereoCameraInfoList = function() {
  return this.setStereoCameraInfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.sound.SoundAck.prototype.toObject = function(opt_includeInstance) {
  return proto.component.sound.SoundAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.sound.SoundAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.SoundAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: (f = msg.getSuccess()) && google_protobuf_wrappers_pb.BoolValue.toObject(includeInstance, f),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.sound.SoundAck}
 */
proto.component.sound.SoundAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.sound.SoundAck;
  return proto.component.sound.SoundAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.sound.SoundAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.sound.SoundAck}
 */
proto.component.sound.SoundAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_wrappers_pb.BoolValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.BoolValue.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.sound.SoundAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.sound.SoundAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.sound.SoundAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.SoundAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_wrappers_pb.BoolValue.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.BoolValue success = 1;
 * @return {?proto.google.protobuf.BoolValue}
 */
proto.component.sound.SoundAck.prototype.getSuccess = function() {
  return /** @type{?proto.google.protobuf.BoolValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BoolValue, 1));
};


/**
 * @param {?proto.google.protobuf.BoolValue|undefined} value
 * @return {!proto.component.sound.SoundAck} returns this
*/
proto.component.sound.SoundAck.prototype.setSuccess = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.component.sound.SoundAck} returns this
 */
proto.component.sound.SoundAck.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.component.sound.SoundAck.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional error.Error error = 2;
 * @return {?proto.error.Error}
 */
proto.component.sound.SoundAck.prototype.getError = function() {
  return /** @type{?proto.error.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/**
 * @param {?proto.error.Error|undefined} value
 * @return {!proto.component.sound.SoundAck} returns this
*/
proto.component.sound.SoundAck.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.component.sound.SoundAck} returns this
 */
proto.component.sound.SoundAck.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.component.sound.SoundAck.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.sound.SoundId.prototype.toObject = function(opt_includeInstance) {
  return proto.component.sound.SoundId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.sound.SoundId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.SoundId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.sound.SoundId}
 */
proto.component.sound.SoundId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.sound.SoundId;
  return proto.component.sound.SoundId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.sound.SoundId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.sound.SoundId}
 */
proto.component.sound.SoundId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.sound.SoundId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.sound.SoundId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.sound.SoundId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.SoundId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.component.sound.SoundId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.component.sound.SoundId} returns this
 */
proto.component.sound.SoundId.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.sound.RecordingAck.prototype.toObject = function(opt_includeInstance) {
  return proto.component.sound.RecordingAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.sound.RecordingAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.RecordingAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    ack: (f = msg.getAck()) && proto.component.sound.SoundAck.toObject(includeInstance, f),
    recordingId: (f = msg.getRecordingId()) && proto.component.sound.SoundId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.sound.RecordingAck}
 */
proto.component.sound.RecordingAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.sound.RecordingAck;
  return proto.component.sound.RecordingAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.sound.RecordingAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.sound.RecordingAck}
 */
proto.component.sound.RecordingAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.component.sound.SoundAck;
      reader.readMessage(value,proto.component.sound.SoundAck.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    case 2:
      var value = new proto.component.sound.SoundId;
      reader.readMessage(value,proto.component.sound.SoundId.deserializeBinaryFromReader);
      msg.setRecordingId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.sound.RecordingAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.sound.RecordingAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.sound.RecordingAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.RecordingAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.component.sound.SoundAck.serializeBinaryToWriter
    );
  }
  f = message.getRecordingId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.component.sound.SoundId.serializeBinaryToWriter
    );
  }
};


/**
 * optional SoundAck ack = 1;
 * @return {?proto.component.sound.SoundAck}
 */
proto.component.sound.RecordingAck.prototype.getAck = function() {
  return /** @type{?proto.component.sound.SoundAck} */ (
    jspb.Message.getWrapperField(this, proto.component.sound.SoundAck, 1));
};


/**
 * @param {?proto.component.sound.SoundAck|undefined} value
 * @return {!proto.component.sound.RecordingAck} returns this
*/
proto.component.sound.RecordingAck.prototype.setAck = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.component.sound.RecordingAck} returns this
 */
proto.component.sound.RecordingAck.prototype.clearAck = function() {
  return this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.component.sound.RecordingAck.prototype.hasAck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SoundId recording_id = 2;
 * @return {?proto.component.sound.SoundId}
 */
proto.component.sound.RecordingAck.prototype.getRecordingId = function() {
  return /** @type{?proto.component.sound.SoundId} */ (
    jspb.Message.getWrapperField(this, proto.component.sound.SoundId, 2));
};


/**
 * @param {?proto.component.sound.SoundId|undefined} value
 * @return {!proto.component.sound.RecordingAck} returns this
*/
proto.component.sound.RecordingAck.prototype.setRecordingId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.component.sound.RecordingAck} returns this
 */
proto.component.sound.RecordingAck.prototype.clearRecordingId = function() {
  return this.setRecordingId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.component.sound.RecordingAck.prototype.hasRecordingId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.sound.SpeakerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.component.sound.SpeakerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.sound.SpeakerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.SpeakerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && component_pb.ComponentId.toObject(includeInstance, f),
    volume: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.sound.SpeakerInfo}
 */
proto.component.sound.SpeakerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.sound.SpeakerInfo;
  return proto.component.sound.SpeakerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.sound.SpeakerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.sound.SpeakerInfo}
 */
proto.component.sound.SpeakerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new component_pb.ComponentId;
      reader.readMessage(value,component_pb.ComponentId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.sound.SpeakerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.sound.SpeakerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.sound.SpeakerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.SpeakerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      component_pb.ComponentId.serializeBinaryToWriter
    );
  }
  f = message.getVolume();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional component.ComponentId id = 1;
 * @return {?proto.component.ComponentId}
 */
proto.component.sound.SpeakerInfo.prototype.getId = function() {
  return /** @type{?proto.component.ComponentId} */ (
    jspb.Message.getWrapperField(this, component_pb.ComponentId, 1));
};


/**
 * @param {?proto.component.ComponentId|undefined} value
 * @return {!proto.component.sound.SpeakerInfo} returns this
*/
proto.component.sound.SpeakerInfo.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.component.sound.SpeakerInfo} returns this
 */
proto.component.sound.SpeakerInfo.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.component.sound.SpeakerInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float volume = 2;
 * @return {number}
 */
proto.component.sound.SpeakerInfo.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.component.sound.SpeakerInfo} returns this
 */
proto.component.sound.SpeakerInfo.prototype.setVolume = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.component.sound.ListOfSpeakerInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.sound.ListOfSpeakerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.component.sound.ListOfSpeakerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.sound.ListOfSpeakerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.ListOfSpeakerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    stereoCameraInfoList: jspb.Message.toObjectList(msg.getStereoCameraInfoList(),
    proto.component.sound.SpeakerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.sound.ListOfSpeakerInfo}
 */
proto.component.sound.ListOfSpeakerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.sound.ListOfSpeakerInfo;
  return proto.component.sound.ListOfSpeakerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.sound.ListOfSpeakerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.sound.ListOfSpeakerInfo}
 */
proto.component.sound.ListOfSpeakerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.component.sound.SpeakerInfo;
      reader.readMessage(value,proto.component.sound.SpeakerInfo.deserializeBinaryFromReader);
      msg.addStereoCameraInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.sound.ListOfSpeakerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.sound.ListOfSpeakerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.sound.ListOfSpeakerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.ListOfSpeakerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStereoCameraInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.component.sound.SpeakerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SpeakerInfo stereo_camera_info = 1;
 * @return {!Array<!proto.component.sound.SpeakerInfo>}
 */
proto.component.sound.ListOfSpeakerInfo.prototype.getStereoCameraInfoList = function() {
  return /** @type{!Array<!proto.component.sound.SpeakerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.component.sound.SpeakerInfo, 1));
};


/**
 * @param {!Array<!proto.component.sound.SpeakerInfo>} value
 * @return {!proto.component.sound.ListOfSpeakerInfo} returns this
*/
proto.component.sound.ListOfSpeakerInfo.prototype.setStereoCameraInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.component.sound.SpeakerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.component.sound.SpeakerInfo}
 */
proto.component.sound.ListOfSpeakerInfo.prototype.addStereoCameraInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.component.sound.SpeakerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.component.sound.ListOfSpeakerInfo} returns this
 */
proto.component.sound.ListOfSpeakerInfo.prototype.clearStereoCameraInfoList = function() {
  return this.setStereoCameraInfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.component.sound.VolumeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.component.sound.VolumeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.component.sound.VolumeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.VolumeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && component_pb.ComponentId.toObject(includeInstance, f),
    volume: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.component.sound.VolumeRequest}
 */
proto.component.sound.VolumeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.component.sound.VolumeRequest;
  return proto.component.sound.VolumeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.component.sound.VolumeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.component.sound.VolumeRequest}
 */
proto.component.sound.VolumeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new component_pb.ComponentId;
      reader.readMessage(value,component_pb.ComponentId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.component.sound.VolumeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.component.sound.VolumeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.component.sound.VolumeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.component.sound.VolumeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      component_pb.ComponentId.serializeBinaryToWriter
    );
  }
  f = message.getVolume();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional component.ComponentId id = 1;
 * @return {?proto.component.ComponentId}
 */
proto.component.sound.VolumeRequest.prototype.getId = function() {
  return /** @type{?proto.component.ComponentId} */ (
    jspb.Message.getWrapperField(this, component_pb.ComponentId, 1));
};


/**
 * @param {?proto.component.ComponentId|undefined} value
 * @return {!proto.component.sound.VolumeRequest} returns this
*/
proto.component.sound.VolumeRequest.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.component.sound.VolumeRequest} returns this
 */
proto.component.sound.VolumeRequest.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.component.sound.VolumeRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float volume = 2;
 * @return {number}
 */
proto.component.sound.VolumeRequest.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.component.sound.VolumeRequest} returns this
 */
proto.component.sound.VolumeRequest.prototype.setVolume = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


goog.object.extend(exports, proto.component.sound);
