syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

import "part.proto";
import "kinematics.proto";
import "error.proto";

package reachy.part.head;

message Head {
    
}

message HeadState {

}

message NeckPosition {
    float neck_roll = 1;
    float neck_pitch = 2;
    float neck_yaw = 3;
}

message HeadPosition {
    NeckPosition position = 1;
    google.protobuf.FloatValue l_antenna = 2;
    google.protobuf.FloatValue r_antenna = 3;
}

message HeadGoal {
    reachy.part.PartId id = 1;
    kinematics.Rotation3D rotation = 2;
    google.protobuf.FloatValue duration = 3;
}

message HeadOrientation {
    reachy.kinematics.Quaternion q = 1;
}

message HeadFKRequest {
    HeadPosition position = 2;
}

message HeadFKSolution {
    bool success = 1;
    HeadOrientation orientation = 2;
}

message HeadIKRequest {
    HeadOrientation target = 1;
    reachy.part.PartPosition q0 = 2;
}

message HeadIKSolution {
    bool success = 1;
    reachy.part.PartPosition position = 2;

    error.Error error = 3;
}

message HeadAck {
    google.protobuf.BoolValue success = 1;

    error.Error error = 3;
}

message HeadStatus {

}

message HeadTargetPoint {
    reachy.part.PartId id = 1;
    reachy.kinematics.Point point = 2;
}

service HeadService {
    rpc GetAllHeads (google.protobuf.Empty) returns (reachy.part.ListOfPart);

    rpc ComputeHeadFK (HeadFKRequest) returns (HeadFKSolution);
    rpc ComputeHeadIK (HeadIKRequest) returns (HeadIKSolution);

    rpc GoToOrientation (HeadGoal) returns (HeadAck);
    rpc GetOrientation (reachy.part.PartId) returns (reachy.kinematics.Quaternion);

    rpc LookAt (HeadTargetPoint) returns (HeadAck);

    rpc Audit (part.PartId) returns (HeadStatus);
    rpc HeartBeat (part.PartId) returns (HeadAck);

    rpc Restart (part.PartId) returns (HeadAck);
    rpc ResetDefaultValues(part.PartId) returns (HeadAck);

    rpc TurnOn (part.PartId) returns (HeadAck);
    rpc TurnOff (part.PartId) returns (HeadAck);

    rpc GetJointLimit (part.PartId) returns (HeadState);
    rpc GetTemperature (part.PartId) returns (HeadState);
    rpc GetGoalPosition (part.PartId) returns (HeadState);

    rpc SetSpeedLimit (part.PartId) returns (HeadState);
}
