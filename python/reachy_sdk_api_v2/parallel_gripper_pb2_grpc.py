# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import component_pb2 as component__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import parallel_gripper_pb2 as parallel__gripper__pb2


class GripperServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllParallelGripper = channel.unary_unary(
                '/component.parallel_gripper.GripperService/GetAllParallelGripper',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=parallel__gripper__pb2.ListOfParallelGripperInfo.FromString,
                )
        self.GetState = channel.unary_unary(
                '/component.parallel_gripper.GripperService/GetState',
                request_serializer=parallel__gripper__pb2.ParallelGripperStateRequest.SerializeToString,
                response_deserializer=parallel__gripper__pb2.ParallelGripperState.FromString,
                )
        self.StreamState = channel.unary_stream(
                '/component.parallel_gripper.GripperService/StreamState',
                request_serializer=parallel__gripper__pb2.ParallelGripperStreamStateRequest.SerializeToString,
                response_deserializer=parallel__gripper__pb2.ParallelGripperState.FromString,
                )
        self.SendCommand = channel.unary_unary(
                '/component.parallel_gripper.GripperService/SendCommand',
                request_serializer=parallel__gripper__pb2.ParallelGripperCommand.SerializeToString,
                response_deserializer=parallel__gripper__pb2.ParallelGripperAck.FromString,
                )
        self.StreamCommand = channel.stream_unary(
                '/component.parallel_gripper.GripperService/StreamCommand',
                request_serializer=parallel__gripper__pb2.ParallelGripperCommand.SerializeToString,
                response_deserializer=parallel__gripper__pb2.ParallelGripperAck.FromString,
                )
        self.Audit = channel.unary_unary(
                '/component.parallel_gripper.GripperService/Audit',
                request_serializer=component__pb2.ComponentId.SerializeToString,
                response_deserializer=parallel__gripper__pb2.ParallelGripperStatus.FromString,
                )
        self.HeartBeat = channel.unary_unary(
                '/component.parallel_gripper.GripperService/HeartBeat',
                request_serializer=component__pb2.ComponentId.SerializeToString,
                response_deserializer=parallel__gripper__pb2.ParallelGripperAck.FromString,
                )
        self.Restart = channel.unary_unary(
                '/component.parallel_gripper.GripperService/Restart',
                request_serializer=component__pb2.ComponentId.SerializeToString,
                response_deserializer=parallel__gripper__pb2.ParallelGripperAck.FromString,
                )


class GripperServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAllParallelGripper(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamCommand(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Audit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HeartBeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Restart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GripperServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllParallelGripper': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllParallelGripper,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=parallel__gripper__pb2.ListOfParallelGripperInfo.SerializeToString,
            ),
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=parallel__gripper__pb2.ParallelGripperStateRequest.FromString,
                    response_serializer=parallel__gripper__pb2.ParallelGripperState.SerializeToString,
            ),
            'StreamState': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamState,
                    request_deserializer=parallel__gripper__pb2.ParallelGripperStreamStateRequest.FromString,
                    response_serializer=parallel__gripper__pb2.ParallelGripperState.SerializeToString,
            ),
            'SendCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.SendCommand,
                    request_deserializer=parallel__gripper__pb2.ParallelGripperCommand.FromString,
                    response_serializer=parallel__gripper__pb2.ParallelGripperAck.SerializeToString,
            ),
            'StreamCommand': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamCommand,
                    request_deserializer=parallel__gripper__pb2.ParallelGripperCommand.FromString,
                    response_serializer=parallel__gripper__pb2.ParallelGripperAck.SerializeToString,
            ),
            'Audit': grpc.unary_unary_rpc_method_handler(
                    servicer.Audit,
                    request_deserializer=component__pb2.ComponentId.FromString,
                    response_serializer=parallel__gripper__pb2.ParallelGripperStatus.SerializeToString,
            ),
            'HeartBeat': grpc.unary_unary_rpc_method_handler(
                    servicer.HeartBeat,
                    request_deserializer=component__pb2.ComponentId.FromString,
                    response_serializer=parallel__gripper__pb2.ParallelGripperAck.SerializeToString,
            ),
            'Restart': grpc.unary_unary_rpc_method_handler(
                    servicer.Restart,
                    request_deserializer=component__pb2.ComponentId.FromString,
                    response_serializer=parallel__gripper__pb2.ParallelGripperAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'component.parallel_gripper.GripperService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GripperService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAllParallelGripper(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/component.parallel_gripper.GripperService/GetAllParallelGripper',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            parallel__gripper__pb2.ListOfParallelGripperInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/component.parallel_gripper.GripperService/GetState',
            parallel__gripper__pb2.ParallelGripperStateRequest.SerializeToString,
            parallel__gripper__pb2.ParallelGripperState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/component.parallel_gripper.GripperService/StreamState',
            parallel__gripper__pb2.ParallelGripperStreamStateRequest.SerializeToString,
            parallel__gripper__pb2.ParallelGripperState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/component.parallel_gripper.GripperService/SendCommand',
            parallel__gripper__pb2.ParallelGripperCommand.SerializeToString,
            parallel__gripper__pb2.ParallelGripperAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamCommand(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/component.parallel_gripper.GripperService/StreamCommand',
            parallel__gripper__pb2.ParallelGripperCommand.SerializeToString,
            parallel__gripper__pb2.ParallelGripperAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Audit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/component.parallel_gripper.GripperService/Audit',
            component__pb2.ComponentId.SerializeToString,
            parallel__gripper__pb2.ParallelGripperStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HeartBeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/component.parallel_gripper.GripperService/HeartBeat',
            component__pb2.ComponentId.SerializeToString,
            parallel__gripper__pb2.ParallelGripperAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Restart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/component.parallel_gripper.GripperService/Restart',
            component__pb2.ComponentId.SerializeToString,
            parallel__gripper__pb2.ParallelGripperAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
