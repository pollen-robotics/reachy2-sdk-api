"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing
import video_pb2

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class VideoServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetAvailableCameras: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        video_pb2.ListOfCameraFeatures,
    ]
    GetFrame: grpc.UnaryUnaryMultiCallable[
        video_pb2.ViewRequest,
        video_pb2.Frame,
    ]
    GetParameters: grpc.UnaryUnaryMultiCallable[
        video_pb2.ViewRequest,
        video_pb2.CameraParameters,
    ]
    GetDepth: grpc.UnaryUnaryMultiCallable[
        video_pb2.ViewRequest,
        video_pb2.FrameRaw,
    ]

class VideoServiceAsyncStub:
    GetAvailableCameras: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        video_pb2.ListOfCameraFeatures,
    ]
    GetFrame: grpc.aio.UnaryUnaryMultiCallable[
        video_pb2.ViewRequest,
        video_pb2.Frame,
    ]
    GetParameters: grpc.aio.UnaryUnaryMultiCallable[
        video_pb2.ViewRequest,
        video_pb2.CameraParameters,
    ]
    GetDepth: grpc.aio.UnaryUnaryMultiCallable[
        video_pb2.ViewRequest,
        video_pb2.FrameRaw,
    ]

class VideoServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetAvailableCameras(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[video_pb2.ListOfCameraFeatures, collections.abc.Awaitable[video_pb2.ListOfCameraFeatures]]: ...
    @abc.abstractmethod
    def GetFrame(
        self,
        request: video_pb2.ViewRequest,
        context: _ServicerContext,
    ) -> typing.Union[video_pb2.Frame, collections.abc.Awaitable[video_pb2.Frame]]: ...
    @abc.abstractmethod
    def GetParameters(
        self,
        request: video_pb2.ViewRequest,
        context: _ServicerContext,
    ) -> typing.Union[video_pb2.CameraParameters, collections.abc.Awaitable[video_pb2.CameraParameters]]: ...
    @abc.abstractmethod
    def GetDepth(
        self,
        request: video_pb2.ViewRequest,
        context: _ServicerContext,
    ) -> typing.Union[video_pb2.FrameRaw, collections.abc.Awaitable[video_pb2.FrameRaw]]: ...

def add_VideoServiceServicer_to_server(servicer: VideoServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
