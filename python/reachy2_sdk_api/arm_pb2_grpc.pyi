"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import arm_pb2
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import kinematics_pb2
import part_pb2
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class ArmServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetAllArms: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        arm_pb2.ListOfArm,
    ]
    GetState: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        arm_pb2.ArmState,
    ]
    ComputeArmFK: grpc.UnaryUnaryMultiCallable[
        arm_pb2.ArmFKRequest,
        arm_pb2.ArmFKSolution,
    ]
    ComputeArmIK: grpc.UnaryUnaryMultiCallable[
        arm_pb2.ArmIKRequest,
        arm_pb2.ArmIKSolution,
    ]
    GetCartesianPosition: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        kinematics_pb2.Matrix4x4,
    ]
    GetJointPosition: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        arm_pb2.ArmPosition,
    ]
    Audit: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        arm_pb2.ArmStatus,
    ]
    HeartBeat: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    Restart: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    ResetDefaultValues: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    TurnOn: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    TurnOff: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    GetJointsLimits: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        arm_pb2.ArmLimits,
    ]
    GetTemperatures: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        arm_pb2.ArmTemperatures,
    ]
    GetJointGoalPosition: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        arm_pb2.ArmPosition,
    ]
    SetSpeedLimit: grpc.UnaryUnaryMultiCallable[
        arm_pb2.SpeedLimitRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    SetTorqueLimit: grpc.UnaryUnaryMultiCallable[
        arm_pb2.TorqueLimitRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    SendArmCartesianGoal: grpc.UnaryUnaryMultiCallable[
        arm_pb2.ArmCartesianGoal,
        google.protobuf.empty_pb2.Empty,
    ]

class ArmServiceAsyncStub:
    GetAllArms: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        arm_pb2.ListOfArm,
    ]
    GetState: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        arm_pb2.ArmState,
    ]
    ComputeArmFK: grpc.aio.UnaryUnaryMultiCallable[
        arm_pb2.ArmFKRequest,
        arm_pb2.ArmFKSolution,
    ]
    ComputeArmIK: grpc.aio.UnaryUnaryMultiCallable[
        arm_pb2.ArmIKRequest,
        arm_pb2.ArmIKSolution,
    ]
    GetCartesianPosition: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        kinematics_pb2.Matrix4x4,
    ]
    GetJointPosition: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        arm_pb2.ArmPosition,
    ]
    Audit: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        arm_pb2.ArmStatus,
    ]
    HeartBeat: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    Restart: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    ResetDefaultValues: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    TurnOn: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    TurnOff: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    GetJointsLimits: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        arm_pb2.ArmLimits,
    ]
    GetTemperatures: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        arm_pb2.ArmTemperatures,
    ]
    GetJointGoalPosition: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        arm_pb2.ArmPosition,
    ]
    SetSpeedLimit: grpc.aio.UnaryUnaryMultiCallable[
        arm_pb2.SpeedLimitRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    SetTorqueLimit: grpc.aio.UnaryUnaryMultiCallable[
        arm_pb2.TorqueLimitRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    SendArmCartesianGoal: grpc.aio.UnaryUnaryMultiCallable[
        arm_pb2.ArmCartesianGoal,
        google.protobuf.empty_pb2.Empty,
    ]

class ArmServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetAllArms(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[arm_pb2.ListOfArm, collections.abc.Awaitable[arm_pb2.ListOfArm]]: ...
    @abc.abstractmethod
    def GetState(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[arm_pb2.ArmState, collections.abc.Awaitable[arm_pb2.ArmState]]: ...
    @abc.abstractmethod
    def ComputeArmFK(
        self,
        request: arm_pb2.ArmFKRequest,
        context: _ServicerContext,
    ) -> typing.Union[arm_pb2.ArmFKSolution, collections.abc.Awaitable[arm_pb2.ArmFKSolution]]: ...
    @abc.abstractmethod
    def ComputeArmIK(
        self,
        request: arm_pb2.ArmIKRequest,
        context: _ServicerContext,
    ) -> typing.Union[arm_pb2.ArmIKSolution, collections.abc.Awaitable[arm_pb2.ArmIKSolution]]: ...
    @abc.abstractmethod
    def GetCartesianPosition(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[kinematics_pb2.Matrix4x4, collections.abc.Awaitable[kinematics_pb2.Matrix4x4]]: ...
    @abc.abstractmethod
    def GetJointPosition(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[arm_pb2.ArmPosition, collections.abc.Awaitable[arm_pb2.ArmPosition]]: ...
    @abc.abstractmethod
    def Audit(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[arm_pb2.ArmStatus, collections.abc.Awaitable[arm_pb2.ArmStatus]]: ...
    @abc.abstractmethod
    def HeartBeat(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def Restart(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def ResetDefaultValues(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def TurnOn(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def TurnOff(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def GetJointsLimits(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[arm_pb2.ArmLimits, collections.abc.Awaitable[arm_pb2.ArmLimits]]: ...
    @abc.abstractmethod
    def GetTemperatures(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[arm_pb2.ArmTemperatures, collections.abc.Awaitable[arm_pb2.ArmTemperatures]]: ...
    @abc.abstractmethod
    def GetJointGoalPosition(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[arm_pb2.ArmPosition, collections.abc.Awaitable[arm_pb2.ArmPosition]]: ...
    @abc.abstractmethod
    def SetSpeedLimit(
        self,
        request: arm_pb2.SpeedLimitRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def SetTorqueLimit(
        self,
        request: arm_pb2.TorqueLimitRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def SendArmCartesianGoal(
        self,
        request: arm_pb2.ArmCartesianGoal,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...

def add_ArmServiceServicer_to_server(servicer: ArmServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
