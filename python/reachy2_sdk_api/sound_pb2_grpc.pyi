"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import component_pb2
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import sound_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class SoundServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetAllMicrophone: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        sound_pb2.ListOfMicrophone,
    ]

    GetAllSpeaker: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        sound_pb2.ListOfSpeaker,
    ]

    StartRecording: grpc.UnaryUnaryMultiCallable[
        sound_pb2.RecordingRequest,
        sound_pb2.RecordingAck,
    ]

    StopRecording: grpc.UnaryUnaryMultiCallable[
        component_pb2.ComponentId,
        sound_pb2.RecordingAck,
    ]

    TestSpeaker: grpc.UnaryUnaryMultiCallable[
        component_pb2.ComponentId,
        google.protobuf.empty_pb2.Empty,
    ]

    ChangeVolume: grpc.UnaryUnaryMultiCallable[
        sound_pb2.VolumeRequest,
        google.protobuf.empty_pb2.Empty,
    ]

    PlaySound: grpc.UnaryUnaryMultiCallable[
        sound_pb2.SoundRequest,
        google.protobuf.empty_pb2.Empty,
    ]

    StopSound: grpc.UnaryUnaryMultiCallable[
        component_pb2.ComponentId,
        google.protobuf.empty_pb2.Empty,
    ]

    GetSoundsList: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        sound_pb2.ListOfSound,
    ]

    SayText: grpc.UnaryUnaryMultiCallable[
        sound_pb2.TextRequest,
        google.protobuf.empty_pb2.Empty,
    ]

class SoundServiceAsyncStub:
    GetAllMicrophone: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        sound_pb2.ListOfMicrophone,
    ]

    GetAllSpeaker: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        sound_pb2.ListOfSpeaker,
    ]

    StartRecording: grpc.aio.UnaryUnaryMultiCallable[
        sound_pb2.RecordingRequest,
        sound_pb2.RecordingAck,
    ]

    StopRecording: grpc.aio.UnaryUnaryMultiCallable[
        component_pb2.ComponentId,
        sound_pb2.RecordingAck,
    ]

    TestSpeaker: grpc.aio.UnaryUnaryMultiCallable[
        component_pb2.ComponentId,
        google.protobuf.empty_pb2.Empty,
    ]

    ChangeVolume: grpc.aio.UnaryUnaryMultiCallable[
        sound_pb2.VolumeRequest,
        google.protobuf.empty_pb2.Empty,
    ]

    PlaySound: grpc.aio.UnaryUnaryMultiCallable[
        sound_pb2.SoundRequest,
        google.protobuf.empty_pb2.Empty,
    ]

    StopSound: grpc.aio.UnaryUnaryMultiCallable[
        component_pb2.ComponentId,
        google.protobuf.empty_pb2.Empty,
    ]

    GetSoundsList: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        sound_pb2.ListOfSound,
    ]

    SayText: grpc.aio.UnaryUnaryMultiCallable[
        sound_pb2.TextRequest,
        google.protobuf.empty_pb2.Empty,
    ]

class SoundServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetAllMicrophone(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[sound_pb2.ListOfMicrophone, collections.abc.Awaitable[sound_pb2.ListOfMicrophone]]: ...

    @abc.abstractmethod
    def GetAllSpeaker(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[sound_pb2.ListOfSpeaker, collections.abc.Awaitable[sound_pb2.ListOfSpeaker]]: ...

    @abc.abstractmethod
    def StartRecording(
        self,
        request: sound_pb2.RecordingRequest,
        context: _ServicerContext,
    ) -> typing.Union[sound_pb2.RecordingAck, collections.abc.Awaitable[sound_pb2.RecordingAck]]: ...

    @abc.abstractmethod
    def StopRecording(
        self,
        request: component_pb2.ComponentId,
        context: _ServicerContext,
    ) -> typing.Union[sound_pb2.RecordingAck, collections.abc.Awaitable[sound_pb2.RecordingAck]]: ...

    @abc.abstractmethod
    def TestSpeaker(
        self,
        request: component_pb2.ComponentId,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...

    @abc.abstractmethod
    def ChangeVolume(
        self,
        request: sound_pb2.VolumeRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...

    @abc.abstractmethod
    def PlaySound(
        self,
        request: sound_pb2.SoundRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...

    @abc.abstractmethod
    def StopSound(
        self,
        request: component_pb2.ComponentId,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...

    @abc.abstractmethod
    def GetSoundsList(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[sound_pb2.ListOfSound, collections.abc.Awaitable[sound_pb2.ListOfSound]]: ...

    @abc.abstractmethod
    def SayText(
        self,
        request: sound_pb2.TextRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...

def add_SoundServiceServicer_to_server(servicer: SoundServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
