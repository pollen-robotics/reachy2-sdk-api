"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import hand_pb2
import part_pb2
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class HandServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetAllHands: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        hand_pb2.ListOfHand,
    ]
    GetState: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        hand_pb2.HandState,
    ]
    OpenHand: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    CloseHand: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    Audit: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        hand_pb2.HandStatus,
    ]
    HeartBeat: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    Restart: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    ResetDefaultValues: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    TurnOn: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    TurnOff: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    GetJointLimit: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        hand_pb2.JointsLimits,
    ]
    GetTemperature: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        hand_pb2.HandTemperatures,
    ]
    GetHandGoalPosition: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        hand_pb2.HandPosition,
    ]
    SetSpeedLimit: grpc.UnaryUnaryMultiCallable[
        hand_pb2.SpeedLimitRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    SetHandPosition: grpc.UnaryUnaryMultiCallable[
        hand_pb2.HandPositionRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    GetForce: grpc.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        hand_pb2.Force,
    ]

class HandServiceAsyncStub:
    GetAllHands: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        hand_pb2.ListOfHand,
    ]
    GetState: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        hand_pb2.HandState,
    ]
    OpenHand: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    CloseHand: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    Audit: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        hand_pb2.HandStatus,
    ]
    HeartBeat: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    Restart: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    ResetDefaultValues: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    TurnOn: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    TurnOff: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        google.protobuf.empty_pb2.Empty,
    ]
    GetJointLimit: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        hand_pb2.JointsLimits,
    ]
    GetTemperature: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        hand_pb2.HandTemperatures,
    ]
    GetHandGoalPosition: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        hand_pb2.HandPosition,
    ]
    SetSpeedLimit: grpc.aio.UnaryUnaryMultiCallable[
        hand_pb2.SpeedLimitRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    SetHandPosition: grpc.aio.UnaryUnaryMultiCallable[
        hand_pb2.HandPositionRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    GetForce: grpc.aio.UnaryUnaryMultiCallable[
        part_pb2.PartId,
        hand_pb2.Force,
    ]

class HandServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetAllHands(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[hand_pb2.ListOfHand, collections.abc.Awaitable[hand_pb2.ListOfHand]]: ...
    @abc.abstractmethod
    def GetState(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[hand_pb2.HandState, collections.abc.Awaitable[hand_pb2.HandState]]: ...
    @abc.abstractmethod
    def OpenHand(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def CloseHand(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def Audit(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[hand_pb2.HandStatus, collections.abc.Awaitable[hand_pb2.HandStatus]]: ...
    @abc.abstractmethod
    def HeartBeat(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def Restart(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def ResetDefaultValues(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def TurnOn(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def TurnOff(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def GetJointLimit(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[hand_pb2.JointsLimits, collections.abc.Awaitable[hand_pb2.JointsLimits]]: ...
    @abc.abstractmethod
    def GetTemperature(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[hand_pb2.HandTemperatures, collections.abc.Awaitable[hand_pb2.HandTemperatures]]: ...
    @abc.abstractmethod
    def GetHandGoalPosition(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[hand_pb2.HandPosition, collections.abc.Awaitable[hand_pb2.HandPosition]]: ...
    @abc.abstractmethod
    def SetSpeedLimit(
        self,
        request: hand_pb2.SpeedLimitRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def SetHandPosition(
        self,
        request: hand_pb2.HandPositionRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def GetForce(
        self,
        request: part_pb2.PartId,
        context: _ServicerContext,
    ) -> typing.Union[hand_pb2.Force, collections.abc.Awaitable[hand_pb2.Force]]: ...

def add_HandServiceServicer_to_server(servicer: HandServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
